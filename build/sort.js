// Generated by CoffeeScript 1.10.0
var array, sort;

array = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1];

sort = function(array, args) {
  var a, action, actions, compare, findBetween, from, get, i, j, k, l, len, len1, len2, m, move, n, orderedRanges, originalPosition, r, range, rangeA, rangeB, ranges, ref, ref1, results, shouldMove, sortedRanges, to;
  move = args.move, compare = args.compare, get = args.get;
  findBetween = function(a, b, skips) {
    var i, j, ref;
    if (skips == null) {
      skips = [];
    }
    for (i = j = 0, ref = array.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (i === a || i === b) {
        continue;
      }
      if (compare(get(array, i), get(array, a)) > 0 && compare(get(array, i), get(array, b)) < 0) {
        return true;
      }
    }
    return false;
  };
  ranges = [];
  rangeA = 0;
  rangeB = 0;
  range = [];
  for (i = j = 0, ref = array.length - 1; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
    range.push(get(array, i));
    if (compare(get(array, i), get(array, i + 1)) > 0 || findBetween(i, i + 1)) {
      ranges.push({
        a: rangeA,
        b: rangeB,
        range: range,
        aValue: get(array, rangeA),
        bValue: get(array, rangeB)
      });
      range = [];
      rangeA = rangeB = i + 1;
    } else {
      rangeB++;
    }
  }
  range.push(get(array, array.length - 1));
  ranges.push({
    a: rangeA,
    b: rangeB,
    range: range,
    aValue: get(array, rangeA),
    bValue: get(array, rangeB)
  });
  orderedRanges = ranges.slice(0, ranges.length).sort(function(a, b) {
    return a.range.length - b.range.length;
  });
  sortedRanges = ranges.slice(0, ranges.length);
  actions = [];
  for (k = 0, len = orderedRanges.length; k < len; k++) {
    r = orderedRanges[k];
    originalPosition = 0;
    from = 0;
    for (i = l = 0, len1 = sortedRanges.length; l < len1; i = ++l) {
      range = sortedRanges[i];
      if (range === r) {
        originalPosition = i;
        sortedRanges.splice(i, 1);
        break;
      } else {
        from += range.range.length;
      }
    }
    to = 0;
    for (i = m = 0, ref1 = sortedRanges.length; 0 <= ref1 ? m <= ref1 : m >= ref1; i = 0 <= ref1 ? ++m : --m) {
      shouldMove = false;
      if (i === sortedRanges.length) {
        shouldMove = true;
      } else {
        if (compare(r.bValue, sortedRanges[i].aValue) <= 0) {
          shouldMove = true;
        }
      }
      if (shouldMove) {
        if (originalPosition !== i) {
          actions.push({
            from: from,
            to: to,
            length: r.range.length
          });
        }
        sortedRanges.splice(i, 0, r);
        break;
      } else {
        to += sortedRanges[i].range.length;
      }
    }
  }
  results = [];
  for (n = 0, len2 = actions.length; n < len2; n++) {
    action = actions[n];
    a = 0;
    results.push((function() {
      var o, ref2, ref3, results1;
      results1 = [];
      for (i = o = ref2 = action.from, ref3 = action.from + action.length; ref2 <= ref3 ? o < ref3 : o > ref3; i = ref2 <= ref3 ? ++o : --o) {
        from = i;
        to = action.to + i - action.from;
        results1.push(move(array, from, to));
      }
      return results1;
    })());
  }
  return results;
};

sort(array, {
  move: function(array, from, to) {
    var value;
    value = array.splice(from, 1)[0];
    return array.splice(to, 0, value);
  },
  compare: function(a, b) {
    return a - b;
  },
  get: function(array, i) {
    return array[i];
  }
});

console.debug(array);

//# sourceMappingURL=sort.js.map
