// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

define(['./HasManyRelationship', './HasOneRelationship', './ObservableObject'], function(HasManyRelationship, HasOneRelationship, ObservableObject) {
  var ModelInstance;
  return ModelInstance = (function(superClass) {
    extend(ModelInstance, superClass);

    ModelInstance.prototype._createRelationship = function(constructor, relName) {
      if (typeof constructor === 'function') {
        return constructor(this);
      } else {
        if (typeof constructor.model === 'string') {
          constructor.model = this.model.manager.getModel(constructor.model);
        }
        switch (constructor.type) {
          case 'hasMany':
            return new HasManyRelationship(this, constructor, relName);
          case 'hasOne':
            return new HasOneRelationship(this, constructor, relName);
        }
      }
    };

    ModelInstance.prototype._createRelationships = function() {
      var relArgs, relName, relationships, results;
      this._relationships = {};
      if (relationships = this.model.relationships) {
        results = [];
        for (relName in relationships) {
          relArgs = relationships[relName];
          results.push(this._relationships[relName] = this._createRelationship(relArgs, relName));
        }
        return results;
      }
    };

    ModelInstance.prototype._initRelationships = function() {
      var ref, rel, relName, results;
      ref = this._relationships;
      results = [];
      for (relName in ref) {
        rel = ref[relName];
        results.push(typeof rel.init === "function" ? rel.init() : void 0);
      }
      return results;
    };

    ModelInstance.prototype.saneId = function() {
      return this.record.saneId();
    };

    ModelInstance.prototype.createRelationships = function(shouldCreateRelationships) {
      if (this.model.manager.relationshipsPaused) {
        return this.model.manager.relationshipsQueue.push(this);
      } else if (shouldCreateRelationships) {
        this._createRelationships();
        return this._initRelationships();
      }
    };

    function ModelInstance(model, record) {
      this.model = model;
      this.record = record;
      this.modelName = this.model.name;
      this.retrieving = {};
    }

    ModelInstance.prototype._get = function(propertyName) {
      return this.record.get(propertyName);
    };

    ModelInstance.prototype.get = function(propertyName) {
      var prop, ref, ref1, rel;
      if (rel = (ref = this._relationships) != null ? ref[propertyName] : void 0) {
        return rel;
      } else if (prop = (ref1 = this.model.properties) != null ? ref1[propertyName] : void 0) {
        return prop.call(this);
      } else {
        return this._get(propertyName);
      }
    };

    ModelInstance.prototype.set = function(propertyName, value, timestamp) {
      return this.record.set(propertyName, value, timestamp);
    };

    ModelInstance.prototype.field = function(name) {
      return this.record.field(name);
    };

    ModelInstance.prototype["delete"] = function(failSilently) {
      if (failSilently == null) {
        failSilently = false;
      }
      return this.model["delete"](this, failSilently);
    };

    ModelInstance.prototype.tableName = function() {
      return this.record.tableName();
    };

    ModelInstance.prototype.equals = function(instance) {
      return this.model === instance.model && this.get('id') === instance.get('id');
    };

    ModelInstance.prototype.isA = function(modelName) {
      return modelName === this.modelName;
    };

    ModelInstance.prototype.retrieve = function(field, cb, force) {
      if (cb == null) {
        cb = null;
      }
      if (force == null) {
        force = false;
      }
      if (this.get(field) === null || force) {
        if (this.retrieving[field]) {
          if (cb) {
            return this.retrieving[field].push(cb);
          }
        } else {
          this.retrieving[field] = [];
          if (cb) {
            this.retrieving[field].push(cb);
          }
          return this.retrievers[field].call(this, (function(_this) {
            return function(value) {
              var j, len, ref;
              _this.set(field, value);
              if (_this.retrieving[field]) {
                ref = _this.retrieving[field];
                for (j = 0, len = ref.length; j < len; j++) {
                  cb = ref[j];
                  cb(value);
                }
              }
              return delete _this.retrieving[field];
            };
          })(this));
        }
      } else if (cb) {
        return cb(this.get(field));
      }
    };

    ModelInstance.prototype["with"] = function() {
      var cb, count, done, field, fields, i, j, k, len, results, values;
      fields = 2 <= arguments.length ? slice.call(arguments, 0, j = arguments.length - 1) : (j = 0, []), cb = arguments[j++];
      values = [];
      done = function() {
        if (!--count) {
          return cb.apply(null, values);
        }
      };
      count = fields.length;
      results = [];
      for (i = k = 0, len = fields.length; k < len; i = ++k) {
        field = fields[i];
        results.push((function(_this) {
          return function(field, i) {
            if (_this.retrieving[field]) {
              return _this.retrieving[field].push(function(value) {
                values[i] = value;
                return done();
              });
            } else {
              if (_this.get(field) === null) {
                return _this.retrieve(field, function(value) {
                  values[i] = value;
                  return done();
                });
              } else {
                values[i] = _this.get(field);
                return done();
              }
            }
          };
        })(this)(field, i));
      }
      return results;
    };

    return ModelInstance;

  })(ObservableObject);
});

//# sourceMappingURL=ModelInstance.js.map
