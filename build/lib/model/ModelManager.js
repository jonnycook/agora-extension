// Generated by CoffeeScript 1.7.1
define(['./Model', './Event'], function(Model, Event) {
  var ModelManager;
  return ModelManager = (function() {
    function ModelManager(db, background) {
      this.db = db;
      this.background = background;
      this._models = {};
      this.db.events.onBeforeExecuteChanges.subscribe((function(_this) {
        return function() {
          return _this.pauseRelationships();
        };
      })(this));
      this.db.events.onAfterExecuteChanges.subscribe((function(_this) {
        return function() {
          return _this.resumeRelationships();
        };
      })(this));
      this.events = {
        onFault: new Event
      };
      this._modelsByTable = {};
    }

    ModelManager.prototype.pauseRelationships = function() {
      this.relationshipsPaused = true;
      this.relationshipsQueue = [];
      return this.mutations = [];
    };

    ModelManager.prototype.resumeRelationships = function() {
      var instance, mutation, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      this.relationshipsPaused = false;
      _ref = this.relationshipsQueue;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        instance = _ref[_i];
        instance._createRelationships();
      }
      _ref1 = this.relationshipsQueue;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        instance = _ref1[_j];
        instance._initRelationships();
      }
      _ref2 = this.mutations;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        mutation = _ref2[_k];
        mutation.observer(mutation.mutation);
      }
      _ref3 = this.relationshipsQueue;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        instance = _ref3[_l];
        instance.model.events.onCreate.fire(instance, instance.model);
      }
      delete this.relationshipsQueue;
      return delete this.mutations;
    };

    ModelManager.prototype.clear = function() {
      var model, name, _i, _len, _ref, _results;
      _ref = this._models;
      _results = [];
      for (model = _i = 0, _len = _ref.length; _i < _len; model = ++_i) {
        name = _ref[model];
        _results.push(model.clear());
      }
      return _results;
    };

    ModelManager.prototype.model = function(name) {
      return this.getModel(name);
    };

    ModelManager.prototype.instanceForRecord = function(record) {
      var model;
      if (record) {
        model = this._modelsByTable[record.table.name];
        return model.withId(record.get('id'));
      }
    };

    ModelManager.prototype.getModel = function(name) {
      var model;
      model = this._models[name];
      if (model) {
        return model;
      } else {
        throw new Error("no model '" + name + "'");
      }
    };

    ModelManager.prototype.instance = function(model, id) {
      return this.getInstance(model, id);
    };

    ModelManager.prototype.getInstance = function(model, id, throwError) {
      if (throwError == null) {
        throwError = true;
      }
      return this.getModel(model).withId(id, throwError);
    };

    ModelManager.prototype.addModel = function(modelName, modelDef) {
      var _ref;
      return this._modelsByTable[modelDef.table] = this._models[modelName] = new ((_ref = modelDef["class"]) != null ? _ref : Model)(this, modelName, this.background, modelDef);
    };

    ModelManager.prototype.initModels = function() {
      var model, modelName, _ref, _results;
      _ref = this._models;
      _results = [];
      for (modelName in _ref) {
        model = _ref[modelName];
        _results.push(model._initRelationships());
      }
      return _results;
    };

    ModelManager.prototype.defineModels = function(definitions) {
      var modelDef, modelName;
      if (definitions) {
        for (modelName in definitions) {
          modelDef = definitions[modelName];
          this.addModel(modelName, modelDef);
        }
      }
      return this.initModels();
    };

    return ModelManager;

  })();
});

//# sourceMappingURL=ModelManager.map
