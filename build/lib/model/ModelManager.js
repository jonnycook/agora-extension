// Generated by CoffeeScript 1.10.0
define(['./Model', './Event'], function(Model, Event) {
  var ModelManager;
  return ModelManager = (function() {
    function ModelManager(db, background) {
      this.db = db;
      this.background = background;
      this._models = {};
      this.db.events.onBeforeExecuteChanges.subscribe((function(_this) {
        return function() {
          return _this.pauseRelationships();
        };
      })(this));
      this.db.events.onAfterExecuteChanges.subscribe((function(_this) {
        return function() {
          return _this.resumeRelationships();
        };
      })(this));
      this.events = {
        onFault: new Event
      };
      this._modelsByTable = {};
    }

    ModelManager.prototype.pauseRelationships = function() {
      this.relationshipsPaused = true;
      this.relationshipsQueue = [];
      return this.mutations = [];
    };

    ModelManager.prototype.resumeRelationships = function() {
      var i, instance, j, k, l, len, len1, len2, len3, mutation, ref, ref1, ref2, ref3;
      this.relationshipsPaused = false;
      ref = this.relationshipsQueue;
      for (i = 0, len = ref.length; i < len; i++) {
        instance = ref[i];
        instance._createRelationships();
      }
      ref1 = this.relationshipsQueue;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        instance = ref1[j];
        instance._initRelationships();
      }
      ref2 = this.mutations;
      for (k = 0, len2 = ref2.length; k < len2; k++) {
        mutation = ref2[k];
        mutation.observer(mutation.mutation);
      }
      ref3 = this.relationshipsQueue;
      for (l = 0, len3 = ref3.length; l < len3; l++) {
        instance = ref3[l];
        instance.model.events.onCreate.fire(instance, instance.model);
      }
      delete this.relationshipsQueue;
      return delete this.mutations;
    };

    ModelManager.prototype.clear = function() {
      var i, len, model, name, ref, results;
      ref = this._models;
      results = [];
      for (model = i = 0, len = ref.length; i < len; model = ++i) {
        name = ref[model];
        results.push(model.clear());
      }
      return results;
    };

    ModelManager.prototype.model = function(name) {
      return this.getModel(name);
    };

    ModelManager.prototype.instanceForRecord = function(record) {
      var model;
      if (record) {
        model = this._modelsByTable[record.table.name];
        return model.withId(record.get('id'));
      }
    };

    ModelManager.prototype.getModel = function(name) {
      var model;
      model = this._models[name];
      if (model) {
        return model;
      } else {
        throw new Error("no model '" + name + "'");
      }
    };

    ModelManager.prototype.instance = function(model, id) {
      return this.getInstance(model, id);
    };

    ModelManager.prototype.getInstance = function(model, id, throwError) {
      if (throwError == null) {
        throwError = true;
      }
      return this.getModel(model).withId(id, throwError);
    };

    ModelManager.prototype.addModel = function(modelName, modelDef) {
      var ref;
      return this._modelsByTable[modelDef.table] = this._models[modelName] = new ((ref = modelDef["class"]) != null ? ref : Model)(this, modelName, this.background, modelDef);
    };

    ModelManager.prototype.initModels = function() {
      var model, modelName, ref, results;
      ref = this._models;
      results = [];
      for (modelName in ref) {
        model = ref[modelName];
        results.push(model._initRelationships());
      }
      return results;
    };

    ModelManager.prototype.defineModels = function(definitions) {
      var modelDef, modelName;
      if (definitions) {
        for (modelName in definitions) {
          modelDef = definitions[modelName];
          this.addModel(modelName, modelDef);
        }
      }
      return this.initModels();
    };

    return ModelManager;

  })();
});

//# sourceMappingURL=ModelManager.js.map
