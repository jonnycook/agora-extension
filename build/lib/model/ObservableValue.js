// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['./ObservableObject', 'underscore'], function(ObservableObject, _) {
  var ObservableValue;
  return ObservableValue = (function(superClass) {
    extend(ObservableValue, superClass);

    function ObservableValue(_value, _reassignIdentical) {
      this._value = _value;
      this._reassignIdentical = _reassignIdentical != null ? _reassignIdentical : false;
    }

    ObservableValue.prototype.test = function(value) {
      if (this._reassignIdentical) {
        return true;
      }
      if (this._type === 'object') {
        return !_.isEqual(value, this._value);
      } else {
        return value !== this._value;
      }
    };

    ObservableValue.prototype.set = function(value, timestamp) {
      var oldValue;
      if (this.test(value)) {
        oldValue = this._value;
        this._value = value;
        return this._fireMutation('set', {
          value: value,
          oldValue: oldValue,
          timestamp: timestamp
        });
      }
    };

    ObservableValue.prototype.get = function() {
      return this._value;
    };

    ObservableValue.prototype["with"] = function(cb) {
      if (this._value !== null) {
        return cb(this._value);
      } else {
        return this.observe((function(_this) {
          return function() {
            if (_this._value !== null) {
              cb(_this._value);
              return _this.stopObserving(arguments.callee);
            }
          };
        })(this));
      }
    };

    return ObservableValue;

  })(ObservableObject);
});

//# sourceMappingURL=ObservableValue.js.map
