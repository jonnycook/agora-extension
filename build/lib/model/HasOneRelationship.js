// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['./ObservableArray', './auxiliary/maintainOrder', './Relationship'], function(ObservableArray, maintainOrder, Relationship) {
  var HasOneRelationship;
  return HasOneRelationship = (function(superClass) {
    extend(HasOneRelationship, superClass);

    HasOneRelationship.prototype.get = function(propertyName) {
      var ref;
      return (ref = this._relInstance) != null ? ref.get(propertyName) : void 0;
    };

    HasOneRelationship.prototype._get = function(propertyName) {
      var ref;
      return (ref = this._relInstance) != null ? ref._get(propertyName) : void 0;
    };

    HasOneRelationship.prototype.set = function(propertyName, value) {
      var ref;
      return (ref = this._relInstance) != null ? ref.set(propertyName, value) : void 0;
    };

    HasOneRelationship.prototype.field = function(propertyName) {
      var ref;
      return (ref = this._relInstance) != null ? ref.field(propertyName) : void 0;
    };

    HasOneRelationship.prototype["delete"] = function() {
      var ref;
      return (ref = this._relInstance) != null ? ref["delete"]() : void 0;
    };

    HasOneRelationship.prototype.tableName = function() {
      var ref;
      return (ref = this._relInstance) != null ? ref.tableName() : void 0;
    };

    HasOneRelationship.prototype.saneId = function() {
      return this._relInstance.saneId();
    };

    HasOneRelationship.prototype.equals = function(instance) {
      return this._relInstance.equals(instance);
    };

    HasOneRelationship.prototype.isA = function(modelName) {
      return this._relInstance.isA(modelName);
    };

    HasOneRelationship.prototype.isNull = function() {
      return !this._relInstance;
    };

    HasOneRelationship.prototype["with"] = function() {
      var ref;
      return (ref = this._relInstance)["with"].apply(ref, arguments);
    };

    HasOneRelationship.prototype.retrieve = function() {
      var ref;
      return (ref = this._relInstance).retrieve.apply(ref, arguments);
    };

    function HasOneRelationship(_instance, _args, _relName) {
      var model, updateRelInstance;
      this._instance = _instance;
      this._args = _args;
      this._relName = _relName;
      if (!this._args.relKey) {
        throw new Error('no relKey');
      }
      model = (function(_this) {
        return function() {
          var name;
          if (typeof _this._args.model === 'function') {
            name = _this._args.model(_this._instance);
            if (name) {
              return _this._instance.model.manager.getModel(name);
            }
          } else {
            return _this._args.model;
          }
        };
      })(this);
      updateRelInstance = (function(_this) {
        return function() {
          var fn, i, id, j, len, len1, method, ref, ref1;
          if (_this._relInstance) {
            if (_this._relInstance.instanceMethods) {
              ref = _this._relInstance.instanceMethods;
              for (i = 0, len = ref.length; i < len; i++) {
                method = ref[i];
                delete _this[method];
              }
            }
          }
          id = _this._instance.get(_this._args.relKey);
          if (id) {
            _this._relInstance = model().withId(id);
            _this.model = model();
            _this.modelName = _this.model.name;
            _this.record = _this._relInstance.record;
            if (_this._relInstance.instanceMethods) {
              ref1 = _this._relInstance.instanceMethods;
              fn = function(method) {
                return _this[method] = function() {
                  return _this._relInstance[method].apply(_this._relInstance, arguments);
                };
              };
              for (j = 0, len1 = ref1.length; j < len1; j++) {
                method = ref1[j];
                fn(method);
              }
            }
          } else {
            _this._relInstance = null;
            _this.model = _this.record = null;
          }
          return _this._fireMutation('changed');
        };
      })(this);
      updateRelInstance();
      this.observeObject(this._instance.field(this._args.relKey), updateRelInstance);
      this.onDestruct = function() {
        return this._instance.field(this._args.relKey).stopObserving(updateRelInstance);
      };
    }

    return HasOneRelationship;

  })(Relationship);
});

//# sourceMappingURL=HasOneRelationship.js.map
