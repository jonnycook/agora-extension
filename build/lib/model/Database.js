// Generated by CoffeeScript 1.7.1
define(['./Event', './Table'], function(Event, Table) {
  var Database;
  return Database = (function() {
    function Database() {
      this.tables = {};
      this.localToGlobalMapping = {};
      this.globalToLocalMapping = {};
      this.events = {
        onBeforeExecuteChanges: new Event,
        onAfterExecuteChanges: new Event
      };
    }

    Database.prototype.addTable = function() {
      var table;
      if (typeof arguments[0] === 'string') {
        return this.addTable(new Table(arguments[0], arguments[1]));
      } else {
        table = arguments[0];
        table.db = this;
        return this.tables[table.name] = table;
      }
    };

    Database.prototype.table = function(name) {
      var table;
      table = this.tables[name];
      if (!table) {
        throw new Error("table `" + name + "` not found");
      }
      return table;
    };

    Database.prototype.addMapping = function(mapping) {
      var globalId, localId, map, table, _base, _base1, _results;
      _results = [];
      for (table in mapping) {
        map = mapping[table];
        if ((_base = this.localToGlobalMapping)[table] == null) {
          _base[table] = {};
        }
        if ((_base1 = this.globalToLocalMapping)[table] == null) {
          _base1[table] = {};
        }
        _results.push((function() {
          var _results1;
          _results1 = [];
          for (localId in map) {
            globalId = map[localId];
            this.localToGlobalMapping[table][localId] = globalId;
            _results1.push(this.globalToLocalMapping[table][globalId] = localId);
          }
          return _results1;
        }).call(this));
      }
      return _results;
    };

    Database.prototype.executeChanges = function(allChanges, source) {
      var changes, name;
      this.events.onBeforeExecuteChanges.fire();
      for (name in allChanges) {
        changes = allChanges[name];
        this.table(name).executeChanges(changes, source);
      }
      return this.events.onAfterExecuteChanges.fire();
    };

    Database.prototype.clear = function() {
      var name, table, _ref, _results;
      this.localToGlobalMapping = {};
      this.globalToLocalMapping = {};
      _ref = this.tables;
      _results = [];
      for (name in _ref) {
        table = _ref[name];
        _results.push(table.clear());
      }
      return _results;
    };

    Database.prototype.data = function() {
      var name, records, table, tables, _ref;
      tables = {};
      _ref = this.tables;
      for (name in _ref) {
        table = _ref[name];
        records = {};
        table.records.each(function(record) {
          return records[record.get('id')] = record._values;
        });
        tables[name] = records;
      }
      return tables;
    };

    Database.prototype.setData = function(data) {
      var id, maxId, name, record, table;
      for (name in data) {
        table = data[name];
        maxId = 0;
        for (id in table) {
          record = table[id];
          id = parseInt(id);
          if (id > maxId) {
            maxId = id;
          }
        }
        this.tables[name].rid = maxId + 1;
      }
      return this.executeChanges(data);
    };

    return Database;

  })();
});

//# sourceMappingURL=Database.map
