// Generated by CoffeeScript 1.7.1
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['./ObservableArray', './ObservableObject', './Record', 'underscore', 'util'], function(ObservableArray, ObservableObject, Record, _, util) {
  var Table;
  return Table = (function() {
    function Table(name, args) {
      var contents, field, fieldName, r, record, referent, rel, rels, type, value, _base, _base1, _base2, _base3, _base4, _base5, _base6, _i, _j, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
      this.name = name;
      if (args) {
        this.schema = args.schema, contents = args.contents;
      }
      this.records = new ObservableArray;
      this.records.name = "Table::" + this.name;
      if (contents) {
        for (_i = 0, _len = contents.length; _i < _len; _i++) {
          record = contents[_i];
          this.addRecord(record);
        }
      }
      this.mappings = {};
      this.rid = 1;
      this._recordsByRid = {};
      if (this.schema == null) {
        this.schema = {};
      }
      if ((_base = this.schema).fields == null) {
        _base.fields = [];
      }
      if ((_base1 = this.schema).types == null) {
        _base1.types = {};
      }
      if ((_base2 = this.schema).defaultValues == null) {
        _base2.defaultValues = {};
      }
      this.records.observe((function(_this) {
        return function(mutation) {
          if (mutation.type === 'deletion') {
            return delete _this._recordsByRid[mutation.value.get('id')];
          }
        };
      })(this));
      if (args != null ? args.graph : void 0) {
        this.onGraph = true;
        this.graphRoot = args.graph.root;
        this.graphRels = rels = [];
        _ref = args.graph;
        for (name in _ref) {
          rel = _ref[name];
          if (!_.isArray(rel)) {
            rel = [rel];
          }
          for (_j = 0, _len1 = rel.length; _j < _len1; _j++) {
            r = rel[_j];
            if (r.table) {
              rels.push({
                table: r.table,
                owns: r.owns,
                owner: r.owner,
                field: name,
                filter: r.filter
              });
            } else if (r.field) {
              rels.push({
                foreignKey: true,
                field: r.field,
                table: name,
                owns: r.owns,
                owner: r.owner,
                filter: r.filter
              });
            }
          }
        }
      } else {
        this.onGraph = args != null ? args.onGraph : void 0;
      }
      this.canBeExternal = (_ref1 = args != null ? (_ref2 = args.graph) != null ? _ref2.canBeExternal : void 0 : void 0) != null ? _ref1 : true;
      if (this.schema) {
        if ((_base3 = this.schema).fields == null) {
          _base3.fields = [];
        }
        if (this.schema.referents) {
          _ref3 = this.schema.referents;
          for (field in _ref3) {
            referent = _ref3[field];
            if (!((_ref4 = this.schema) != null ? (_ref5 = _ref4.types) != null ? _ref5[field] : void 0 : void 0)) {
              if ((_base4 = this.schema).types == null) {
                _base4.types = {};
              }
              this.schema.types[field] = 'id';
            }
          }
        }
        if (this.schema.autoIncrement) {
          if ((_base5 = this.schema).types == null) {
            _base5.types = {};
          }
          this.schema.types[this.schema.autoIncrement] = 'int';
        }
        if (this.schema.defaultValues) {
          _ref6 = this.schema.defaultValues;
          for (fieldName in _ref6) {
            value = _ref6[fieldName];
            if (__indexOf.call(this.schema.fields, fieldName) < 0) {
              this.schema.fields.push(fieldName);
            }
            if (!this.schema.types || !(fieldName in this.schema.types)) {
              if ((_base6 = this.schema).types == null) {
                _base6.types = {};
              }
              this.schema.types[fieldName] = (function() {
                if (_.isBoolean(value)) {
                  return 'bool';
                } else if (_.isString(value)) {
                  return 'string';
                } else if (_.isNumber(value)) {
                  if (value % 1 === 0) {
                    return 'int';
                  } else {
                    return 'float';
                  }
                } else {
                  throw new Error("invalid default value");
                }
              })();
            }
          }
        }
        if (this.schema.types) {
          _ref7 = this.schema.types;
          for (fieldName in _ref7) {
            type = _ref7[fieldName];
            if (__indexOf.call(this.schema.fields, fieldName) < 0) {
              this.schema.fields.push(fieldName);
            }
            switch (type) {
              case 'object':
                this.mappings[fieldName] = function(value) {
                  if (_.isString(value)) {
                    return JSON.parse(value);
                  } else {
                    return value;
                  }
                };
                break;
              case 'datetime':
                this.mappings[fieldName] = function(value) {
                  if (_.isString(value)) {
                    return Date.parse(value);
                  } else {
                    return value;
                  }
                };
                break;
              case 'bool':
                this.mappings[fieldName] = function(value) {
                  if (_.isBoolean(value)) {
                    return value;
                  } else if (_.isString(value)) {
                    if (value === 'true') {
                      return true;
                    } else if (value === 'false') {
                      return false;
                    } else {
                      return !!parseInt(value);
                    }
                  } else if (_.isNumber) {
                    return !!value;
                  }
                };
                break;
              case 'int':
                this.mappings[fieldName] = function(value) {
                  if (_.isString(value)) {
                    value = value.replace(/,/g, '');
                  }
                  return parseInt(value);
                };
                break;
              case 'float':
                this.mappings[fieldName] = function(value) {
                  return parseFloat(value);
                };
                break;
              case 'id':
                this.mappings[fieldName] = function(value) {
                  if (typeof value === 'string' && value[0] === 'G') {
                    return value;
                  } else {
                    return parseInt(value);
                  }
                };
            }
          }
        }
      }
    }

    Table.prototype.clear = function() {
      this["delete"](function() {
        return 1;
      });
      return this._recordsByRid = {};
    };

    Table.prototype.executeChanges = function(changes, source) {
      var key, record, recordChanges, referentTable, rid, value, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _results;
      _results = [];
      for (rid in changes) {
        recordChanges = changes[rid];
        rid = (_ref = (_ref1 = this.db.globalToLocalMapping) != null ? (_ref2 = _ref1[this.name]) != null ? _ref2[rid] : void 0 : void 0) != null ? _ref : rid;
        if (recordChanges === 'deleted') {
          _results.push(this.records.deleteIf(function(record) {
            return record.id == rid;
          }));
        } else {
          for (key in recordChanges) {
            value = recordChanges[key];
            if (referentTable = (_ref3 = this.schema) != null ? (_ref4 = _ref3.referents) != null ? _ref4[key] : void 0 : void 0) {
              if (_.isFunction(referentTable)) {
                referentTable = referentTable(recordChanges);
              }
              recordChanges[key] = (_ref5 = (_ref6 = this.db.globalToLocalMapping[referentTable]) != null ? _ref6[value] : void 0) != null ? _ref5 : value;
            }
          }
          record = this._recordsByRid[rid];
          if (record) {
            _results.push((function() {
              var _results1;
              _results1 = [];
              for (key in recordChanges) {
                value = recordChanges[key];
                if (record.get(key) !== value) {
                  _results1.push(record.set(key, value));
                } else {
                  _results1.push(void 0);
                }
              }
              return _results1;
            })());
          } else {
            _results.push(this._addRecord(recordChanges, rid));
          }
        }
      }
      return _results;
    };

    Table.prototype.serialize = function() {
      var table;
      table = {
        rid: this.rid,
        records: {}
      };
      this.records.each(function(record) {
        return table.records[record.id] = record.serialize();
      });
      return table;
    };

    Table.prototype._nextAutoIncrement = function() {
      if (!this._autoIncrement) {
        return this._autoIncrement = 1;
      } else {
        return ++this._autoIncrement;
      }
    };

    Table.prototype._addRecord = function(data, rid) {
      var field, record, type, _i, _len, _ref, _ref1;
      if (this.schema) {
        if (this.schema.fields) {
          _ref = this.schema.fields;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            field = _ref[_i];
            if (!(field in data)) {
              data[field] = null;
            }
          }
        }
        if (this.schema.types) {
          _ref1 = this.schema.types;
          for (field in _ref1) {
            type = _ref1[field];
            if (!(field in data)) {
              data[field] = null;
            }
          }
        }
      }
      record = new Record(rid, data, this.mappings, this);
      this.records.push(record);
      this._recordsByRid[record.id] = record;
      return record;
    };

    Table.prototype.addRecord = function(data) {
      var field, fieldName, value, _i, _len, _ref, _ref1;
      if (this.schema) {
        if (this.schema.autoIncrement) {
          if (!data[this.schema.autoIncrement]) {
            data[this.schema.autoIncrement] = this._nextAutoIncrement();
          } else {
            data[this.schema.autoIncrement] = parseInt(data[this.schema.autoIncrement]);
            if (this._autoIncrement < data[this.schema.autoIncrement] || !this._autoIncrement) {
              this._autoIncrement = data[this.schema.autoIncrement];
            }
          }
        }
        if (this.schema.defaultValues) {
          _ref = this.schema.defaultValues;
          for (fieldName in _ref) {
            value = _ref[fieldName];
            if (!(fieldName in data)) {
              data[fieldName] = value;
            }
          }
        }
        if (this.schema.fields) {
          _ref1 = this.schema.fields;
          for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
            field = _ref1[_i];
            if (!(field in data)) {
              data[field] = null;
            }
          }
        }
      }
      return this._addRecord(data, this.rid++);
    };

    Table.prototype.insert = function(data) {
      return this.addRecord(data);
    };

    Table.prototype.select = function(query) {
      var results;
      results = [];
      this.records.each((function(_this) {
        return function(record) {
          if (query(record)) {
            return results.push(record);
          }
        };
      })(this));
      return results;
    };

    Table.prototype.selectFirst = function(query) {
      return util.find(this.records, query);
    };

    Table.prototype["delete"] = function(predicate) {
      return this.records.deleteIf(function(record) {
        return predicate(record);
      });
    };

    Table.prototype.observe = function(observer) {
      var observeField, observeRecord;
      observeField = function(record, field) {
        return record.field(field).observe(function(mutation) {
          return observer({
            type: 'update',
            record: record,
            field: field
          });
        });
      };
      observeRecord = (function(_this) {
        return function(record) {
          var field, _i, _len, _ref, _results;
          if (record.table.schema.fields) {
            _ref = record.table.schema.fields;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              field = _ref[_i];
              _results.push(observeField(record, field));
            }
            return _results;
          }
        };
      })(this);
      this.records.each(observeRecord);
      return this.records.observe(function(mutation) {
        if (mutation.type === 'insertion') {
          observer({
            type: 'insertion',
            record: mutation.value
          });
          return observeRecord(mutation.value);
        } else if (mutation.type === 'deletion') {
          return observer({
            type: 'deletion',
            record: mutation.value
          });
        }
      });
    };

    Table.prototype.byId = function(id) {
      return this._recordsByRid[id];
    };

    Table.prototype.byGlobalId = function(id) {
      var _ref, _ref1, _ref2;
      return this.byId((_ref = (_ref1 = this.db.globalToLocalMapping) != null ? (_ref2 = _ref1[this.name]) != null ? _ref2[id] : void 0 : void 0) != null ? _ref : id);
    };

    Table.prototype.bySaneId = function(id) {
      return this.byGlobalId("G" + id);
    };

    return Table;

  })();
});

//# sourceMappingURL=Table.map
