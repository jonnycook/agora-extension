// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'scraping/resourceScrapers/DeclarativeResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, DeclarativeResourceScraper, _) {
  var TheLimitedProductScraper;
  return TheLimitedProductScraper = (function(_super) {
    __extends(TheLimitedProductScraper, _super);

    function TheLimitedProductScraper() {
      return TheLimitedProductScraper.__super__.constructor.apply(this, arguments);
    }

    TheLimitedProductScraper.prototype.parseSid = function(sid) {
      var color, size, sku, _ref;
      _ref = sid.split('-'), sku = _ref[0], color = _ref[1], size = _ref[2];
      return {
        sku: sku,
        color: color,
        size: size
      };
    };

    TheLimitedProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          var _ref;
          return "http://www.thelimited.com/product/-/" + this.productSid.sku + ".html?dwvar_" + this.productSid.sku + "_colorCode=" + this.productSid.color + "&dwvar_" + this.productSid.sku + "_size=" + ((_ref = this.productSid.size) != null ? _ref : '');
        }
      }
    };

    TheLimitedProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'title')
      },
      price: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'price')
      },
      image: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          return this.value(this.resource.match("\\\"([^\\\"]*?/medium/\\d*_" + this.productSid.color + "_1\\.jpg)")[1]);
        })
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var color, colors, colorsMatch, data, images, imgs, more, obj, _i, _len;
          more = this.declarativeScraper('scraper', 'more');
          data = /app.ProductCache = new app\.ProductController\(([\S\s]*?)\);/.exec(this.resource)[1];
          colorsMatch = data.match(/\{"id" : "colorCode", "name" : "Color",([\S\s]*?)\{"id" : "size", "name" : "Size",/)[1];
          colors = this.matchAll(colorsMatch, /\{"val" :"([^"]*)"([\S\s]*?\]\s*\}\s*\})/);
          images = {};
          for (_i = 0, _len = colors.length; _i < _len; _i++) {
            color = colors[_i];
            imgs = [];
            data = color[2].match(/"images"\s*:\s*(\{[\S\s]*?\})\s*\}/)[1];
            obj = JSON.parse(data);
            images[color[1]] = {
              swatch: obj.swatch.url,
              swatch2: obj.swatch2.url,
              small: _.map(obj.small, function(i) {
                return i.url;
              }),
              medium: _.map(obj.medium, function(i) {
                return i.url;
              }),
              large: _.map(obj.large, function(i) {
                return i.url;
              }),
              xlarge: _.map(obj.xlarge, function(i) {
                return i.url;
              })
            };
          }
          more.images = images;
          return this.value(more);
        })
      }
    };

    return TheLimitedProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=TheLimitedProductScraper.map
