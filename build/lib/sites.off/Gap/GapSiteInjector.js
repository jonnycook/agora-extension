// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['SiteInjector', 'views/ShoppingBarView'],
    c: function() {
      var GapSiteInjector;
      return GapSiteInjector = (function(_super) {
        __extends(GapSiteInjector, _super);

        function GapSiteInjector() {
          return GapSiteInjector.__super__.constructor.apply(this, arguments);
        }

        GapSiteInjector.prototype.siteName = 'Gap';

        GapSiteInjector.prototype.run = function() {
          return this.initPage((function(_this) {
            return function() {
              var currentSid, initProducts;
              _this.shoppingBarView = new ShoppingBarView(_this.contentScript);
              _this.shoppingBarView.el.appendTo(document.body);
              _this.shoppingBarView.represent();
              window.initProducts = initProducts = function() {
                var a, href, img, matches, _i, _len, _ref, _results;
                _ref = $('a img');
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  img = _ref[_i];
                  a = $(img).parents('a');
                  href = a.prop('href');
                  if (a.attr('href')[0] !== '#' && /^http:\/\/www.gap.com\/browse\/product\.do/.exec(href)) {
                    matches = /pid=(\d+)/.exec(href);
                    if (matches) {
                      _results.push(_this.initProductEl(img, {
                        productSid: matches[1]
                      }));
                    } else {
                      _results.push(void 0);
                    }
                  } else {
                    _results.push(void 0);
                  }
                }
                return _results;
              };
              $(initProducts);
              $(window).load(initProducts);
              setInterval(initProducts, 2000);
              if (/^http:\/\/www.gap.com\/browse\/product\.do/.exec(document.location.href)) {
                currentSid = function() {
                  return /pid=(\d+)/.exec(document.location.href)[1];
                };
                $('body').delegate('#dragLayer', 'mouseover', function() {
                  var down, event;
                  $('#dragLayer').unbind('.agora');
                  down = false;
                  event = null;
                  return $('#dragLayer').bind('mousedown.agora', function(e) {
                    down = true;
                    $('html').disableSelection();
                    e.preventDefault();
                    event = e;
                    return true;
                  }).bind('mouseup.agora', function() {
                    down = false;
                    return true;
                  }).bind('mousemove.agora', function(e) {
                    var selector;
                    if (down) {
                      down = false;
                      selector = '#product_image';
                      return setTimeout((function() {
                        $('#dragLayer').hide();
                        $(selector).trigger(event);
                        return $('html').one('mouseup', function() {
                          $('html').enableSelection();
                          return $('#dragLayer').show();
                        });
                      }), 100);
                    }
                  });
                });
                return _this.waitFor('#product_image', function(el) {
                  return _this.initProductEl(el, {
                    productSid: currentSid()
                  }, {
                    extraOverlayElements: $('#dragLayer'),
                    initOverlay: function(overlay) {
                      return overlay.el.css('z-index', 10000);
                    }
                  });
                });
              }
            };
          })(this));
        };

        return GapSiteInjector;

      })(SiteInjector);
    }
  };
});

//# sourceMappingURL=GapSiteInjector.map
