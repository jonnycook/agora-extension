// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['SiteInjector', 'views/ShoppingBarView'],
    c: function() {
      var BestBuySiteInjector;
      return BestBuySiteInjector = (function(_super) {
        __extends(BestBuySiteInjector, _super);

        function BestBuySiteInjector() {
          return BestBuySiteInjector.__super__.constructor.apply(this, arguments);
        }

        BestBuySiteInjector.prototype.siteName = 'BestBuy';


        /*initProduct: ->
        			sku = $('#sku').html().match('^SKU (\\d+)')[1]
        			colorId = $('#color').val()
        			
        			productSid = "#{sku}-#{colorId}"
        			
        			@buttonView.represent siteName:@siteName, productSid:productSid
        			
        			@products '#detailImage img', siteName:@siteName, productSid:productSid
        			@products '#detailImage2 img', siteName:@siteName, productSid:productSid
        			@bottomBarView.activeProduct = siteName:@siteName, productSid:productSid
         */

        BestBuySiteInjector.prototype.run = function() {
          return this.initPage((function(_this) {
            return function() {
              var initProduct, initProducts, selector;
              _this.bottomBarView = new ShoppingBarView(_this.contentScript);
              _this.bottomBarView.el.appendTo(document.body);
              _this.bottomBarView.represent();
              initProduct = function(el, url, mousedover) {
                var combined, matches;
                matches = url.match("id=([\\d\\w]+)&skuId=(\\d+)");
                combined = matches[1] + "-" + matches[2];
                return _this.products(el, {
                  siteName: _this.siteName,
                  productSid: combined
                }, mousedover);
              };
              selector = 'a[href*="skuId"] img';
              initProducts = function() {
                return $(selector).each(function() {
                  if (!($(this).data('agora') || $(this).parents('.-agora').length)) {
                    return initProduct(this, $(this).parents('a').attr('href'), false);
                  }
                });
              };
              $(initProducts);
              $(window).load(function() {
                return setTimeout(initProducts, 500);
              });
              $(function() {
                var asdf;
                asdf = function(el) {
                  var checkProducts, checkProductsTimerId, left, right;
                  left = el.offset().left;
                  right = left + el.width();
                  checkProducts = function() {
                    var count, total;
                    count = 0;
                    total = 0;
                    el.find('li').each(function() {
                      if ($(this).offset().left > left && $(this).offset().left < right) {
                        ++total;
                        if ($(this).find('.loader-large').css('display') === 'none') {
                          return count++;
                        }
                      }
                    });
                    if (count === total) {
                      initProducts();
                      return clearInterval(checkProductsTimerId);
                    }
                  };
                  checkProductsTimerId = setInterval(checkProducts, 500);
                  return el.find('.scroller-right-wrap, .scroller-left-wrap').mouseup(function() {
                    return checkProductsTimerId = setInterval(checkProducts, 500);
                  });
                };
                return $('.carousel-wrapper').each(function() {
                  return asdf($(this));
                });
              });
              return true;
            };
          })(this));
        };

        return BestBuySiteInjector;

      })(SiteInjector);
    }
  };
});

//# sourceMappingURL=BestBuySiteInjector.map
