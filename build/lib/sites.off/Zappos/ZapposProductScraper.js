// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, _) {
  var ZapposProductScraper, matchAll;
  matchAll = function(string, pattern) {
    var match, matches, _i, _len, _results;
    matches = string.match(new RegExp((_.isString(pattern) ? pattern : pattern.source), 'g'));
    if (matches) {
      _results = [];
      for (_i = 0, _len = matches.length; _i < _len; _i++) {
        match = matches[_i];
        _results.push(match.match(pattern));
      }
      return _results;
    } else {
      return [];
    }
  };
  return ZapposProductScraper = (function(_super) {
    __extends(ZapposProductScraper, _super);

    function ZapposProductScraper() {
      return ZapposProductScraper.__super__.constructor.apply(this, arguments);
    }

    ZapposProductScraper.productSid = function(background, url, cb) {
      return background.httpRequest(url, {
        cb: function(response) {
          var colorId, matches, sku;
          matches = /<span id="sku" itemprop="sku">SKU (\d+)<\/span>/.exec(response);
          if (matches) {
            sku = matches[1];
            matches = /<input type="hidden" id="color" value="(\d+)" name="colorId" \/>/.exec(response);
            if (matches) {
              colorId = matches[1];
            } else {
              matches = /<select id="color" name="colorId" class="btn secondary">([\S\s]+)<\/select>/.exec(response);
              matches = /<option value="(\d+)" selected="selected">[^<]+<\/option>/.exec(matches[1]);
              colorId = matches[1];
            }
            return cb("" + sku + "-" + colorId);
          } else {
            return cb();
          }
        }
      });
    };

    ZapposProductScraper.testProducts = ['8242362', '8284939'];

    ZapposProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return this.site.productUrl(this.productSid);
        }
      }
    };

    ZapposProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp('<meta property="og:title" content="(.+?)"\/>'), 1)
      },
      price: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp('<span class="price (?:nowPrice|salePrice)" itemprop="price">\\$([^<]+)<\/span>'), 1)
      },
      image: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp('<img src="([^"]*)" itemprop="image" />'), 1)
      },
      reviews: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var additionalReviews, authorMatch, id, match, matches, review, reviews, _i, _len, _ref, _ref1;
          additionalReviews = (_ref = (_ref1 = this.resource.match(/<a href="[^"]*" title="Go to Additional Customer Reviews" class="[^"]*">Read Additional (\d+) Customer Reviews<\/a>/)) != null ? _ref1[1] : void 0) != null ? _ref : 0;
          matches = this.resource.safeMatch(/<div id="productReviews">([\S\s]*?)<div id="brandLogo">/);
          matches = this.matchAll(matches[1], /<div class="review(?: first)?">([\S\s]*?)<\/ul>\s*<\/div>\s*<\/div>/);
          reviews = [];
          for (_i = 0, _len = matches.length; _i < _len; _i++) {
            match = matches[_i];
            id = match[1].match(/<div id="(review-\d*)"/)[1];
            authorMatch = match[1].match(/<li class="reviewAuthor" itemprop="author">([\S\s]*?)<span id="reviewRole" class="title"> - ([\S\s]*?)<\/span>/);
            review = {
              review: match[1].match(/<p class="reviewContent" itemprop="description">([\S\s]*?)<\/p>/)[1],
              url: "" + this.resource.url + "#" + id,
              rating: match[1].match(/<em>Overall:<\/em>\s*<span class="stars rating(\d)">/)[1],
              title: "" + authorMatch[1] + " - " + authorMatch[2]
            };
            reviews.push(review);
          }
          return this.value({
            reviews: reviews,
            url: "" + this.resource.url + "#productReviews",
            count: reviews.length + parseInt(additionalReviews)
          });
        })
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var colorId, colorName, colorToStyle, currentColorId, description, descriptionItems, dimensions, highest, highestIndex, i, id, item, label, logoUrl, m, match, matches, materialSample, measurementMatches, measurements, name, optionMatches, pageUrl, pattern, style, styleId, styles, switches, type, url, value, valueId, valueLabel, values, __, _base, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _len6, _len7, _m, _n, _o, _p, _ref, _ref1, _ref2;
          switches = {
            name: false,
            styles: true,
            dimensions: false,
            brand: false,
            description: false,
            videoDescription: false,
            type: false,
            gender: false,
            category: false,
            subCategory: false,
            rating: false,
            materials: false
          };
          value = {};
          if (switches.name) {
            matches = this.resource.match(/<a href="[^"]*" class="link fn">([^<]*)/);
            value.name = matches[1];
          }
          if (switches.styles) {
            styles = {};
            colorToStyle = {};
            currentColorId = this.resource.match(/<option value="(\d*)" selected="selected">/)[1];
            matches = this.resource.match(/var styleIds = \{([^}]*)/);
            matches = matches[1].match(/'([^']*)':\s*(\d*)/g);
            for (_i = 0, _len = matches.length; _i < _len; _i++) {
              match = matches[_i];
              m = match.match(/'([^']*)':\s*(\d*)/);
              colorId = m[1];
              styleId = m[2];
              styles[styleId] = {
                id: styleId,
                color: {
                  id: colorId
                },
                images: {}
              };
              colorToStyle[colorId] = styleId;
            }
            value.currentStyle = colorToStyle[currentColorId];
            matches = this.matchAll(this.resource, /<img src="([^"]*)" class="gae-click\*Product-Page\*PrImage\*Swatch" \/>/);
            for (_j = 0, _len1 = matches.length; _j < _len1; _j++) {
              match = matches[_j];
              url = match[1];
              styleId = /http:\/\/[^.]*.zassets.com\/images\/[a-z]*\/\d\/.*?\/(\d*)-[a-z]-\w*\.jpg/.exec(url)[1];
              styles[styleId].thumbUrl = url;
            }
            matches = this.resource.match(/var colorNames = \{([^}]*)/);
            matches = matches[1].match(/'([^']*)':"([^"]*)"/g);
            for (_k = 0, _len2 = matches.length; _k < _len2; _k++) {
              match = matches[_k];
              m = match.match(/'([^']*)':"([^"]*)"/);
              colorId = m[1];
              colorName = m[2];
              styleId = colorToStyle[colorId];
              styles[styleId].color.name = colorName;
            }
            matches = this.resource.match(/pImgs\[(\d+)\]\['([^']*)'\]\['([^']*)'\] = (?:'([^']*)'|\{ filename: '([^']*)', width: '\d*', height: '\d*' \};)/g);
            for (_l = 0, _len3 = matches.length; _l < _len3; _l++) {
              match = matches[_l];
              m = match.match(/pImgs\[(\d+)\]\['([^']*)'\]\['([^']*)'\] = (?:'([^']*)'|\{ filename: '([^']*)', width: '\d*', height: '\d*' \};)/);
              style = m[1];
              type = m[2];
              id = m[3];
              url = (_ref = m[4]) != null ? _ref : m[5];
              if ((_base = styles[style].images)[id] == null) {
                _base[id] = {};
              }
              styles[style].images[id][type] = url;
            }
            value.styles = styles;
          }
          if (switches.dimensions) {
            dimensions = {};
            pattern = /<div id="dimension-([^"]*)" class="dimension">\s*<label class="([^"]*)">\s*([^:]*):/;
            matches = this.resource.match(new RegExp(pattern.source, 'g'));
            for (_m = 0, _len4 = matches.length; _m < _len4; _m++) {
              match = matches[_m];
              _ref1 = match.match(pattern), __ = _ref1[0], name = _ref1[1], id = _ref1[2], label = _ref1[3];
              dimensions[name] = {
                name: name,
                label: label
              };
              m = this.resource.match(new RegExp("<input type=\"hidden\" id=\"" + id + "\" value=\"(\\d+)\" name=\"dimensionValues\" />\\s*<p class=\"note\">([^<]*)<\\/p>"));
              if (m) {
                __ = m[0], valueId = m[1], valueLabel = m[2];
                dimensions[name].value = {
                  id: valueId,
                  label: valueLabel
                };
              }
              values = [];
              m = this.resource.match(new RegExp("<select id=\"" + id + "\" class=\"btn secondary\" name=\"dimensionValues\">([\\S\\s]*?)</select>"));
              if (m) {
                optionMatches = matchAll(m[1], /<option value="(\d*)">([^<]*)/);
                dimensions[name].values = _.map(optionMatches, function(i) {
                  return {
                    id: i[1],
                    label: i[2]
                  };
                });
              }
            }
            value.dimensions = dimensions;
          }
          if (switches.brand) {
            _ref2 = this.resource.match(/<h2 id="bLogo" class="brand">\s*<a href="([^"]*)" class="to-brand">\s*<img src="([^"]*)" alt="([^"]*)/), __ = _ref2[0], pageUrl = _ref2[1], logoUrl = _ref2[2], name = _ref2[3];
            value.brand = {
              pageUrl: "http://www.zappos.com" + pageUrl,
              logoUrl: logoUrl,
              name: name
            };
          }
          if (switches.description) {
            matches = this.resource.match(/<span class="description"><ul(?: class="product-description")?>([\S\s]*?)<\/ul><\/span>/);
            description = matches[1];
            matches = description.match(/<li class="video">(.*?)<\/li>/);
            if (matches) {
              description = description.replace(matches[0], '');
            }
            matches = description.match(/<li class="measurements">([\S\s]*?)\s*<\/ul>\s*<\/li>/);
            if (matches) {
              description = description.replace(matches[0], '');
              measurementMatches = matchAll(matches[1], /<li>([^:]*): ([^<]*)<\/li>/);
              measurements = {};
              for (_n = 0, _len5 = measurementMatches.length; _n < _len5; _n++) {
                match = measurementMatches[_n];
                measurements[match[1]] = match[2];
              }
              value.measurements = measurements;
              matches = description.match(/<li>Product measurements were taken using size ([^.]*)\. Please note that measurements may vary by size\.<\/li>/);
              if (matches) {
                description = description.replace(matches[0], '');
                value.measurementsSample = matches[1].split(', ');
              }
            }
            matches = matchAll(description, /<li>(.*?)<\/li>/m);
            descriptionItems = [];
            for (_o = 0, _len6 = matches.length; _o < _len6; _o++) {
              match = matches[_o];
              if (match[1] !== '<a href="/c/measurements" target="_blank">View This Model\'s Measurements</a>') {
                descriptionItems.push(match[1]);
              }
            }
            value.description = descriptionItems;
            if (switches.materials) {
              materialSample = 'polyester|cotton|polyamide|elastane|nylon|spandex|rayon|Lycra&reg;|spandex|viscose|recycled|polyester|linen|Tactel&reg;|nylon|acrylic|down|feather|polyurethane|cashmere|corduroy|denim|angora|wool|satin|taffeta|leather|twill|acetate|lycra|lyocell|tweed|canvas|ripstop|sheepskin|silk|velvet|chiffon|jersey|suede|velour|vinyl|tricot|fleece|modal|microfiber|mesh';
              highest = 0;
              highestIndex = -1;
              for (i = _p = 0, _len7 = descriptionItems.length; _p < _len7; i = ++_p) {
                item = descriptionItems[i];
                if (item.indexOf('%') !== -1) {
                  matches = item.match(materialSample, 'g');
                  if (matches) {
                    if (matches.length > highest) {
                      highestIndex = i;
                      highest = matches.index;
                    }
                  }
                }
              }
              if (highestIndex !== -1) {
                value.materials = descriptionItems[highestIndex];
              }
            }
          }
          if (switches.videoDescription) {
            matches = this.resource.match(/<source src="([^"]*)">/);
            if (matches) {
              value.videoDescription = matches[1];
            }
          }
          if (switches.type) {
            matches = this.resource.match(/var productTypeValue = '([^']*)';/);
            if (matches) {
              value.type = matches[1];
            }
          }
          if (switches.gender) {
            matches = this.resource.match(/var productGender = "([^"]*)";/);
            if (matches) {
              value.gender = matches[1];
            }
          }
          if (switches.category) {
            matches = this.resource.match(/category = "([^"]*)";/);
            if (matches) {
              value.category = matches[1];
            }
          }
          if (switches.subCategory) {
            matches = this.resource.match(/subCategory = "([^"]*)";/);
            if (matches) {
              value.subCategory = matches[1];
            }
          }
          if (switches.rating) {
            matches = this.resource.match(/<span class="stars stars\d gae-click\*Product-Page\*PrForm\*Customer-Reviews-Jump">(\d)<\/span>/);
            if (matches) {
              value.rating = matches[1];
            }
          }
          return this.value(value);
        })
      }
    };

    return ZapposProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=ZapposProductScraper.map
