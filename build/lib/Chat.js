// Generated by CoffeeScript 1.7.1
define(['model/ObservableArray', 'model/ObservableValue'], function(ObservableArray, ObservableValue) {
  var Chat;
  return Chat = (function() {
    function Chat(agora) {
      this.background = agora.background;
      this.messageQueue = [];
      this.messages = new ObservableArray;
      this.updateInterval = 10000;
      this.online = new ObservableValue;
      this.writingReply = new ObservableValue;
      this.writingReply._type = 'object';
    }

    Chat.prototype.readMessages = function() {
      if (this.lastRead !== this.last) {
        this.lastRead = this.last;
        return this.lastReadChanged = true;
      }
    };

    Chat.prototype.sendMessage = function(message) {
      this.messageQueue.push(message);
      return this.update();
    };

    Chat.prototype.setPendingMessage = function(pendingMessage) {
      this.pendingMessage = pendingMessage;
    };

    Chat.prototype.update = function() {
      var args;
      args = {
        last: this.last,
        messages: this.messageQueue,
        pendingMessage: this.pendingMessage
      };
      if (this.lastReadChanged) {
        args.lastRead = this.lastRead;
        this.lastReadChanged = false;
      }
      this.background.clearTimeout(this.updateTimerId);
      this.background.httpRequest("http://messages.agora.sh/updateChat.php", {
        method: 'post',
        dataType: 'json',
        data: args,
        cb: (function(_this) {
          return function(response) {
            _this.last = response.last !== null ? parseInt(response.last) : null;
            if ('lastRead' in response) {
              _this.lastRead = parseInt(response.lastRead);
              if (_this.lastRead !== _this.last) {
                _this.newMessages = true;
              }
            }
            if (response.messages) {
              _this.messages.append(response.messages);
            }
            _this.updateInterval = response.updateInterval;
            _this.updateTimerId = _this.background.setTimeout((function() {
              return _this.update();
            }), _this.updateInterval);
            _this.online.set(response.online);
            return _this.writingReply.set(response.writingReply);
          };
        })(this),
        error: (function(_this) {
          return function() {
            return _this.updateTimerId = _this.background.setTimeout((function() {
              return _this.update();
            }), _this.updateInterval);
          };
        })(this)
      });
      return this.messageQueue = [];
    };

    Chat.prototype.init = function() {
      return this.update();
    };

    return Chat;

  })();
});

//# sourceMappingURL=Chat.map
