// Generated by CoffeeScript 1.7.1
define(function() {
  var CommandExecuter;
  return CommandExecuter = (function() {
    function CommandExecuter(background) {
      this.background = background;
    }

    CommandExecuter.prototype.returnResult = function(command, result) {
      return this.background.httpRequest("" + this.background.apiRoot + "returnCommand.php", {
        method: 'post',
        data: {
          commandId: command.id,
          result: JSON.stringify(result)
        }
      });
    };

    CommandExecuter.prototype.executeCommand = function(command, sendResponse) {
      var comp, obj, path, _i, _len;
      if (command.command === 'scrapeProduct') {
        return agora.Site.site(command["arguments"][0]).productScraper(agora.background, command["arguments"][1], (function(_this) {
          return function(scraper) {
            var props;
            props = ['title', 'price', 'image', 'rating', 'ratingCount', 'more', 'reviews'];
            return scraper.scrape(props, function(properties) {
              return sendResponse(properties);
            });
          };
        })(this));
      } else if (command.command === 'getPage') {
        return this.background.httpRequest(command["arguments"][0], {
          cb: (function(_this) {
            return function(response) {
              return sendResponse(response);
            };
          })(this)
        });
      } else if (command.command === 'updateScrapers') {
        return agora.updateScrapers((function(_this) {
          return function(result) {
            return sendResponse(result);
          };
        })(this));
      } else if (command.command === 'getVersion') {
        return sendResponse(chrome.runtime.getManifest().version);
      } else if (command.command === 'reloadExtension') {
        sendResponse();
        return chrome.runtime.reload();
      } else if (command.command === 'getData') {
        return sendResponse(agora.db.data());
      } else if (command.command === 'getVariable') {
        path = command.path.split('.');
        obj = window;
        for (_i = 0, _len = path.length; _i < _len; _i++) {
          comp = path[_i];
          obj = obj[comp];
        }
        return sendResponse(JSON.decycle(obj));
      } else {
        return sendResponse('INVALID_COMMAND');
      }
    };

    return CommandExecuter;

  })();
});

//# sourceMappingURL=CommandExecuter.map
