// Generated by CoffeeScript 1.10.0
define(['underscore'], function(_) {
  var Debug;
  return Debug = (function() {
    function Debug() {}

    Debug.stackTrace = function() {
      var trace;
      trace = Error().stack;
      trace = trace.split('at ').slice(3);
      return _.map(trace, function(line) {
        var matches;
        matches = line.match(/(.*?) \(((?:[<>A-z0-9_\/.:\-])*):([^:]*):([^:]*)\)\s*/);
        if (matches) {
          return {
            "function": matches[1],
            file: matches[2],
            line: matches[3],
            col: matches[4],
            l: line
          };
        } else {
          matches = line.match(/((?:[<>A-z0-9_\/.:\-])*):([^:]*):([^:]*)/);
          if (matches) {
            return {
              "function": null,
              file: matches[1],
              line: matches[2],
              col: matches[3],
              l: line
            };
          }
        }
      });
    };

    Debug.log = function() {
      var args, caller, func, i, ignoreList, item, j, k, l, len, len1, len2, list, matched, pattern, ref, trace;
      ignoreList = [['ConnectView'], ['_callObservers'], ['triggerContentScriptEvent'], ['CreateView'], ['DeleteView'], [/^Deleting view/]];
      for (j = 0, len = ignoreList.length; j < len; j++) {
        list = ignoreList[j];
        matched = true;
        for (i = k = 0, len1 = list.length; k < len1; i = ++k) {
          item = list[i];
          if (typeof item === 'string') {
            if (arguments[i] !== item) {
              matched = false;
            }
          } else {
            if (!item.exec(arguments[i])) {
              matched = false;
            }
          }
          if (!matched) {
            break;
          }
        }
        if (matched) {
          return;
        }
      }
      trace = this.stackTrace();
      args = Array.prototype.slice.call(arguments, 0, arguments.length);
      caller = trace[1];
      func = caller["function"];
      if (func) {
        ref = ['^Update', '^Table'];
        for (l = 0, len2 = ref.length; l < len2; l++) {
          pattern = ref[l];
          if (func.match(pattern)) {
            return;
          }
        }
      }
      args.push(caller.file + ":" + caller.line + ":" + caller.col);
      if (func) {
        args.unshift("[" + func + "]");
      }
      return console.log.apply(console, args);
    };

    Debug.error = function() {
      var args, caller, func, i, ignoreList, item, j, k, len, len1, list, matched, trace;
      ignoreList = [['_callObservers'], ['update'], ['adding']];
      for (j = 0, len = ignoreList.length; j < len; j++) {
        list = ignoreList[j];
        matched = true;
        for (i = k = 0, len1 = list.length; k < len1; i = ++k) {
          item = list[i];
          if (typeof item === 'string') {
            if (arguments[i] !== item) {
              matched = false;
            }
          } else {
            if (!item.exec(arguments[i])) {
              matched = false;
            }
          }
          if (!matched) {
            break;
          }
        }
        if (matched) {
          return;
        }
      }
      trace = this.stackTrace();
      args = Array.prototype.slice.call(arguments, 0, arguments.length);
      caller = trace[1];
      func = caller["function"];
      args.push(caller.file + ":" + caller.line + ":" + caller.col);
      if (func) {
        args.unshift("[" + func + "]");
      }
      return console.error.apply(console, args);
    };

    return Debug;

  })();
});

//# sourceMappingURL=Debug.js.map
