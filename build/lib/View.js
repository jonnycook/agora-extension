// Generated by CoffeeScript 1.10.0
var slice = [].slice;

define(['underscore', 'clientInterface/ClientObject', 'clientInterface/ClientArray', 'clientInterface/ClientValue', 'util'], function(_, ClientObject, ClientArray, ClientValue, util) {
  var ClientView, Context, View;
  ClientView = (function() {
    function ClientView(agora1, id1) {
      var parent;
      this.agora = agora1;
      this.id = id1;
      parent = View.clientViews[this.id].parent;
      if (parent) {
        this.parent = View.clientViews[parent].view;
      }
    }

    ClientView.prototype.callMethod = function(name, args) {
      return this.agora.background.triggerContentScriptEvent("ViewMethod:" + this.id, {
        name: name,
        params: args
      });
    };

    return ClientView;

  })();
  Context = (function() {
    function Context(parent1) {
      this.parent = parent1;
      this.observerObjectPairs = [];
      this.contexts = [];
      this.clientObjects = [];
    }

    Context.prototype.addClientObject = function(clientObject) {
      this.clientObjects.push(clientObject);
      return clientObject;
    };

    Context.prototype.onContextDestruct = function(context) {
      var index;
      index = this.contexts.indexOf(context);
      if (index !== -1) {
        this.contexts.splice(index, 1);
        if (context.name) {
          return delete this.namedContexts[name];
        }
      }
    };

    Context.prototype.context = function(name) {
      var ctx;
      if (name == null) {
        name = null;
      }
      if (name) {
        if (this.namedContexts == null) {
          this.namedContexts = {};
        }
        if (!this.namedContexts[name]) {
          this.namedContexts[name] = this.context();
          this.namedContexts[name].name = name;
        }
        return this.namedContexts[name];
      } else {
        ctx = new Context(this);
        ctx.view = this.view;
        this.contexts.push(ctx);
        return ctx;
      }
    };

    Context.prototype.observe = function(object, observer) {
      object.observe(observer, this);
      return this.observerObjectPairs.push({
        object: object,
        observer: observer
      });
    };

    Context.prototype.observeObject = function(object, observer) {
      return this.observe(object, observer);
    };

    Context.prototype.stopObserving = function(object) {
      var i, k, ref, results1;
      results1 = [];
      for (i = k = ref = this.observerObjectPairs.length - 1; ref <= 0 ? k <= 0 : k >= 0; i = ref <= 0 ? ++k : --k) {
        if (this.observerObjectPairs[i].object === object) {
          this.observerObjectPairs[i].object.stopObserving(this.observerObjectPairs[i].observer);
          results1.push(this.observerObjectPairs.splice(i, 1));
        } else {
          results1.push(void 0);
        }
      }
      return results1;
    };

    Context.prototype.clear = function() {
      var clientObject, ctx, k, l, len, len1, len2, m, object, observer, ref, ref1, ref2, ref3;
      ref = this.contexts;
      for (k = 0, len = ref.length; k < len; k++) {
        ctx = ref[k];
        ctx.parent = null;
        ctx.destruct();
      }
      this.contexts = [];
      ref1 = this.clientObjects;
      for (l = 0, len1 = ref1.length; l < len1; l++) {
        clientObject = ref1[l];
        clientObject.destruct();
      }
      this.clientObjects = [];
      ref2 = this.observerObjectPairs;
      for (m = 0, len2 = ref2.length; m < len2; m++) {
        ref3 = ref2[m], object = ref3.object, observer = ref3.observer;
        object.stopObserving(observer);
      }
      return this.observerObjectPairs = [];
    };

    Context.prototype.destruct = function() {
      var ref;
      if ((ref = this.parent) != null) {
        if (typeof ref.onContextDestruct === "function") {
          ref.onContextDestruct(this);
        }
      }
      if (typeof this.onDestruct === "function") {
        this.onDestruct();
      }
      return this.clear();
    };

    Context.prototype.clientArray = function(array, func) {
      var ca;
      ca = new ClientArray(this.view.agora, this);
      this.addClientObject(ca);
      View.clientObjects[ca._id] = ca;
      if (arguments.length === 2) {
        util.syncArrays(this, array, ca, (function(_this) {
          return function(obj, onRemove) {
            var ctx, getCtx, otherOnRemove;
            ctx = null;
            getCtx = function() {
              return ctx != null ? ctx : ctx = _this.context();
            };
            otherOnRemove = null;
            onRemove(function() {
              return ctx != null ? ctx.destruct() : void 0;
            });
            return func(obj, (function(func) {
              return otherOnRemove = func;
            }), getCtx);
          };
        })(this));
      }
      return ca;
    };

    Context.prototype.clientValue = function() {
      var cv, map, obj, ref;
      cv = null;
      if (arguments.length >= 1) {
        if ((ref = arguments[0]) != null ? ref.observe : void 0) {
          obj = arguments[0];
          if (typeof arguments[1] === 'function') {
            map = arguments[1];
            cv = new ClientValue(this.view.agora, this, map(obj.get()));
            this.observe(obj, (function(_this) {
              return function() {
                return cv.set(map(obj.get()));
              };
            })(this));
          } else {
            cv = new ClientValue(this.view.agora, this, obj.get());
            this.observe(obj, (function(_this) {
              return function() {
                return cv.set(obj.get());
              };
            })(this));
          }
        } else {
          cv = new ClientValue(this.view.agora, this, arguments[0]);
        }
      } else {
        cv = new ClientValue(this.view.agora, this);
      }
      this.addClientObject(cv);
      View.clientObjects[cv._id] = cv;
      return cv;
    };

    Context.prototype.bind = function(cv, obj, map) {
      if (map == null) {
        map = null;
      }
      if (map) {
        cv.set(map(obj.get()));
        return this.observe(obj, (function(_this) {
          return function() {
            return cv.set(map(obj.get()));
          };
        })(this));
      } else {
        cv.set(obj.get());
        return this.observe(obj, (function(_this) {
          return function() {
            return cv.set(obj.get());
          };
        })(this));
      }
    };

    Context.prototype.clientValueNamed = function(name, value) {
      var clientValue;
      clientValue = this.clientValue.apply(this, Array.prototype.slice.call(arguments, 1));
      clientValue._name = name;
      return clientValue;
    };

    Context.prototype.clientArrayNamed = function(name) {
      var clientArray;
      clientArray = this.clientArray.apply(this, Array.prototype.slice.call(arguments, 1));
      clientArray._name = name;
      return clientArray;
    };

    return Context;

  })();
  return View = (function() {
    View.nextViewId = 1;

    View.views = {};

    View.clientViews = {};

    View.clientObjects = {};

    View.clientIdsByTab = {};

    View.ClientObject = ClientObject;

    View.clear = function() {
      this.nextViewId = 1;
      this.views = {};
      this.clientViews = {};
      return this.clientObjects = {};
    };

    View.createClientView = function(tabId, type) {
      var base, id;
      id = this.nextViewId++;
      this.clientViews[id] = {
        viewName: type
      };
      if ((base = this.clientIdsByTab)[tabId] == null) {
        base[tabId] = [];
      }
      this.clientIdsByTab[tabId].push(id);
      return id;
    };

    View.connect = function(agora, clientViewId, args, cb) {
      var viewName;
      viewName = this.clientViews[clientViewId].viewName;
      return this.get(agora, viewName, args, (function(_this) {
        return function(view) {
          if (_this.clientViews[clientViewId]) {
            _this.clientViews[clientViewId].id = view.id;
            _this.clientViews[clientViewId].view = view;
            console.log(view.id + " connected");
            view.addClientView(clientViewId);
            return view.getData(function(data) {
              return cb(true, _this.serializeObject(data));
            });
          } else {
            return cb(false);
          }
        };
      })(this));
    };

    View.deleteClientViewsInTab = function(tabId) {
      var clientId, clientViews, k, len;
      clientViews = this.clientIdsByTab[tabId];
      if (clientViews) {
        for (k = 0, len = clientViews.length; k < len; k++) {
          clientId = clientViews[k];
          this.remove(clientId);
        }
      }
      return delete this.clientIdsByTab[tabId];
    };

    View.remove = function(clientViewId) {
      var base;
      if (this.clientViews[clientViewId]) {
        console.log("Deleting view " + clientViewId + " " + this.clientViews[clientViewId].viewName);
        if (this.clientViews[clientViewId].view) {
          this.clientViews[clientViewId].view.removeClientView(clientViewId);
          if (typeof (base = this.clientViews[clientViewId].view).onClientDisconnect === "function") {
            base.onClientDisconnect(clientViewId);
          }
        }
        return delete this.clientViews[clientViewId];
      }
    };

    View.getViewClass = function(viewName, cb) {
      return this.agora.background.require(["views/" + viewName + "View"], function(viewClass) {
        viewClass.agora = this.agora;
        return cb(viewClass);
      });
    };

    View.get = function(agora, viewName, args, cb) {
      return this.getViewClass(viewName, (function(_this) {
        return function(viewClass) {
          var doGet, view;
          view = null;
          doGet = function(args) {
            var id, ref;
            if (viewClass.id) {
              id = viewClass.id(args);
            } else {
              id = null;
            }
            if (!(view = (ref = _this.views[viewName]) != null ? ref[id] : void 0)) {
              view = new viewClass(viewName, id, agora, args);
              if (_this.views[viewName]) {
                _this.views[viewName][id] = view;
              } else {
                _this.views[viewName] = {};
                _this.views[viewName][id] = view;
              }
            }
            return view.whenReady(function() {
              return cb(view);
            });
          };
          if (viewClass.filter) {
            return viewClass.filter(agora, args, doGet);
          } else {
            return doGet(args);
          }
        };
      })(this));
    };

    View.getWithClientId = function(clientViewId, cb) {
      var id, ref, view, viewName;
      ref = this.clientViews[clientViewId], id = ref.id, viewName = ref.viewName;
      view = this.views[viewName][id];
      return cb(view);
    };

    View.callMethod = function(clientViewId, methodName, args, timestamp) {
      var id, ref, view, viewName;
      ref = this.clientViews[clientViewId], id = ref.id, viewName = ref.viewName;
      Debug.log('callMethod', viewName, clientViewId, methodName, args);
      view = this.views[viewName][id];
      return view.callMethod(clientViewId, methodName, args, timestamp);
    };

    View.serializeObject = function(obj) {
      return ClientObject.serialize(obj);
    };

    View.getClientObjects = function(ids) {
      var clientObject, id, k, len, response;
      response = {};
      for (k = 0, len = ids.length; k < len; k++) {
        id = ids[k];
        clientObject = ClientObject._registry[id];
        if (clientObject === false) {
          console.log('%s has been deleted', id);
        } else {
          response[id] = clientObject.serialize();
        }
      }
      return response;
    };

    function View(name1, id1, agora1, args1) {
      this.name = name1;
      this.id = id1;
      this.agora = agora1;
      this.args = args1;
      this.background = this.agora.background;
      this.ctx = this.context();
      if (this.init) {
        this.init(this.args);
      } else if (this.initAsync) {
        this.waiting = true;
        this.initAsync(this.args, (function(_this) {
          return function() {
            var cb, k, len, ref, results1;
            _this.waiting = false;
            if (_this.readyCbs) {
              ref = _this.readyCbs;
              results1 = [];
              for (k = 0, len = ref.length; k < len; k++) {
                cb = ref[k];
                results1.push(cb());
              }
              return results1;
            }
          };
        })(this));
      }
    }

    View.prototype.destruct = function() {
      var ctx, k, len, ref;
      if (!this.destructed) {
        if (this.contexts) {
          ref = this.contexts;
          for (k = 0, len = ref.length; k < len; k++) {
            ctx = ref[k];
            ctx.destruct();
          }
        }
        delete View.views[this.name][this.id];
        if (_.isEmpty(View.views[this.name])) {
          delete View.views[this.name];
        }
        return this.destructed = true;
      }
    };

    View.prototype.context = function() {
      var context;
      if (this.contexts == null) {
        this.contexts = [];
      }
      context = new Context;
      context.view = this;
      this.contexts.push(context);
      return context;
    };

    View.prototype.clientArray = function(ctx, array, func) {
      return ctx.clientArray(array, func);
    };

    View.prototype.clientValue = function(value, func) {
      return this.ctx.clientValue(value, func);
    };

    View.prototype.clientValueNamed = function(name, value, func) {
      return this.ctx.clientValueNamed(name, value, func);
    };

    View.prototype.clientArrayNamed = function(name) {
      return this.ctx.clientArrayNamed.apply(this.ctx, arguments);
    };

    View.prototype.getData = function(cb) {
      return cb(this.data);
    };

    View.prototype.observeObject = function(observable, observer) {
      return this.ctx.observe(observable, observer);
    };

    View.prototype.stopObservingObject = function(observable) {
      return this.ctx.stopObserving(observable);
    };

    View.prototype.addClientView = function(id) {
      if (this.clientViews == null) {
        this.clientViews = [];
      }
      return this.clientViews.push(id);
    };

    View.prototype.removeClientView = function(id) {
      _.pull(this.clientViews, id);
      if (!this.clientViews.length) {
        return this.destruct();
      }
    };

    View.prototype.whenReady = function(cb) {
      if (this.waiting) {
        if (this.readyCbs == null) {
          this.readyCbs = [];
        }
        return this.readyCbs.push(cb);
      } else {
        return cb();
      }
    };

    View.prototype.hasMethod = function(name) {
      var ref;
      return (ref = this.methods) != null ? ref[name] : void 0;
    };

    View.prototype.method = function(name) {
      return this.methods[name];
    };

    View.prototype.callMethod = function(clientViewId, name, args, timestamp, cb) {
      var view;
      if (this.hasMethod(name)) {
        view = new ClientView(this.agora, clientViewId);
        view.methodTimestamp = timestamp;
        this.clientView = view;
        this.method(name).apply(this, [view].concat(args));
        return delete this.clientView;
      } else {
        console.debug("View '" + this.name + "' has no method '" + name + "'");
        throw new Error("View '" + this.name + "' has no method '" + name + "'");
      }
    };

    View.prototype.resolveObject = function(input, cb) {
      var element, obj;
      if (!input) {
        return cb();
      } else if (input.modelName && input.instanceId) {
        return cb(this.agora.modelManager.getInstance(input.modelName, input.instanceId));
      } else if (input.elementType && input.elementId) {
        element = this.agora.modelManager.getInstance(input.elementType, input.elementId);
        obj = element.get('element');
        return cb(obj, element);
      } else {
        return this.agora.product(input, cb);
      }
    };

    View.prototype.resolveElements = function() {
      var args, cb, count, datum, decision, elementData, elements, i, k, len, list, results;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      cb = elements = null;
      if (typeof args[args.length - 1] === 'function') {
        cb = args[args.length - 1];
        elements = args.slice(0, args.length - 1);
      } else {
        elements = args;
      }
      results = [];
      count = 0;
      for (i = k = 0, len = elements.length; k < len; i = ++k) {
        elementData = elements[i];
        if (typeof elementData === 'number') {
          results[i] = this.agora.modelManager.instance('Product', elementData);
        } else if (elementData.action === 'new') {
          switch (elementData.type) {
            case 'computer':
              results[i] = this.agora.modelManager.getModel('Composite').createWithType('computer');
              break;
            case 'decision':
              list = this.agora.modelManager.getModel('List').create();
              decision = this.agora.modelManager.getModel('Decision').create();
              decision.set('list_id', list.get('id'));
              results[i] = decision;
              break;
            case 'list':
              results[i] = this.agora.modelManager.getModel('List').create({
                collapsed: true
              });
              break;
            case 'bundle':
              results[i] = this.agora.modelManager.getModel('Bundle').create();
              break;
            case 'session':
              results[i] = this.agora.modelManager.getModel('Session').create();
              break;
            case 'descriptor':
              results[i] = this.agora.modelManager.getModel('Descriptor').create({
                descriptor: elementData.descriptor
              });
          }
        } else if (elementData.action === 'addData') {
          datum = this.agora.modelManager.getModel('Datum').create(elementData.data);
          results[i] = datum;
        } else if (((elementData.elementType === 'Product' && (elementData.elementId == null)) || (elementData.siteName && elementData.productSid)) && cb) {
          count++;
          (function(_this) {
            return (function(i) {
              return _this.agora.modelManager.getModel('Product').get(elementData, function(product) {
                var j, l, ref;
                if (elementData.variant) {
                  for (j = l = 0, ref = product.get('variants').length(); 0 <= ref ? l < ref : l > ref; j = 0 <= ref ? ++l : --l) {
                    if (_.isEqual(elementData.variant, product.get('variants').get(j).get('variant'))) {
                      results[i] = product.get('variants').get(j);
                      break;
                    }
                  }
                  if (!results[i]) {
                    results[i] = this.agora.modelManager.getModel('ProductVariant').create({
                      product_id: product.get('id'),
                      variant: elementData.variant
                    });
                  }
                } else {
                  results[i] = product;
                }
                if (!(--count || i < elements.length - 1)) {
                  cb.apply(window, results);
                  return cb = null;
                }
              });
            });
          })(this)(i);
        } else if (elementData.view) {
          results[i] = this.agora.View.clientViews[elementData.view].view;
        } else if (elementData.elementType && elementData.elementId) {
          results[i] = this.agora.modelManager.getInstance(elementData.elementType, elementData.elementId);
        }
      }
      if (cb) {
        if (!count) {
          cb.apply(window, results);
        }
      }
      return results;
    };

    return View;

  })();
});

//# sourceMappingURL=View.js.map
