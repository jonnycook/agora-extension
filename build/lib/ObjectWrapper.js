// Generated by CoffeeScript 1.7.1
define(['model/ObservableValue'], function(ObservableValue) {
  var ObjectWrapper;
  return ObjectWrapper = (function() {
    ObjectWrapper.create = function(storeId, object, defaults) {
      return new ObjectWrapper(storeId, object, defaults);
    };

    ObjectWrapper.prototype.getObject = function() {
      if (this.object === '@') {
        return agora.modelManager.getInstance('User', "G" + this.storeId);
      }
    };

    ObjectWrapper.prototype.field = function(name) {
      return this.fields[name];
    };

    ObjectWrapper.prototype.get = function(name) {
      var id, table, _ref;
      if (name === 'id') {
        if (this.object === '@') {
          return "G" + this.storeId;
        } else if (this.object === '/') {
          throw new Error;
        } else {
          _ref = this.object.split('.'), table = _ref[0], id = _ref[1];
          return "G" + id;
        }
      } else {
        return this.fields[name].get();
      }
    };

    ObjectWrapper.prototype.saneId = function() {
      return parseInt(this.get('id').substr(1));
    };

    function ObjectWrapper(storeId, object, values) {
      var name, value, _ref;
      this.storeId = storeId;
      this.object = object;
      this.values = values;
      this.empty = true;
      this.fields = {};
      _ref = this.values;
      for (name in _ref) {
        value = _ref[name];
        this.fields[name] = new ObservableValue(value);
      }
      this.whenObject = agora.updater.transport.whenObject(this.storeId, [this.object], (function(_this) {
        return function() {
          var field, _ref1, _results;
          _this.empty = false;
          _this.obj = _this.getObject();
          _ref1 = _this.fields;
          _results = [];
          for (name in _ref1) {
            field = _ref1[name];
            _results.push(field.set(_this.obj.get(name)));
          }
          return _results;
        };
      })(this), (function(_this) {
        return function() {
          var field, _ref1, _results;
          _this.empty = true;
          _ref1 = _this.fields;
          _results = [];
          for (name in _ref1) {
            field = _ref1[name];
            _results.push(field.set(_this.values[name]));
          }
          return _results;
        };
      })(this));
    }

    ObjectWrapper.prototype.destruct = function() {
      return agora.updater.transport.unregisterWhenObject(this.whenObject);
    };

    return ObjectWrapper;

  })();
});

//# sourceMappingURL=ObjectWrapper.map
