// Generated by CoffeeScript 1.10.0
var widgets,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

widgets = ['AmazonFeatures', 'AmazonDetails', 'AmazonMostHelpfulReview', 'AmazonMostRecentReviews', 'AmazonQuotes', 'AmazonSizes', 'html', 'List', 'Details', 'Reviews'];

define(function() {
  var widget;
  return {
    d: (function() {
      var j, len, results;
      results = [];
      for (j = 0, len = widgets.length; j < len; j++) {
        widget = widgets[j];
        results.push("widgets/" + widget + "Widget");
      }
      return results;
    })(),
    c: function() {
      var ProductPreviewView, withData;
      withData = function(data, cb) {
        if (data.get()) {
          cb(data.get());
        }
        return data.observe(function() {
          return cb(data.get());
        });
      };
      return ProductPreviewView = (function(superClass) {
        extend(ProductPreviewView, superClass);

        function ProductPreviewView() {
          return ProductPreviewView.__super__.constructor.apply(this, arguments);
        }

        ProductPreviewView.prototype.flexibleLayout = true;

        ProductPreviewView.prototype.type = 'ProductPreview';

        ProductPreviewView.prototype.init = function(opts) {
          var actualSize, dragging, fit, imageFrameEl, imgEl, lastPos, productMenuView, scrollImage, scrollViewEl, setImageSize, update, zoomIn, zoomOut;
          if (opts == null) {
            opts = {};
          }
          this["public"] = opts["public"];
          this.viewEl('<div class="-agora v-productPreview2 loading"> <div class="head"> <a href="#" class="title"><span class="title" /> <span class="continue">continue to product page</span></a> <span class="price" /> <span class="ratingInfo"> <span class="rating"> <div><div /></div> <div><div /></div> <div><div /></div> <div><div /></div> <div><div /></div> </span> <span class="reviews">Loading...</span> </div> <div class="content"> <div class="picture widget"> <span class="expand" /> <div class="current"> <div class="zoomLevel">Loading...</div> <div class="controls"> <span class="zoomIn">Zoom In</span> <span class="zoomOut">Zoom Out</span> <span class="actualSize">Actual Size</span> <span class="fit">Fit</span> </div> <span class="bg lowRes" /> <span class="bg mediumRes" /> <span class="bg hiRes" /> <div class="scrollView scroll vertical horizontal"> <img /> </div> </div> <div class="pictures scroll vertical"> </div> <div class="stylesWrapper scroll horizontal"> <div class="styles"> </div> </div> </div> <div class="widgets scroll vertical"> </div> <div class="productMenu white" /> </div> </div>');
          productMenuView = this.createView('ProductMenu', this.el.find('.productMenu'), {
            "public": this["public"]
          });
          this.alsoRepresent(productMenuView);
          this.el.find('.title').click((function(_this) {
            return function() {
              return _this.event('continueToProduct');
            };
          })(this));
          this.updateImage = update = (function(_this) {
            return function() {
              var frameSize;
              frameSize = {
                width: imageFrameEl.width(),
                height: imageFrameEl.height()
              };
              return imgEl.css({
                marginLeft: Math.max(0, (frameSize.width - imgEl.width()) / 2),
                marginTop: Math.max(0, (frameSize.height - imgEl.height()) / 2)
              });
            };
          })(this);
          this.fitImage = true;
          setImageSize = (function(_this) {
            return function(width, height) {
              var frameSize, pos;
              frameSize = {
                width: imageFrameEl.width(),
                height: imageFrameEl.height()
              };
              pos = {
                x: (scrollViewEl.scrollLeft() + frameSize.width / 2) / imgEl.width(),
                y: (scrollViewEl.scrollTop() + frameSize.height / 2) / imgEl.height()
              };
              imgEl.css({
                width: width,
                height: height
              });
              scrollViewEl.scrollLeft(imgEl.width() * pos.x - frameSize.width / 2);
              scrollViewEl.scrollTop(imgEl.height() * pos.y - frameSize.height / 2);
              imgEl.css({
                marginLeft: Math.max(0, (frameSize.width - imgEl.width()) / 2),
                marginTop: Math.max(0, (frameSize.height - imgEl.height()) / 2)
              });
              _this.fitImage = false;
              if (_this.imageSize.height / _this.imageSize.width < frameSize.height / frameSize.width) {
                if (width === frameSize.width) {
                  _this.fitImage = true;
                }
              } else {
                if (height === frameSize.height) {
                  _this.fitImage = true;
                }
              }
              _this.el.find('.picture .current .zoomLevel').html(Math.round((imgEl.width() / _this.imageSize.width) * 100) + '%');
              return update();
            };
          })(this);
          scrollImage = (function(_this) {
            return function(amount) {
              scrollViewEl.scrollLeft(scrollViewEl.scrollLeft() + amount.x);
              return scrollViewEl.scrollTop(scrollViewEl.scrollTop() + amount.y);
            };
          })(this);
          zoomIn = (function(_this) {
            return function() {
              var frameSize, inc, newHeight, newWidth;
              frameSize = {
                width: imageFrameEl.width(),
                height: imageFrameEl.height()
              };
              newWidth = newHeight = null;
              if (_this.imageSize.height / _this.imageSize.width < frameSize.height / frameSize.width) {
                inc = (_this.imageSize.width - frameSize.width) / 5;
                newWidth = Math.min(imgEl.width() + inc, _this.imageSize.width);
                newHeight = '';
              } else {
                inc = (_this.imageSize.height - frameSize.height) / 5;
                newHeight = Math.min(imgEl.height() + inc, _this.imageSize.height);
                newWidth = '';
              }
              return setImageSize(newWidth, newHeight);
            };
          })(this);
          zoomOut = (function(_this) {
            return function() {
              var frameSize, inc, newHeight, newWidth;
              frameSize = {
                width: imageFrameEl.width(),
                height: imageFrameEl.height()
              };
              newWidth = newHeight = '';
              if (_this.imageSize.height / _this.imageSize.width < frameSize.height / frameSize.width) {
                inc = (_this.imageSize.width - frameSize.width) / 5;
                newWidth = Math.max(imgEl.width() - inc, frameSize.width);
              } else {
                inc = (_this.imageSize.height - frameSize.height) / 5;
                newHeight = Math.max(imgEl.height() - inc, frameSize.height);
              }
              return setImageSize(newWidth, newHeight);
            };
          })(this);
          this.fit = fit = (function(_this) {
            return function() {
              var frameSize, height, width;
              frameSize = {
                width: imageFrameEl.width(),
                height: imageFrameEl.height()
              };
              width = height = '';
              if (_this.imageSize.height / _this.imageSize.width < frameSize.height / frameSize.width) {
                width = frameSize.width;
              } else {
                height = frameSize.height;
              }
              return setImageSize(width, height);
            };
          })(this);
          actualSize = (function(_this) {
            return function() {
              return setImageSize('', '');
            };
          })(this);
          imageFrameEl = this.el.find('.picture .current');
          scrollViewEl = imageFrameEl.find('.scrollView');
          imgEl = imageFrameEl.find('img');
          this.imageSize = null;
          imgEl.hide().load((function(_this) {
            return function() {
              imgEl.show();
              _this.el.find('.picture .current .bg').css('backgroundImage', 'none');
              imgEl.css({
                width: '',
                height: ''
              });
              _this.imageSize = {
                width: imgEl.width(),
                height: imgEl.height()
              };
              setTimeout((function() {
                return _this.el.find('.picture .current').removeClass('loading');
              }), 1000);
              return fit();
            };
          })(this));
          dragging = true;
          lastPos = null;
          scrollViewEl.mousedown(function(e) {
            dragging = true;
            lastPos = {
              x: e.clientX,
              y: e.clientY
            };
            $(window).bind('mousemove.draggingImage', (function(_this) {
              return function(e) {
                var diff, pos;
                pos = {
                  x: e.clientX,
                  y: e.clientY
                };
                diff = {
                  x: pos.x - lastPos.x,
                  y: pos.y - lastPos.y
                };
                scrollImage({
                  x: -diff.x,
                  y: -diff.y
                });
                return lastPos = pos;
              };
            })(this));
            $(window).one('mouseup', function() {
              dragging = false;
              return $(window).unbind('mousemove.draggingImage');
            });
            return false;
          });
          imageFrameEl.find('.controls').find('.fit').click((function(_this) {
            return function() {
              fit();
              return _this.event('picture/fit');
            };
          })(this)).end().find('.actualSize').click((function(_this) {
            return function() {
              actualSize();
              return _this.event('picture/actualSize');
            };
          })(this)).end().find('.zoomIn').click((function(_this) {
            return function() {
              zoomIn();
              return _this.event('picture/zoomIn');
            };
          })(this)).end().find('.zoomOut').click((function(_this) {
            return function() {
              zoomOut();
              return _this.event('picture/zoomOut');
            };
          })(this)).end();
          $(window).bind('keypress.ProductPreviewView', (function(_this) {
            return function(e) {
              switch (e.keyCode) {
                case 40:
                  e.stopPropagation();
                  e.preventDefault();
                  return false;
                case 38:
                  e.stopPropagation();
                  e.preventDefault();
                  return false;
                case 37:
                  e.stopPropagation();
                  e.preventDefault();
                  return false;
                case 39:
                  e.preventDefault();
                  e.stopPropagation();
                  return false;
              }
            };
          })(this));
          $(window).bind('keydown.ProductPreviewView', (function(_this) {
            return function(e) {
              var styles;
              switch (e.keyCode) {
                case 40:
                  _this.setCurrentImage((_this.currentImage + 1) % _this.images[_this.currentStyle].length, true);
                  e.stopPropagation();
                  e.preventDefault();
                  _this.event('nextPicture');
                  return false;
                case 38:
                  _this.setCurrentImage((_this.images[_this.currentStyle].length + _this.currentImage - 1) % _this.images[_this.currentStyle].length, true);
                  e.stopPropagation();
                  e.preventDefault();
                  _this.event('previousPicture');
                  return false;
                case 37:
                  styles = _.keys(_this.images);
                  _this.setCurrentStyle(styles[(styles.length + styles.indexOf(_this.currentStyle) - 1) % styles.length], true);
                  e.stopPropagation();
                  e.preventDefault();
                  _this.event('previousStyle');
                  return false;
                case 39:
                  styles = _.keys(_this.images);
                  _this.setCurrentStyle(styles[(styles.indexOf(_this.currentStyle) + 1) % styles.length], true);
                  e.preventDefault();
                  e.stopPropagation();
                  _this.event('nextStyle');
                  return false;
                case 27:
                  _this.event('close', 'esc');
                  if (typeof _this.close === "function") {
                    _this.close();
                  }
                  return false;
              }
            };
          })(this));
          util.tooltip(this.el.find('.picture .controls .zoomIn'), 'zoom in');
          util.tooltip(this.el.find('.picture .controls .zoomOut'), 'zoom out');
          util.tooltip(this.el.find('.picture .controls .actualSize'), 'actual size');
          util.tooltip(this.el.find('.picture .controls .fit'), 'fit');
          this.el.find('.picture .expand').click((function(_this) {
            return function() {
              _this.el.toggleClass('fullPicture');
              _this.updateLayout();
              return _this.event('toggleFullPicture');
            };
          })(this));
          return util.draggableImage({
            view: this,
            el: this.el.find('.picture .current img'),
            cancel: (function(_this) {
              return function() {
                return !_this.fitImage;
              };
            })(this),
            productData: (function(_this) {
              return function() {
                return _this.args;
              };
            })(this),
            image: (function(_this) {
              return function() {
                if (_this.getCurrentImage()) {
                  return _this.getCurrentImage().small;
                } else {
                  return _this.defaultImage;
                }
              };
            })(this),
            onStart: (function(_this) {
              return function() {
                return _this.event('dragProduct');
              };
            })(this)
          });
        };

        ProductPreviewView.prototype.updateLayout = function() {
          if (this.imageSize) {
            if (this.fitImage) {
              this.fit();
            } else {
              this.updateImage();
            }
          }
          return this.updateStylesLayout();
        };

        ProductPreviewView.prototype.onRepresent = function(args) {
          return this.createView('ProductPrice', this.el.find('.head .price')).represent(args);
        };

        ProductPreviewView.prototype.updateStylesLayout = function() {
          var contWidth, width;
          contWidth = this.el.find('.stylesWrapper').width();
          width = this.el.find('.styles').width();
          return this.el.find('.styles').css({
            marginLeft: Math.max(0, (contWidth - width) / 2)
          });
        };

        ProductPreviewView.prototype.updateImages = function() {
          var fn, i, image, j, len, ref;
          if (this.images[this.currentStyle].length === 1) {
            this.el.find('.picture').addClass('singlePicture');
          } else {
            this.el.find('.picture').removeClass('singlePicture');
          }
          this.el.find('.picture .pictures').html('');
          ref = this.images[this.currentStyle];
          fn = (function(_this) {
            return function(i) {
              return _this.el.find('.picture .pictures').append($("<span />").css('backgroundImage', "url('" + image.small + "')").click(function() {
                _this.setCurrentImage(i);
                return _this.event('selectPicture');
              }));
            };
          })(this);
          for (i = j = 0, len = ref.length; j < len; i = ++j) {
            image = ref[i];
            fn(i);
          }
          return util.initScrollbar(this.el.find('.picture .pictures'));
        };

        ProductPreviewView.prototype.getCurrentImage = function() {
          return this.images[this.currentStyle][this.currentImage];
        };

        ProductPreviewView.prototype.setCurrentImage = function(image, scrollIntoView) {
          var imgObj;
          if (scrollIntoView == null) {
            scrollIntoView = false;
          }
          $(this.el.find('.picture .pictures span').get(this.currentImage)).removeClass('active');
          this.currentImage = Math.min(image, this.images[this.currentStyle].length - 1);
          imgObj = this.images[this.currentStyle][this.currentImage];
          this.el.find('.picture .current .bg.lowRes').css({
            backgroundImage: "url('" + imgObj.small + "')"
          });
          this.el.find('.picture .current .bg.mediumRes').css({
            backgroundImage: "url('" + imgObj.medium + "')"
          });
          this.el.find('.picture .current .bg.hiRes').css({
            backgroundImage: "url('" + imgObj.large + "')"
          });
          this.el.find('.picture .current img').hide().attr('src', imgObj.full);
          this.el.find('.picture .current .zoomLevel').html('Loading...');
          this.el.find('.picture .current').addClass('loading');
          $(this.el.find('.picture .pictures span').get(this.currentImage)).addClass('active');
          if (scrollIntoView) {
            return this.el.find('.picture .pictures .scrollWrapper').scrollTop(this.el.find('.picture .pictures span').get(this.currentImage).offsetTop - this.el.find('.picture .pictures').height() / 2 + this.el.find('.picture .pictures span:first-child').height() / 2);
          }
        };

        ProductPreviewView.prototype.setCurrentStyle = function(style, scrollIntoView) {
          if (scrollIntoView == null) {
            scrollIntoView = false;
          }
          this.el.find('.picture .styles').find('.active').removeClass('active').end().find("[stylename='" + style + "'").addClass('active');
          this.currentStyle = style;
          this.updateImages();
          this.setCurrentImage(this.currentImage, scrollIntoView);
          if (scrollIntoView) {
            if (this.el.find('.picture .styles').find("[stylename='" + style + "'").get(0)) {
              return this.el.find('.picture .stylesWrapper .scrollWrapper').scrollLeft(this.el.find('.picture .styles').find("[stylename='" + style + "'").get(0).offsetLeft - this.el.find('.picture .stylesWrapper').width() / 2 + this.el.find('.picture .styles span:first-child').width() / 2);
            }
          }
        };

        ProductPreviewView.prototype.onData = function(data) {
          var finishedLoading, loading, title;
          title = this.el.find('.head .title');
          if (data.title.get()) {
            title.find('.title').html(data.title.get());
          }
          this.observe(data.title, function(mutation) {
            return title.find('.title').html(mutation.value);
          });
          title.attr({
            href: data.url
          });
          if (data.rating && data.ratingCount) {
            withData(data.rating, (function(_this) {
              return function(rating) {
                return util2.setRating(_this.el.find('.head .rating'), rating);
              };
            })(this));
            this.valueInterface(this.el.find('.ratingInfo .reviews')).setDataSource(data.ratingCount);
          } else {
            this.el.find('.ratingInfo').remove();
          }
          loading = 0;
          finishedLoading = (function(_this) {
            return function() {
              if (!--loading) {
                return _this.el.removeClass('loading');
              }
            };
          })(this);
          if (data.images) {
            loading++;
            withData(data.images, (function(_this) {
              return function(images) {
                var fn, ref, styleImages, styleName;
                if ((images != null ? images.images : void 0) && _.keys(images.images).length) {
                  finishedLoading();
                  _this.images = images.images;
                  _this.currentStyle = images.currentStyle;
                  _this.currentImage = 0;
                  if (_.keys(images.images).length === 1) {
                    _this.el.find('.picture').addClass('noStyles');
                  } else {
                    ref = images.images;
                    fn = function(styleName) {
                      return _this.el.find('.picture .styles').append($("<span stylename='" + styleName + "' />").css('backgroundImage', "url('" + styleImages[0].small + "')").click(function() {
                        _this.setCurrentStyle(styleName);
                        return _this.event('selectStyle');
                      }));
                    };
                    for (styleName in ref) {
                      styleImages = ref[styleName];
                      fn(styleName);
                    }
                    util.initScrollbar(_this.el.find('.stylesWrapper'), {
                      trapScrolling: false
                    });
                  }
                  _this.updateStylesLayout();
                  _this.updateImages();
                  return _this.setCurrentStyle(_this.currentStyle, true);
                } else {
                  _this.el.addClass('noPictures');
                  return _this.withData(data.image, function(image) {
                    return _this.el.find('.picture').css('backgroundImage', "url('" + image + "')");
                  });
                }
              };
            })(this));
          } else {
            this.el.addClass('noPictures');
            this.withData(data.image, (function(_this) {
              return function(image) {
                return _this.el.find('.picture').css('backgroundImage', "url('" + image + "')");
              };
            })(this));
          }
          if (data.widgets) {
            return withData(data.widgets, (function(_this) {
              return function(widgets) {
                var j, len, widgetData, widgetEl;
                if (widgets && widgets.length) {
                  finishedLoading();
                  _this.el.removeClass('fullPicture').removeClass('widgetPanel');
                  if (widgets === 'none') {
                    _this.el.addClass('fullPicture');
                  } else {
                    _this.el.addClass('widgetPanel');
                    for (j = 0, len = widgets.length; j < len; j++) {
                      widgetData = widgets[j];
                      if (!__classes[widgetData.type + "Widget"]) {
                        throw new Error("No widget " + widgetData.type);
                      }
                      widget = new __classes[widgetData.type + "Widget"](widgetData.data);
                      widgetEl = $('<div class="widget"><span class="title" /><div class="content" /></div>').find('.title').html(widget.title).end();
                      widgetEl.addClass("widget-" + widgetData.type);
                      widgetEl.find('.content').append(widget.el);
                      _this.el.find('.widgets').append(widgetEl);
                      if (typeof widget.init === "function") {
                        widget.init();
                      }
                    }
                  }
                  return util.initScrollbar(_this.el.find('.widgets'));
                } else {
                  return _this.el.addClass('fullPicture');
                }
              };
            })(this));
          } else {
            return this.el.addClass('fullPicture');
          }
        };

        ProductPreviewView.prototype.destruct = function() {
          ProductPreviewView.__super__.destruct.apply(this, arguments);
          return $(window).unbind('.ProductPreviewView');
        };

        return ProductPreviewView;

      })(View);
    }
  };
});

//# sourceMappingURL=ProductPreviewView.js.map
