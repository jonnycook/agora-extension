// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(function() {
  return {
    d: ['View', 'util', 'views/ProductPopupView', 'views/ShoppingBarView/ListBarItem', 'views/ShoppingBarView/SessionBarItem', 'views/ShoppingBarView/DecisionBarItem', 'views/ShoppingBarView/BundleBarItem', 'views/ShoppingBarView/ProductBarItem', 'views/ShoppingBarView/CompositeSlotBarItem', 'views/ShoppingBarView/CompositeBarItem', 'views/ShoppingBarView/PlaceholderBarItem', 'views/ShoppingBarView/SharedBeltBarItem', 'views/ShoppingBarView/BeltBarItem', 'views/ShoppingBarView/UnauthorizedBarItem'],
    c: function() {
      var BarItemView;
      return BarItemView = (function(superClass) {
        extend(BarItemView, superClass);

        BarItemView.prototype.type = 'ShoppingBarView/BarItem';

        function BarItemView(contentScript, shoppingBarView, opts) {
          var popupView;
          this.shoppingBarView = shoppingBarView;
          this.opts = opts != null ? opts : {};
          BarItemView.__super__.constructor.apply(this, arguments);
          this.el = this.viewEl('<div class="element t-item barItem"></div>');
          popupView = null;
          this.selectMode = this.opts.selectMode;
        }

        BarItemView.prototype.childrenCount = function() {
          var ref;
          return (ref = this.barItem) != null ? typeof ref.childrenCount === "function" ? ref.childrenCount() : void 0 : void 0;
        };

        BarItemView.prototype.width = function() {
          var ref, ref1;
          return (ref = (ref1 = this.barItem) != null ? typeof ref1.width === "function" ? ref1.width() : void 0 : void 0) != null ? ref : 48;
        };

        BarItemView.prototype.updateLayout = function() {
          var ref;
          return (ref = this.barItem) != null ? typeof ref.updateLayout === "function" ? ref.updateLayout() : void 0 : void 0;
        };

        BarItemView.prototype.processChild = function(view) {
          var base, ref;
          if ((ref = this.barItem) != null) {
            if (typeof ref.processChild === "function") {
              ref.processChild(view.barItem);
            }
          }
          return typeof (base = this.parent).processChild === "function" ? base.processChild(view) : void 0;
        };

        BarItemView.prototype.childWidthChanged = function(view) {
          var base;
          this.updateLayout();
          return typeof (base = this.parent).childWidthChanged === "function" ? base.childWidthChanged(this) : void 0;
        };

        BarItemView.prototype.enableSelection = function(force) {
          if (force == null) {
            force = false;
          }
          if (!(this.selectMode && !force)) {
            this.selectMode = true;
            this.el.addClass('selectMode');
            return this.el.append($('<input type="checkbox" class="select">').click((function(_this) {
              return function(e) {
                e.stopPropagation();
                _this.selected = !_this.selected;
                return true;
              };
            })(this)));
          }
        };

        BarItemView.prototype.disableSelection = function() {
          if (this.selectMode) {
            delete this.selectMode;
            delete this.selected;
            this.el.find('.select').remove();
            return this.el.removeClass('selectMode');
          }
        };

        BarItemView.prototype.update = function(data) {
          var base, el, ref;
          if (this.barItem) {
            this.clearViews();
            this.barItem.destruct();
            if (typeof (base = this.parent).destructChild === "function") {
              base.destructChild(this);
            }
          }
          this.el.mouseenter((function(_this) {
            return function() {
              if (!_this.selectMode) {
                if (util.isMutable(_this.el)) {
                  return _this.shoppingBarView.mouseEnteredBarItemView(_this);
                }
              }
            };
          })(this)).mouseleave((function(_this) {
            return function() {
              if (!_this.selectMode) {
                if (util.isMutable(_this.el)) {
                  return _this.shoppingBarView.mouseLeftBarItemView(_this);
                }
              }
            };
          })(this));
          this.view = this.createView();
          if (data) {
            if (data.type) {
              this.elementType = data.type;
            } else {
              this.elementType = 'Placeholder';
            }
            if (!__classes[this.elementType + "BarItem"]) {
              throw "bar item close not present " + this.elementType;
            }
            this.barItem = new __classes[this.elementType + "BarItem"](this, this.opts.barItemArgs);
            this.barItem.init(data);
            if ((ref = this.parent) != null) {
              if (typeof ref.processChild === "function") {
                ref.processChild(this);
              }
            }
            if (data.selected) {
              this.el.append('<input type="checkbox" class="chosen">');
              this.el.find('.chosen').prop('checked', data.selected.get()).click((function(_this) {
                return function(e) {
                  tracking.event('ShoppingBar', 'toggleChosen');
                  e.stopPropagation();
                  return _this.callBackgroundMethod('setSelected', [_this.el.find('.chosen').prop('checked')]);
                };
              })(this));
              this.view.observeObject(data.selected, (function(_this) {
                return function() {
                  return _this.el.find('.chosen').prop('checked', data.selected.get());
                };
              })(this));
            }
            if (data.creator) {
              el = $('<span class="userIndicator" />').css('background-color', data.creator.color);
              util.tooltip(el, function() {
                return data.creator.name.get();
              });
              this.el.append(el);
            }
            if (typeof this.changedType === "function") {
              this.changedType();
            }
          }
          if (this.selectMode) {
            return this.enableSelection(true);
          }
        };

        BarItemView.prototype.represent = function() {
          BarItemView.__super__.represent.apply(this, arguments);
          if (!this.loadNotify) {
            this.shoppingBarView.loadBarItem(this);
            return this.loadNotify = true;
          }
        };

        BarItemView.prototype.destruct = function() {
          var base, ref;
          if (!this.noDestruct) {
            if ((ref = this.barItem) != null) {
              ref.destruct();
            }
            if (typeof (base = this.parent).destructChild === "function") {
              base.destructChild(this);
            }
            return BarItemView.__super__.destruct.apply(this, arguments);
          }
        };

        BarItemView.prototype.onData = function(data1) {
          this.data = data1;
          this.update(this.data.get());
          this.data.observe((function(_this) {
            return function() {
              return _this.update(_this.data.get());
            };
          })(this));
          return this.shoppingBarView.barItemLoaded(this);
        };

        BarItemView.prototype.path = function() {
          return this.shoppingBarView.path();
        };

        return BarItemView;

      })(View);
    }
  };
});

//# sourceMappingURL=BarItemView.js.map
