// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['views/ShoppingBarView/BarItem', 'views/ProductPopupView', 'util', 'Frame'],
    c: function() {
      var ProductBarItem;
      return ProductBarItem = (function(_super) {
        __extends(ProductBarItem, _super);

        function ProductBarItem() {
          return ProductBarItem.__super__.constructor.apply(this, arguments);
        }

        ProductBarItem.prototype.html = '<span class="image" /><a />';

        ProductBarItem.prototype.width = function() {
          return ProductBarItem.__super__.width.apply(this, arguments) + 48;
        };

        ProductBarItem.prototype.init = function() {
          var popup;
          ProductBarItem.__super__.init.apply(this, arguments);
          popup = util.popupTrigger2(this.el, {
            delay: 300,
            createPopup: (function(_this) {
              return function(cb, close, addEl, removeEl) {
                var productPopupView;
                if (_this.view.shoppingBarView.disableProductPopups || window.suppressPopups) {
                  return false;
                }
                productPopupView = _this.view.createView('ProductPopupView', {
                  unconstrainedPictureHeight: true
                });
                _this.view.shoppingBarView.propOpen(productPopupView);
                productPopupView.barItem = _this;
                tracking.page("" + (_this.path()) + "/" + (productPopupView.pathElement()));
                productPopupView.represent(_this.view.args, function() {
                  var frame;
                  frame = Frame.frameAbove(_this.el, productPopupView.el, {
                    type: 'balloon',
                    distance: 20,
                    onClose: function() {
                      productPopupView.destruct();
                      return productPopupView = null;
                    }
                  });
                  productPopupView.close = close;
                  productPopupView.sizeChanged = function() {
                    return frame.update();
                  };
                  productPopupView.addEl = addEl;
                  productPopupView.removeEl = removeEl;
                  productPopupView.shown();
                  return cb(frame.el);
                });
                return null;
              };
            })(this),
            onClose: function(el) {
              var _ref;
              return (_ref = el.data('frame')) != null ? typeof _ref.close === "function" ? _ref.close() : void 0 : void 0;
            }
          });
          return this.el.mousedown(function() {
            return popup.close();
          });
        };

        ProductBarItem.prototype.onData = function(data, barItemViewData) {
          var lastEmotion, updateForLastFeeling;
          this.data = data;
          this.barItemViewData = barItemViewData;
          this.view.withData(data.image, (function(_this) {
            return function(image) {
              if (image) {
                return _this.el.find('.image').removeClass('loading').css({
                  backgroundImage: "url('" + image + "')"
                });
              } else {
                return _this.el.find('.image').addClass('loading').css({
                  backgroundImage: "none"
                });
              }
            };
          })(this));
          this.view.withData(this.data.purchased, (function(_this) {
            return function(purchased) {
              if (purchased) {
                return _this.el.addClass('purchased');
              } else {
                return _this.el.removeClass('purchased');
              }
            };
          })(this));
          if (1) {
            this.el.css('cursor', 'pointer');
            this.el.find('a').mousedown(function() {
              return $(this).attr('href', data.url);
            });
            this.el.find('a').mouseup(function() {
              return setTimeout(((function(_this) {
                return function() {
                  return $(_this).removeAttr('href');
                };
              })(this)), 500);
            });
            this.el.find('a').mouseout(function() {
              return $(this).removeAttr('href');
            });
          } else {
            this.el.find('a').attr('href', data.url);
          }
          this.el.html(data.productSid);
          this.el.click((function(_this) {
            return function() {
              return _this.callBackgroundMethod('click');
            };
          })(this));
          this.el.append('<span class="feelingBadge noText"><span class="icon" /><span class="text"></span></span>');
          lastEmotion = null;
          updateForLastFeeling = (function(_this) {
            return function() {
              var emotionClass;
              if (lastEmotion) {
                _this.el.find('.feelingBadge').removeClass(lastEmotion);
              }
              if (data.lastFeeling.get()) {
                _this.el.find('.feelingBadge').show();
                _this.el.find('.feelingBadge .text').html(data.lastFeeling.get().thought);
                emotionClass = util.emotionClass(data.lastFeeling.get().positive, data.lastFeeling.get().negative);
                _this.el.find('.feelingBadge').addClass(emotionClass);
                return lastEmotion = emotionClass;
              } else {
                return _this.el.find('.feelingBadge').hide();
              }
            };
          })(this);
          data.lastFeeling.observe(updateForLastFeeling);
          updateForLastFeeling();
          this.view.withData(data.status, (function(_this) {
            return function(status) {
              if (status === 2) {
                return _this.el.addClass('error');
              } else {
                return _this.el.removeClass('error');
              }
            };
          })(this));
          return this.widthChanged();
        };

        ProductBarItem.prototype.destruct = function() {
          ProductBarItem.__super__.destruct.apply(this, arguments);
          util.clearPopupTrigger(this.el);
          this.el.css('backgroundImage', '');
          return this.el.css('cursor', '');
        };

        return ProductBarItem;

      })(BarItem);
    }
  };
});

//# sourceMappingURL=ProductBarItem.map
