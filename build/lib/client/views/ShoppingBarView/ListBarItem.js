// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['views/ShoppingBarView/BarItem', 'util'],
    c: function() {
      var ListBarItem;
      return ListBarItem = (function(_super) {
        __extends(ListBarItem, _super);

        ListBarItem.prototype.html = '';

        ListBarItem.prototype.supportsCreateBundle = function() {
          return false;
        };

        ListBarItem.prototype.draggingData = function() {
          return {
            type: this.type,
            immutableContents: this.args.readOnly,
            onRippedOut: (function(_this) {
              return function(el) {};
            })(this),
            onReorder: (function(_this) {
              return function(el, startIndex, endIndex) {
                tracking.event('ShoppingBar', 'reorder');
                return _this.callBackgroundMethod('reorder', [startIndex, endIndex]);
              };
            })(this),
            onDragOver: (function(_this) {
              return function() {
                if (_this.state === 'expanded' && !_this.args.readOnly) {
                  if (!_this.expanded) {
                    _this.startedDrag = true;
                    return _this.expand();
                  }
                }
              };
            })(this),
            onDragOut: (function(_this) {
              return function() {
                if (_this.expanded) {
                  return _this.view.shoppingBarView.queueShrink(_this);
                }
              };
            })(this)
          };
        };

        function ListBarItem() {
          ListBarItem.__super__.constructor.apply(this, arguments);
          if (!this.args.readOnly) {
            this.startEdit = (function(_this) {
              return function() {
                return _this.expand();
              };
            })(this);
            this.stopEdit = (function(_this) {
              return function() {
                return _this.shrink();
              };
            })(this);
            this.view.shoppingBarView.addEditListener(this);
          }
          this.el.addClass('list');
        }

        ListBarItem.prototype.childrenCount = function() {
          return this.el.children('.element').length;
        };

        ListBarItem.prototype.items = function() {
          return this.el.children('.element');
        };

        ListBarItem.prototype.width = function() {
          var width;
          return ListBarItem.__super__.width.apply(this, arguments) + (function() {
            if (this.view.data) {
              switch (this.state) {
                case 'expanded':
                  width = 0;
                  this.el.children('.element').each(function() {
                    return width += $(this).data('view').width();
                  });
                  width = Math.max(0, width + (this.childrenCount() - 1) * this.view.shoppingBarView.itemSpacing);
                  if (width) {
                    if (this.expanded) {
                      width += 58;
                    }
                    return width;
                  } else {
                    return 48;
                  }
                  break;
                case 'collapsed':
                  return 48;
              }
            } else {
              return 0;
            }
          }).call(this);
        };

        ListBarItem.prototype.updateLayout = function() {
          var animateSpeed, itemSpacing, width, x, _ref;
          switch (this.state) {
            case 'expanded':
              x = 0;
              _ref = this.view.shoppingBarView, itemSpacing = _ref.itemSpacing, animateSpeed = _ref.animateSpeed;
              this.el.children('.element').each(function() {
                $(this).css({
                  left: x
                });
                return x += $(this).data('view').width() + itemSpacing;
              });
              width = Math.max(0, x - itemSpacing);
              this._width = width ? width : 48;
              if (width === 0) {
                this.empty = true;
                this.el.addClass('empty');
                if (typeof this.onEmpty === "function") {
                  this.onEmpty();
                }
              } else {
                this.empty = false;
                this.el.removeClass('empty');
                if (typeof this.onNotEmpty === "function") {
                  this.onNotEmpty();
                }
              }
              break;
            case 'collapsed':
              this._width = 48;
          }
          return this.el.css('width', this._width);
        };

        ListBarItem.prototype.shrink = function() {
          if (this.expanded) {
            this.expanded = false;
            this.updateLayout();
            this.widthChanged();
            this.addDrop.remove();
            return this.el.removeClass('hasAddDrop');
          }
        };

        ListBarItem.prototype.expand = function() {
          var el;
          if (!this.expanded) {
            this.expanded = true;
            this.updateLayout();
            this.widthChanged();
            this.el.addClass('hasAddDrop');
            el = $('<a href="#" class="addDrop"></a>').click((function(_this) {
              return function(e) {
                var dialogEl;
                dialogEl = Frame.wrapInFrame('<a href="#" class="computer">Add Computer</a>');
                dialogEl.find('.computer').click(function() {
                  _this.callBackgroundMethod('add', ['computer']);
                  Frame.close(dialogEl);
                  return false;
                });
                dialogEl.appendTo(document.body);
                Frame.fixFrameAboveAndCentered(el, dialogEl);
                e.stopPropagation();
                return false;
              };
            })(this));
            util.initDragging(el, {
              enabled: false,
              acceptsDrop: false,
              onDragOver: (function(_this) {
                return function() {
                  return _this.view.shoppingBarView.stopShrink();
                };
              })(this)
            });
            this.addDrop = el;
            return this.el.append(el);
          }
        };

        ListBarItem.prototype.setup = function(data) {
          var classesForLength, contents, prevLength, updateForLength, _base;
          this.contentsView = this.view.view.createView();
          this.state = data.state;
          this.el.addClass(this.state);
          if (this.state === 'expanded') {
            this.el.data('spacing', this.view.shoppingBarView.itemSpacing);
            this.el.append($('<div class="element" />'));
            contents = this.contentsView.listInterface(this.el, '.element', (function(_this) {
              return function(el, data, pos, onRemove) {
                var view;
                view = util.getBarItem(data, _this.view, _this.view.shoppingBarView);
                _this.contentsView.trackView(view);
                onRemove(function() {
                  return view.destruct();
                });
                return view.el;
              };
            })(this));
            contents.setDataSource(data.contents);
            contents.onInsert = (function(_this) {
              return function() {
                _this.widthChanged();
                return _this.view.updateLayout();
              };
            })(this);
            contents.onDelete = (function(_this) {
              return function(el, del) {
                del();
                _this.widthChanged();
                return _this.view.updateLayout();
              };
            })(this);
            contents.onMove = (function(_this) {
              return function() {
                return _this.view.updateLayout();
              };
            })(this);
          } else if (this.state === 'collapsed') {
            this.el.bind('click.list', (function(_this) {
              return function() {
                return _this.view.callBackgroundMethod('click');
              };
            })(this));
            this.el.append($('<span class="image" />'));
            contents = this.view.view.listInterface(this.view.el, '.image', (function(_this) {
              return function(el, data, pos, onRemove) {
                return el.css('background-image', "url('" + data + "')");
              };
            })(this));
            contents.setDataSource(data.contents);
            prevLength = contents.length();
            classesForLength = {
              0: 'empty',
              1: 'oneItem',
              2: 'twoItems',
              3: 'threeItems',
              4: 'fourItems'
            };
            updateForLength = (function(_this) {
              return function() {
                _this.el.removeClass(classesForLength[prevLength]);
                return _this.el.addClass(classesForLength[prevLength = contents.length()]);
              };
            })(this);
            contents.onLengthChanged = updateForLength;
            updateForLength();
          }
          this.view.updateLayout();
          return typeof (_base = this.view.parent).childWidthChanged === "function" ? _base.childWidthChanged(this) : void 0;
        };

        ListBarItem.prototype.onData = function(data) {
          this.setup(data.state.get());
          return this.observeObject(data.state, (function(_this) {
            return function() {
              _this.clearState();
              return _this.setup(data.state.get());
            };
          })(this));
        };

        ListBarItem.prototype.clearState = function() {
          this.el.removeClass(this.state);
          this.contentsView.destruct();
          switch (this.state) {
            case 'collapsed':
              return this.el.find('.image').remove();
            case 'expanded':
              this.el.unbind('.list');
              return this.el.children('.element').remove();
          }
        };

        ListBarItem.prototype.destruct = function() {
          ListBarItem.__super__.destruct.apply(this, arguments);
          this.clearState();
          if (!this.args.readOnly) {
            return this.view.shoppingBarView.removeEditListener(this);
          }
        };

        return ListBarItem;

      })(BarItem);
    }
  };
});

//# sourceMappingURL=ListBarItem.map
