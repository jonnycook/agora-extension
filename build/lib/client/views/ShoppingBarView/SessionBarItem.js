// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(function() {
  return {
    d: ['View', 'util', 'views/ShoppingBarView/ListBarItem'],
    c: function() {
      var SessionBarItem;
      return SessionBarItem = (function(superClass) {
        extend(SessionBarItem, superClass);

        function SessionBarItem() {
          return SessionBarItem.__super__.constructor.apply(this, arguments);
        }

        SessionBarItem.prototype.type = 'Session';

        SessionBarItem.prototype.html = '<div class="title"><span>Session</span> <div class="toggle"></div></div>';

        SessionBarItem.prototype.init = function() {
          var dialogOpened;
          SessionBarItem.__super__.init.apply(this, arguments);
          dialogOpened = false;
          return this.el.children('.title').dblclick((function(_this) {
            return function() {
              var close, frame, popupEl;
              if (dialogOpened) {
                return;
              }
              popupEl = $("<form class='t-dialog renameSession'> <h2>Rename session</h2> <div class='content'> <input type='text' name='title' value='" + (_this.data.title.get()) + "'> <input type='button' class='button cancel' value='cancel'> <input type='submit' class='button' value='confirm'> </div> </form>");
              close = function() {
                dialogOpened = false;
                return frame.close();
              };
              popupEl.find('.cancel').click(close);
              popupEl.submit(function() {
                _this.view.callBackgroundMethod('setTitle', popupEl.get(0).title.value);
                close();
                return false;
              });
              frame = Frame.frameAbove(_this.el.children('.title'), popupEl, {
                type: 'balloon',
                close: function() {
                  return dialogOpened = false;
                }
              });
              frame.el.css({
                marginTop: -8
              });
              popupEl.get(0).title.focus();
              popupEl.get(0).title.select();
              return dialogOpened = true;
            };
          })(this));
        };

        SessionBarItem.prototype.onData = function(data1) {
          this.data = data1;
          SessionBarItem.__super__.onData.apply(this, arguments);
          this.el.removeClass('t-item');
          this.el.find('.title .toggle').click((function(_this) {
            return function() {
              _this.callBackgroundMethod('toggle');
              return false;
            };
          })(this));
          this.view.valueInterface(this.el.find('.title span')).setDataSource(data.title);
          return util.tooltip(this.el.find('.title .toggle'), ((function(_this) {
            return function() {
              if (_this.el.hasClass('expanded')) {
                return 'collapse session';
              } else {
                return 'expand session';
              }
            };
          })(this)), {
            distance: 15
          });
        };

        SessionBarItem.prototype.updateLayout = function() {
          SessionBarItem.__super__.updateLayout.apply(this, arguments);
          if (this._width < 66) {
            return this.el.children('.title').css({
              minWidth: this._width
            });
          } else {
            return this.el.children('.title').css({
              minWidth: ''
            });
          }
        };

        return SessionBarItem;

      })(ListBarItem);
    }
  };
});

//# sourceMappingURL=SessionBarItem.js.map
