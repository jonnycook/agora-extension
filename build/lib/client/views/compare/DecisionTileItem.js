// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['views/compare/TileItem', 'util'],
    c: function() {
      var DecisionTileItem;
      return DecisionTileItem = (function(_super) {
        __extends(DecisionTileItem, _super);

        function DecisionTileItem() {
          return DecisionTileItem.__super__.constructor.apply(this, arguments);
        }

        DecisionTileItem.prototype.draggingData = function() {
          return {
            immutableContents: true
          };
        };

        DecisionTileItem.prototype.onData = function(data, itemData) {
          var popup, updateIcon, updateTooltip;
          this.el.append('<span class="count"><!--<span class="selection" />/--><span class="list" /></span>');
          this.el.append("<span class='preview'><span class='image' /><span class='icon' /></span>");
          this.el.append('<span class="shareIndicator" />');
          this.view.withData(data.shared, (function(_this) {
            return function(shared) {
              if (shared) {
                return _this.el.addClass('shared');
              } else {
                return _this.el.removeClass('shared');
              }
            };
          })(this));
          updateIcon = (function(_this) {
            return function() {
              var _ref;
              return icons.setIcon(_this.el, (_ref = data.icon.get()) != null ? _ref : 'list', {
                size: 'large'
              });
            };
          })(this);
          this.listItem = new ListTileItem(this.view, true);
          this.listItem.onEmpty = updateIcon;
          this.listItem.onNotEmpty = (function(_this) {
            return function() {
              return icons.clearIcon(_this.el);
            };
          })(this);
          updateIcon();
          data.icon.observe((function(_this) {
            return function() {
              if (_this.listItem.empty) {
                return updateIcon();
              }
            };
          })(this));
          this.listItem.setup({
            state: 'expanded',
            contents: data.selection
          });
          (function(_this) {
            return (function() {
              var classesForLength, contents, prevLength, updateForLength;
              contents = _this.view.listInterface(_this.el.find('.preview'), '.image', function(el, data, pos, onRemove) {
                return el.css('background-image', "url('" + data + "')");
              });
              contents.setDataSource(data.preview);
              prevLength = contents.length();
              classesForLength = {
                0: 'empty',
                1: 'oneItem',
                2: 'twoItems',
                3: 'threeItems',
                4: 'fourItems'
              };
              updateForLength = function() {
                _this.el.find('.preview').removeClass(classesForLength[prevLength]);
                return _this.el.find('.preview').addClass(classesForLength[prevLength = contents.length()]);
              };
              contents.onLengthChanged = updateForLength;
              return updateForLength();
            });
          })(this)();
          (function(_this) {
            return (function() {
              updateIcon = function() {
                var _ref;
                return icons.setIcon(_this.el.find('.preview .icon'), (_ref = data.icon.get()) != null ? _ref : 'list', {
                  itemClass: false
                });
              };
              data.icon.observe(function() {
                return updateIcon();
              });
              return updateIcon();
            });
          })(this)();
          (function(_this) {
            return (function() {
              var updateForListSize;
              updateForListSize = function() {
                if (data.listSize.get() === 0) {
                  _this.el.addClass('emptyList');
                } else {
                  _this.el.removeClass('emptyList');
                }
                return _this.el.find('.count .list').html(data.listSize.get());
              };
              data.listSize.observe(updateForListSize);
              return updateForListSize();
            });
          })(this)();
          this.el.find('.count').click((function(_this) {
            return function(e) {
              tracking.event('Compare', 'openDecision');
              _this.callBackgroundMethod('click');
              return e.stopPropagation();
            };
          })(this));
          if (!this.view.compareView["public"]) {
            updateTooltip = (function(_this) {
              return function() {
                var text, _ref, _ref1;
                text = ((_ref = data.descriptor.get()) != null ? _ref.descriptor : void 0) ? (_ref1 = data.descriptor.get()) != null ? _ref1.descriptor : void 0 : '<i>Edit Decision</i>';
                return util.tooltip(_this.el.find('.count'), "<span class='descriptorTooltip'> <span class='preview'><span class='image' /></span> <div class='descriptorWrapper'><span class='icon' /> <span class='descriptor'>" + text + "</span><a class='edit' href='#' /></div> </span>", {
                  parentView: _this.view,
                  canFocus: true,
                  type: 'html',
                  frameType: 'balloon',
                  init: function(el, close, view) {
                    var classesForLength, contents, edit, prevLength, updateForLength, _ref2;
                    icons.setIcon(el.find('.icon'), (_ref2 = data.icon.get()) != null ? _ref2 : 'list', {
                      size: 'small'
                    });
                    el.find('.icon').removeClass('t-item');
                    edit = function() {
                      var editDescriptorView, frame;
                      editDescriptorView = new EditDescriptorView(_this.view.contentScript);
                      tracking.page("" + (_this.view.path()) + "/" + (editDescriptorView.pathElement()));
                      tracking.event('Compare', 'editDescriptor', 'item');
                      editDescriptorView.close = function() {
                        return frame.close();
                      };
                      editDescriptorView.represent(_this.view.data.get().id);
                      frame = Frame.frameAround(_this.el.find('.count'), editDescriptorView.el, {
                        type: 'balloon',
                        distance: 15,
                        close: function() {
                          return frame.close();
                        }
                      });
                      return false;
                    };
                    el.find('.edit').click(edit);
                    el.find('.preview').click(function() {
                      return _this.callBackgroundMethod('click');
                    });
                    el.find('.descriptor').click(edit);
                    contents = view.listInterface(el.find('.preview'), '.image', function(el, data, pos, onRemove) {
                      return el.css('background-image', "url('" + data + "')");
                    });
                    contents.setDataSource(data.preview);
                    prevLength = contents.length();
                    classesForLength = {
                      0: 'empty',
                      1: 'oneItem',
                      2: 'twoItems',
                      3: 'threeItems',
                      4: 'fourItems'
                    };
                    updateForLength = function() {
                      el.find('.preview').removeClass(classesForLength[prevLength]);
                      return el.find('.preview').addClass(classesForLength[prevLength = contents.length()]);
                    };
                    contents.onLengthChanged = updateForLength;
                    return updateForLength();
                  }
                });
              };
            })(this);
            data.descriptor.observe(updateTooltip);
            updateTooltip();
          }
          this.el.click((function(_this) {
            return function() {
              if (_this.el.hasClass('empty')) {
                return _this.callBackgroundMethod('click');
              }
            };
          })(this));
          this.el.find('.count .selection').html(data.selectionSize.get());
          data.selectionSize.observe((function(_this) {
            return function() {
              return _this.el.find('.count .selection').html(data.selectionSize.get());
            };
          })(this));
          if (itemData.user) {
            this.el.find('.shareIndicator').css('backgroundColor', itemData.user.color);
          }
          return popup = util.popupTrigger2(this.el.find('.shareIndicator'), {
            delay: 300,
            createPopup: (function(_this) {
              return function(cb, close, addEl) {
                var collaborateView, frame;
                if (window.suppressPopups) {
                  return false;
                }
                collaborateView = _this.view.createView('Collaborate');
                collaborateView.addExtension = function(el) {
                  return addEl(el);
                };
                collaborateView.removeExtension = function(el) {};
                frame = Frame.frameAbove(_this.el.find('.shareIndicator'), collaborateView.el, {
                  type: 'balloon',
                  distance: 20,
                  onClose: function() {
                    collaborateView.destruct();
                    return collaborateView = null;
                  }
                });
                collaborateView.close = close;
                collaborateView.sizeChanged = function() {
                  return frame.update();
                };
                collaborateView.addEl = addEl;
                collaborateView.shown();
                collaborateView.represent(_this.view.args);
                return cb(frame.el, null);
              };
            })(this),
            onClose: function(el) {
              var _ref;
              return (_ref = el.data('frame')) != null ? typeof _ref.close === "function" ? _ref.close() : void 0 : void 0;
            }
          });
        };

        DecisionTileItem.prototype.updateTilesLayout = function(params, state) {
          var countEl, lastSegment;
          this.listItem.updateTilesLayout(params, state);
          lastSegment = this.listItem.segments[this.listItem.segments.length - 1];
          countEl = this.el.children('.count');
          return countEl.css({
            left: lastSegment.left + lastSegment.width - countEl.outerWidth(),
            top: lastSegment.top + lastSegment.height - countEl.outerHeight()
          });
        };

        DecisionTileItem.prototype.updateMasonryLayout = function() {
          return this.listItem.updateMasonryLayout();
        };

        DecisionTileItem.prototype.destruct = function() {
          DecisionTileItem.__super__.destruct.apply(this, arguments);
          return this.listItem.destruct();
        };

        return DecisionTileItem;

      })(TileItem);
    }
  };
});

//# sourceMappingURL=DecisionTileItem.map
