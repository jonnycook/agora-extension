// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(function() {
  return {
    d: ['View', 'util', 'views/compare/ProductTileItem', 'views/compare/BundleTileItem', 'views/compare/DecisionTileItem', 'views/compare/UnauthorizedTileItem'],
    c: function() {
      var TileItemView;
      return TileItemView = (function(superClass) {
        extend(TileItemView, superClass);

        TileItemView.prototype.type = 'compare/TileItem';

        function TileItemView(contentScript, compareView, opts) {
          this.compareView = compareView;
          this.opts = opts != null ? opts : {};
          TileItemView.__super__.constructor.apply(this, arguments);
          this.el = this.viewEl('<div class="tileItem"></div>');
          this.selectMode = this.opts.selectMode;
        }

        TileItemView.prototype.updateLayout = function() {
          return this.compareView.updateLayout();
        };

        TileItemView.prototype.childWidthChanged = function(view) {
          var base;
          this.updateLayout();
          return typeof (base = this.parent).childWidthChanged === "function" ? base.childWidthChanged(this) : void 0;
        };

        TileItemView.prototype.enableSelection = function(force) {
          if (force == null) {
            force = false;
          }
          if (!(this.selectMode && !force)) {
            this.selectMode = true;
            this.el.addClass('selectMode');
            return this.el.append($('<input type="checkbox" class="select">').click((function(_this) {
              return function(e) {
                e.stopPropagation();
                _this.selected = !_this.selected;
                return true;
              };
            })(this)));
          }
        };

        TileItemView.prototype.disableSelection = function() {
          if (this.selectMode) {
            delete this.selectMode;
            delete this.selected;
            this.el.find('.select').remove();
            return this.el.removeClass('selectMode');
          }
        };

        TileItemView.prototype.update = function(data) {
          var base, base1, el;
          if (this.barItem) {
            this.clearViews();
            this.barItem.destruct();
            if (typeof (base = this.parent).destructChild === "function") {
              base.destructChild(this);
            }
          }
          this.view = this.createView();
          if (data) {
            if (data.type) {
              this.elementType = data.type;
            } else {
              this.elementType = 'Placeholder';
            }
            if (!__classes[this.elementType + "TileItem"]) {
              throw new Error("No class " + this.elementType + "TileItem");
            }
            this.barItem = new __classes[this.elementType + "TileItem"](this, this.opts.barItemArgs);
            this.barItem.init(data, this.opts.barItemArgs);
            if (data.creator) {
              el = $('<span class="userIndicator" />').css('background-color', data.creator.color);
              util.tooltip(el, function() {
                return data.creator.name.get();
              });
              this.el.append(el);
            }
            if (data.selected) {
              this.el.append('<div class="actions"><a href="#" class="dismiss" /><input type="checkbox" class="chosen"></div>');
              this.el.find('.chosen').prop('checked', data.selected.get()).click((function(_this) {
                return function(e) {
                  e.stopPropagation();
                  tracking.event('Compare', 'toggleChosen');
                  return _this.callBackgroundMethod('setSelected', [_this.el.find('.chosen').prop('checked')]);
                };
              })(this));
              this.observeObject(data.selected, (function(_this) {
                return function() {
                  return _this.el.find('.chosen').prop('checked', data.selected.get());
                };
              })(this));
              util.tooltip(this.el.find('.chosen'), 'choose');
              this.el.find('.dismiss').click((function(_this) {
                return function() {
                  tracking.event('Compare', 'dismiss');
                  _this.callBackgroundMethod('dismiss');
                  return false;
                };
              })(this));
              util.tooltip(this.el.find('.dismiss'), 'dismiss');
              if (typeof (base1 = this.barItem).initActions === "function") {
                base1.initActions();
              }
            }
          }
          if (this.selectMode) {
            return this.enableSelection(true);
          }
        };

        TileItemView.prototype.represent = function() {
          TileItemView.__super__.represent.apply(this, arguments);
          if (!this.loadNotify) {
            this.compareView.loadBarItem(this);
            return this.loadNotify = true;
          }
        };

        TileItemView.prototype.destruct = function() {
          var base, ref;
          if (!this.noDestruct) {
            if ((ref = this.barItem) != null) {
              ref.destruct();
            }
            if (typeof (base = this.parent).destructChild === "function") {
              base.destructChild(this);
            }
            return TileItemView.__super__.destruct.apply(this, arguments);
          }
        };

        TileItemView.prototype.onData = function(data1) {
          this.data = data1;
          this.update(this.data.get());
          this.data.observe((function(_this) {
            return function() {
              return _this.update(_this.data.get());
            };
          })(this));
          return this.compareView.barItemLoaded(this);
        };

        TileItemView.prototype.path = function() {
          return this.compareView.path();
        };

        return TileItemView;

      })(View);
    }
  };
});

//# sourceMappingURL=TileItemView.js.map
