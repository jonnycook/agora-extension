// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['views/compare/TileItem', 'util'],
    c: function() {
      var ListTileItem;
      return ListTileItem = (function(_super) {
        __extends(ListTileItem, _super);

        ListTileItem.prototype.html = '';

        ListTileItem.prototype.itemSpacing = 10;

        ListTileItem.prototype.supportsCreateBundle = function() {
          return false;
        };

        ListTileItem.prototype.draggingData = function() {
          return {
            type: this.type,
            immutableContents: this.args.readOnly,
            onRippedOut: (function(_this) {
              return function(el) {};
            })(this),
            onReorder: (function(_this) {
              return function(el, startIndex, endIndex) {
                return _this.callBackgroundMethod('reorder', [startIndex, endIndex]);
              };
            })(this),
            onDragOver: (function(_this) {
              return function() {
                if (_this.state === 'expanded' && !_this.args.readOnly) {
                  if (!_this.expanded) {
                    _this.startedDrag = true;
                    return _this.expand();
                  }
                }
              };
            })(this),
            onDragOut: (function(_this) {
              return function() {
                if (_this.expanded) {
                  return _this.view.shoppingBarView.queueShrink(_this);
                }
              };
            })(this)
          };
        };

        function ListTileItem() {
          ListTileItem.__super__.constructor.apply(this, arguments);
          if (!this.args.readOnly) {
            this.startEdit = (function(_this) {
              return function() {
                return _this.expand();
              };
            })(this);
            this.stopEdit = (function(_this) {
              return function() {
                return _this.shrink();
              };
            })(this);
          }
          this.el.addClass('list');
        }

        ListTileItem.prototype.childrenCount = function() {
          return this.el.children('.element').length;
        };

        ListTileItem.prototype.items = function() {
          return this.el.children('.tileItem');
        };

        ListTileItem.prototype.updateTilesLayout = function(params, state) {
          var actionsEl, backingEl, el, endRow, endX, i, lastSegment, newParams, offsetX, offsetY, segment, startRow, startX, _i, _j, _k, _len, _len1, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
          offsetX = (_ref = (_ref1 = params.offset) != null ? _ref1.x : void 0) != null ? _ref : 0;
          offsetY = (_ref2 = (_ref3 = params.offset) != null ? _ref3.y : void 0) != null ? _ref2 : 0;
          this.el.css({
            left: state.x - offsetX,
            top: state.y - offsetY
          });
          newParams = _.clone(params);
          newParams.offset = {
            x: state.x,
            y: state.y
          };
          startX = state.x;
          startRow = state.rows - 1;
          _ref4 = this.items();
          for (_i = 0, _len = _ref4.length; _i < _len; _i++) {
            el = _ref4[_i];
            el = $(el);
            el.data('view').barItem.updateTilesLayout(newParams, state);
          }
          endRow = endX = null;
          if (state.x === 0) {
            endRow = state.rows - 2;
            endX = params.contWidth + params.margin;
          } else {
            endRow = state.rows - 1;
            endX = state.x;
          }
          this.segments = [];
          if (startRow !== endRow) {
            this.segments.push({
              left: 0,
              top: 0,
              width: params.contWidth - startX,
              height: params.rowHeight
            });
            if (startRow !== endRow - 1) {
              for (i = _j = _ref5 = startRow + 1, _ref6 = endRow - 1; _ref5 <= _ref6 ? _j <= _ref6 : _j >= _ref6; i = _ref5 <= _ref6 ? ++_j : --_j) {
                this.segments.push({
                  left: -startX,
                  top: (i - startRow) * (params.rowHeight + params.margin),
                  width: params.contWidth,
                  height: params.rowHeight
                });
              }
            }
            this.segments.push({
              left: -startX,
              top: (endRow - startRow) * (params.rowHeight + params.margin),
              width: endX - params.margin,
              height: params.rowHeight
            });
          } else {
            this.segments.push({
              left: 0,
              top: 0,
              width: endX - startX - params.margin,
              height: params.rowHeight
            });
          }
          this.el.children('.backing').remove();
          _ref7 = _.clone(this.segments).reverse();
          for (i = _k = 0, _len1 = _ref7.length; _k < _len1; i = ++_k) {
            segment = _ref7[i];
            backingEl = $('<div class="backing" />').prependTo(this.el).css({
              position: 'absolute'
            }).css(segment);
            if (this.segments.length > 1) {
              if (i === 0) {
                backingEl.addClass('right');
              } else if (i === this.segments.length - 1) {
                backingEl.addClass('left');
              } else {
                backingEl.addClass('middle');
              }
            }
          }
          lastSegment = this.segments[this.segments.length - 1];
          actionsEl = this.el.children('.actions');
          return actionsEl.css({
            left: lastSegment.left + lastSegment.width - actionsEl.outerWidth() - 2,
            top: lastSegment.top + 2
          });
        };

        ListTileItem.prototype.updateMasonryLayout = function() {
          var el, y, _i, _len, _ref;
          y = 0;
          if (this.items().length) {
            this.empty = false;
            if (typeof this.onNotEmpty === "function") {
              this.onNotEmpty();
            }
            _ref = this.items();
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              el = _ref[_i];
              el = $(el);
              el.css({
                top: y,
                left: 0
              });
              el.data('view').barItem.updateMasonryLayout();
              y += el.outerHeight() + 40;
            }
            return this.el.height(y - 40 - 12);
          } else {
            this.empty = true;
            if (typeof this.onEmpty === "function") {
              this.onEmpty();
            }
            return this.el.height(185);
          }
        };

        ListTileItem.prototype.shrink = function() {
          if (this.expanded) {
            this.expanded = false;
            this.updateLayout();
            this.widthChanged();
            this.addDrop.remove();
            return this.el.removeClass('hasAddDrop');
          }
        };

        ListTileItem.prototype.expand = function() {
          var el;
          if (!this.expanded) {
            this.expanded = true;
            this.updateLayout();
            this.widthChanged();
            this.el.addClass('hasAddDrop');
            el = $('<a href="#" class="addDrop"></a>').click((function(_this) {
              return function(e) {
                var dialogEl;
                dialogEl = Frame.wrapInFrame('<a href="#" class="computer">Add Computer</a>');
                dialogEl.find('.computer').click(function() {
                  _this.callBackgroundMethod('add', ['computer']);
                  Frame.close(dialogEl);
                  return false;
                });
                dialogEl.appendTo(document.body);
                Frame.fixFrameAboveAndCentered(el, dialogEl);
                e.stopPropagation();
                return false;
              };
            })(this));
            util.initDragging(el, {
              enabled: false,
              acceptsDrop: false,
              onDragOver: (function(_this) {
                return function() {};
              })(this)
            });
            this.addDrop = el;
            return this.el.append(el);
          }
        };

        ListTileItem.prototype.setup = function(data) {
          var classesForLength, contents, prevLength, updateForLength, _base;
          this.contentsView = this.view.view.createView();
          this.state = data.state;
          this.el.addClass(this.state);
          if (this.state === 'expanded') {
            this.el.append($('<div class="element" />'));
            contents = this.contentsView.listInterface(this.el, '.element', (function(_this) {
              return function(el, data, pos, onRemove) {
                var tileItemView;
                tileItemView = _this.view.createView('TileItemView', _this.view.compareView);
                tileItemView.represent(data);
                tileItemView;
                _this.contentsView.trackView(tileItemView);
                onRemove(function() {
                  return tileItemView.destruct();
                });
                return tileItemView.el;
              };
            })(this));
            contents.setDataSource(data.contents);
            updateForLength = (function(_this) {
              return function() {
                if (contents.length()) {
                  return _this.el.removeClass('empty');
                } else {
                  return _this.el.addClass('empty');
                }
              };
            })(this);
            contents.onLengthChanged = updateForLength;
            updateForLength();
            contents.onInsert = (function(_this) {
              return function() {
                _this.widthChanged();
                return _this.view.updateLayout();
              };
            })(this);
            contents.onDelete = (function(_this) {
              return function(el, del) {
                del();
                _this.widthChanged();
                return _this.view.updateLayout();
              };
            })(this);
            contents.onMove = (function(_this) {
              return function() {
                return _this.view.updateLayout();
              };
            })(this);
          } else if (this.state === 'collapsed') {
            this.el.bind('click.list', (function(_this) {
              return function() {
                return _this.view.callBackgroundMethod('click');
              };
            })(this));
            this.el.append($('<span class="image" />'));
            contents = this.view.view.listInterface(this.view.el, '.image', (function(_this) {
              return function(el, data, pos, onRemove) {
                return el.css('background-image', "url('" + data + "')");
              };
            })(this));
            contents.setDataSource(data.contents);
            prevLength = contents.length();
            classesForLength = {
              0: 'empty',
              1: 'oneItem',
              2: 'twoItems',
              3: 'threeItems',
              4: 'fourItems'
            };
            updateForLength = (function(_this) {
              return function() {
                _this.el.removeClass(classesForLength[prevLength]);
                return _this.el.addClass(classesForLength[prevLength = contents.length()]);
              };
            })(this);
            contents.onLengthChanged = updateForLength;
            updateForLength();
          }
          this.view.updateLayout();
          return typeof (_base = this.view.parent).childWidthChanged === "function" ? _base.childWidthChanged(this) : void 0;
        };

        ListTileItem.prototype.onData = function(data) {
          this.setup(data.state.get());
          return this.observeObject(data.state, (function(_this) {
            return function() {
              _this.clearState();
              return _this.setup(data.state.get());
            };
          })(this));
        };

        ListTileItem.prototype.clearState = function() {
          this.el.removeClass(this.state);
          this.contentsView.destruct();
          switch (this.state) {
            case 'collapsed':
              return this.el.find('.image').remove();
            case 'expanded':
              this.el.unbind('.list');
              return this.el.children('.element').remove();
          }
        };

        ListTileItem.prototype.destruct = function() {
          ListTileItem.__super__.destruct.apply(this, arguments);
          return this.clearState();
        };

        return ListTileItem;

      })(TileItem);
    }
  };
});

//# sourceMappingURL=ListTileItem.map
