// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['View', 'util', 'views/compare/TileItemView', 'views/ProductPreviewView', 'views/EditDescriptorView'],
    c: function() {
      var CompareView;
      return CompareView = (function(_super) {
        __extends(CompareView, _super);

        CompareView.prototype.type = 'compare/Compare';

        function CompareView(contentScript, contEl, backEl, _public) {
          this.contEl = contEl;
          this.backEl = backEl;
          this["public"] = _public != null ? _public : false;
          CompareView.__super__.constructor.apply(this, arguments);
          this.el = this.viewEl('<div class="-agora v-compareTile"> <h2 class="title" /> <ul class="breadcrumbs" /> <div class="client" /> </div>');
          if (contEl) {
            this.setContEl(contEl);
          }
          if (this["public"]) {
            this.el.addClass('public');
          }
          this.clientEl = this.el.find('.client');
          this.titleEl = this.el.find('.title');
          this.layout = 'masonry';
          $(window).keyup(this.keyListener = (function(_this) {
            return function(e) {
              var pathLength;
              if (e.keyCode === 27) {
                pathLength = _this.el.find('.breadcrumbs li').length;
                if (pathLength === 1) {
                  return typeof _this.close === "function" ? _this.close() : void 0;
                } else {
                  return _this.callBackgroundMethod('gotoPath', pathLength - 2);
                }
              }
            };
          })(this));
        }

        CompareView.prototype.items = function() {
          return this.el.find('.items > .tileItem');
        };

        CompareView.prototype.setContEl = function(contEl) {
          this.contEl = contEl;
          contEl.resize((function(_this) {
            return function() {
              return _this.updateLayout();
            };
          })(this));
          this.contEl.append(this.menuEl = $('<div class="agoraMenu"> <div class="group"> <div class="item agora"><a href="http://agora.sh" target="_blank" /></div> <!--<div class="item home"><a href="#" /></div>--> </div> <div class="group"> <div class="item selectionMode"> <a href="#" /> <div class="submenu"> <a href="#" class="wrap"><label>wrap</label></a> <a href="#" class="extract"><label>extract</label></a> <a href="#" class="split"><label>split</label></a> <a href="#" class="delete"><label>delete</label></a> <a href="#" class="bundle"><label>bundle</label></a> </div> </div> <div class="item settings"> <a href="#" /> <div class="submenu"> <div class="properties" /> </div> </div> <div class="item share"> <a href="#" /> </div> </div> </div>'));
          if (this["public"]) {
            this.menuEl.addClass('public');
          }
          this.menuEl.find('.selectionMode .submenu').hide();
          this.menuEl.find('.selectionMode').click((function(_this) {
            return function() {
              if (_this.selectMode) {
                _this.event('select');
                _this.disableSelection();
              } else {
                _this.event('cancelSelect');
                _this.enableSelection();
              }
              return false;
            };
          })(this));
          this.menuEl.find('.share a').click((function(_this) {
            return function() {
              util.presentViewAsModalDialog('SocialShare', {
                viewId: _this.id
              }, {
                waitUntilRepresented: true
              });
              return false;
            };
          })(this));
          this.menuEl.find('.selectionMode .wrap').click((function(_this) {
            return function() {
              _this.wrapSelection('decision');
              return false;
            };
          })(this));
          this.menuEl.find('.selectionMode .extract').click((function(_this) {
            return function() {
              _this.extractSelection();
              return false;
            };
          })(this));
          this.menuEl.find('.selectionMode .split').click((function(_this) {
            return function() {
              _this.splitSelection();
              return false;
            };
          })(this));
          this.menuEl.find('.selectionMode .delete').click((function(_this) {
            return function() {
              _this.deleteSelection();
              return false;
            };
          })(this));
          this.menuEl.find('.selectionMode .bundle').click((function(_this) {
            return function() {
              _this.wrapSelection('bundle');
              return false;
            };
          })(this));
          this.menuEl.find('.settings').click((function(_this) {
            return function() {
              return false;
            };
          })(this));
          return util.popoutTrigger(this.menuEl.find('.settings'), {
            side: 'right',
            anchor: 'top',
            el: this.menuEl.find('.settings .submenu')
          });
        };

        CompareView.prototype.eachSelectable = function(cb) {
          return this.el.find('.items').children('.tileItem').each(function() {
            return cb($(this).data('view'));
          });
        };

        CompareView.prototype.enableSelection = function() {
          if (!this.selectMode) {
            this.eachSelectable(function(view) {
              return view.enableSelection();
            });
            this.menuEl.find('.selectionMode').addClass('enabled');
            this.selectionMenuFuncs = util.createPopout(this.menuEl.find('.selectionMode'), {
              side: 'right',
              anchor: 'middle',
              el: this.menuEl.find('.selectionMode .submenu'),
              flexibleHeight: false
            });
            return this.selectMode = true;
          }
        };

        CompareView.prototype.disableSelection = function() {
          if (this.selectMode) {
            this.menuEl.find('.selectionMode').removeClass('enabled');
            this.eachSelectable(function(view) {
              return view.disableSelection();
            });
            this.selectMode = false;
            return this.selectionMenuFuncs.close();
          }
        };

        CompareView.prototype.selected = function() {
          var selected;
          selected = [];
          this.eachSelectable(function(view) {
            if (view.selected) {
              return selected.push(view.id);
            }
          });
          return selected;
        };

        CompareView.prototype.wrapSelection = function(type) {
          this.event('wrap');
          this.callBackgroundMethod('wrap', [type, this.selected()]);
          return this.disableSelection();
        };

        CompareView.prototype.deleteSelection = function() {
          this.event('delete');
          this.callBackgroundMethod('delete', [this.selected()]);
          return this.disableSelection();
        };

        CompareView.prototype.extractSelection = function() {
          this.event('extract');
          this.callBackgroundMethod('extract', [this.selected()]);
          return this.disableSelection();
        };

        CompareView.prototype.splitSelection = function() {
          this.event('split');
          this.callBackgroundMethod('split', [this.selected()]);
          return this.disableSelection();
        };

        CompareView.prototype.updateLayout = function() {
          var contWidth, height, margin, padding, params, rowHeight, size, state;
          if (this.state === 'Decision') {
            if (this.barItemLoadCount) {
              return;
            }
            margin = parseInt(this.clientEl.children('.items').children('.tileItem:first').css('marginBottom'));
            size = this.clientEl.children('.items').children('.tileItem:first').outerWidth();
            if (this["public"] || !this.showingDismissalList) {
              if (this.subDecision) {
                padding = 170;
              } else {
                padding = 100;
              }
            } else {
              padding = (106 + 60) * 2;
            }
            contWidth = (Math.floor((this.contEl.width() - padding) / (size + margin)) * (size + margin)) - margin;
            this.clientEl.css({
              width: contWidth
            });
            this.el.width(contWidth);
            this.el.height('');
            this.clientEl.children('.items').css({
              width: contWidth
            });
            this.clientEl.find('.dismissalList').css({
              top: this.clientEl.offset().top - (this.clientEl.find('.items').offset().top),
              marginTop: -65
            });
            switch (this.layout) {
              case 'tiles':
                rowHeight = size;
                params = {
                  margin: margin,
                  contWidth: contWidth,
                  rowHeight: rowHeight
                };
                state = {
                  x: 0,
                  y: 0,
                  cols: 0,
                  rows: 1,
                  maxWidth: 0
                };
                this.items().each(function() {
                  var itemEl;
                  itemEl = $(this);
                  return itemEl.data('view').barItem.updateTilesLayout(params, state);
                });
                height = state.rows * rowHeight  + (state.rows - 1) * margin;
                this.clientEl.children('.items').css({
                  height: state.rows * rowHeight  + (state.rows - 1) * margin
                });
                return this.clientEl.css({
                  height: height
                });
              case 'masonry':
                this.items().each(function() {
                  var itemEl;
                  itemEl = $(this);
                  if (itemEl.data('view').barItem) {
                    return itemEl.data('view').barItem.updateMasonryLayout();
                  }
                });
                this.clientEl.children('.items').masonry('reloadItems').masonry({
                  columnWidth: size,
                  itemSelector: '.rootItem',
                  gutter: margin
                });
                return this.clientEl.css({
                  height: this.clientEl.children('.items').height() - margin
                });
            }
          } else if (this.state === 'Product') {
            contWidth = $(window).width() - 220;
            this.clientEl.css({
              width: contWidth
            });
            this.el.width(contWidth);
            this.el.height($(window).height() - 100);
            return this.clientEl.outerHeight(this.el.height() - (this.clientEl.offset().top - this.el.offset().top) - 40);
          }
        };

        CompareView.prototype.childWidthChanged = function(view) {
          return this.updateLayout();
        };

        CompareView.prototype.barItemLoadCount = 0;

        CompareView.prototype.loadBarItem = function(barItem) {
          return ++this.barItemLoadCount;
        };

        CompareView.prototype.barItemLoaded = function(barItem) {
          --this.barItemLoadCount;
          if (!this.barItemLoadCount) {
            this.updateLayout();
            return this.el.animate({
              opacity: 1
            }, 100);
          }
        };

        CompareView.prototype.initBreadcrumbs = function(breadcrumbs) {
          var breadcrumb, breadcrumbsEl, _i, _len, _results;
          breadcrumbsEl = this.el.children('.breadcrumbs');
          breadcrumbsEl.html('');
          _results = [];
          for (_i = 0, _len = breadcrumbs.length; _i < _len; _i++) {
            breadcrumb = breadcrumbs[_i];
            _results.push((function(_this) {
              return function(breadcrumb) {
                var breadcrumbEl;
                breadcrumbEl = $('<li><span class="images" /></li>').appendTo(breadcrumbsEl);
                breadcrumbEl.click((function() {
                  return _this.callBackgroundMethod('gotoPath', breadcrumbEl.index());
                }));
                if (View.isClientArray(breadcrumb)) {
                  breadcrumbEl.find('.images').append($('<span class="image" />'));
                  return util.initMosaic(_this, breadcrumbEl, '.image', breadcrumb);
                } else if (View.isClientValue(breadcrumb)) {
                  return breadcrumbEl.find('.images').css({
                    backgroundImage: "url('" + (breadcrumb.get()) + "')"
                  });
                }
              };
            })(this)(breadcrumb));
          }
          return _results;
        };

        CompareView.prototype.configure = function(data) {
          var arrowEl, contents, dismissalListIface, lastBreadcrumbEl, opened, productPreviewView, updateForLengthChanged, updateIcon, updateProperties;
          if (this.clientView) {
            this.clientView.clear();
          } else {
            this.clientView = this.view();
          }
          this.clientEl.html('');
          this.titleEl.html('');
          if (this.state) {
            this.el.removeClass(this.state);
          }
          if (this.state === 'Decision') {
            util.terminateDragging(this.contEl);
          }
          this.state = data.state;
          this.el.addClass(this.state);
          this.backEl.removeClass('v-compareTile-background');
          this.clientEl.removeClass('frame');
          this.el.children('.breadcrumbs').hide();
          this.initBreadcrumbs(data.breadcrumbs);
          if (data.breadcrumbs.length > 1) {
            this.backEl.addClass('v-compareTile-background');
            this.clientEl.addClass('frame');
            this.el.children('.breadcrumbs').show();
            lastBreadcrumbEl = this.el.children('.breadcrumbs').children('li:last');
            arrowEl = $('<span class="-arrow" />').appendTo(this.clientEl);
            arrowEl.css({
              position: 'absolute',
              top: -42,
              left: lastBreadcrumbEl.offset().left - this.el.offset().left + lastBreadcrumbEl.width() / 2 - arrowEl.width() / 2
            });
            _tutorial('Workspace/ReturnToParent', this.el.children('.breadcrumbs').children('li:first'));
          }
          if (data.state === 'Decision') {
            if (data.breadcrumbs.length > 1) {
              this.subDecision = true;
            } else {
              this.subDecision = false;
            }
            this.clientEl.append('<div class="properties" /> <div class="items"> <div class="tileItem" /> </div> <div class="dismissalList"> <a href="#" class="clear" /> <ul> <li> <a href="#" class="restore" /> <a href="#" class="remove" /> </li> </ul> </div>');
            this.clientEl.find('.items').data('view', this);
            if (!this["public"]) {
              util.initDragging(this.clientEl.find('.items'), {
                enabled: false,
                root: true,
                rootZIndex: 0,
                acceptsDrop: true,
                onDroppedOn: (function(_this) {
                  return function(el, fromEl) {
                    _this.onDroppedOn(el, fromEl, _this.el.find('.items'));
                    el.remove();
                    return false;
                  };
                })(this)
              });
              util.initDragging(this.contEl, {
                enabled: false,
                root: true,
                rootZIndex: -1,
                acceptsDrop: true,
                onDroppedOn: (function(_this) {
                  return function(el, fromEl) {
                    _this.onDroppedOn(el, fromEl, _this.el.find('.items'));
                    el.remove();
                    return false;
                  };
                })(this)
              });
            }
            this.clientEl.children('.items').addClass(this.layout);
            contents = this.clientView.listInterface(this.el, '.items > .tileItem', (function(_this) {
              return function(el, data, pos, onRemove) {
                var tileItemView;
                tileItemView = _this.clientView.createView('TileItemView', _this, {
                  selectMode: _this.selectMode
                });
                tileItemView.represent(data);
                tileItemView;
                onRemove(function() {
                  return tileItemView.destruct();
                });
                tileItemView.el.addClass('rootItem');
                return tileItemView.el;
              };
            })(this));
            contents.onDelete = (function(_this) {
              return function(el, del) {
                del();
                return _this.updateLayout();
              };
            })(this);
            contents.onInsert = (function(_this) {
              return function(el) {
                return _this.updateLayout();
              };
            })(this);
            contents.onMove = (function(_this) {
              return function() {
                return _this.updateLayout();
              };
            })(this);
            this.el.find('.dismissalList').hide();
            this.el.find('.dismissalList .clear').click((function(_this) {
              return function() {
                _this.callBackgroundMethod('clearDismissalList');
                return false;
              };
            })(this));
            util.tooltip(this.el.find('.dismissalList .clear'), 'clear', {
              position: 'below'
            });
            this.el.css({
              opacity: 0
            });
            this.barItemLoadCount = 0;
            if (data.contents) {
              contents.setDataSource(data.contents);
              if (this.barItemLoadCount === 0) {
                this.updateLayout();
                this.el.css({
                  opacity: ''
                });
              }
            }
            if (data.dismissalList) {
              dismissalListIface = this.clientView.listInterface(this.el.find('.dismissalList ul'), 'li', (function(_this) {
                return function(el, data, pos, onRemove) {
                  var view;
                  view = _this.clientView.createView();
                  onRemove(function() {
                    return view.destruct();
                  });
                  if (typeof data === 'string') {
                    el.css('background-image', "url('" + data + "')");
                  } else {
                    el.append($('<span class="image" />'));
                    util.initMosaic(view, el, '.image', data);
                  }
                  el.find('.restore').click(function() {
                    _this.event('restore');
                    _this.callBackgroundMethod('restore', [el.index()]);
                    return false;
                  });
                  el.find('.remove').click(function() {
                    _this.event('removeDismissed');
                    _this.callBackgroundMethod('removeDismissed', [el.index()]);
                    return false;
                  });
                  util.tooltip(el.find('.remove'), 'remove');
                  return el;
                };
              })(this));
              dismissalListIface.setDataSource(data.dismissalList);
              updateForLengthChanged = (function(_this) {
                return function() {
                  if (dismissalListIface.length()) {
                    _this.showingDismissalList = true;
                    _this.el.find('.dismissalList').show();
                  } else {
                    _this.showingDismissalList = false;
                    _this.el.find('.dismissalList').hide();
                  }
                  return _this.updateLayout();
                };
              })(this);
              dismissalListIface.onLengthChanged = updateForLengthChanged;
              updateForLengthChanged();
            }
            this.titleEl.html('<span class="icon" /><span class="descriptor" /><a href="#" class="edit" />');
            opened = false;
            this.titleEl.find('.edit').click((function(_this) {
              return function() {
                var editDescriptorView, frame;
                if (!opened) {
                  opened = true;
                  editDescriptorView = new EditDescriptorView(_this.contentScript);
                  editDescriptorView.close = function() {
                    return frame.close();
                  };
                  editDescriptorView.represent(data.args.decisionId);
                  frame = Frame.frameAround(_this.titleEl.find('.edit'), editDescriptorView.el, {
                    type: 'balloon',
                    distance: 15,
                    close: function() {
                      frame.close();
                      return opened = false;
                    }
                  });
                  tracking.page("" + (_this.path()) + "/" + (editDescriptorView.pathElement()));
                  _this.event('editDescriptor');
                }
                return false;
              };
            })(this));
            util.tooltip(this.titleEl.find('.edit'), 'edit', {
              position: 'below'
            });
            if (data.descriptor) {
              this.clientView.valueInterface(this.titleEl.find('.descriptor')).setDataSource(data.descriptor);
            }
            updateIcon = (function(_this) {
              return function() {
                var _ref;
                icons.setIcon(_this.titleEl.find('.icon'), (_ref = data.icon.get()) != null ? _ref : 'list', {
                  size: 'small',
                  color: 'white'
                });
                return _this.titleEl.find('.icon').removeClass('t-item');
              };
            })(this);
            data.icon.observe(updateIcon);
            updateIcon();
            updateProperties = (function(_this) {
              return function() {
                var prop, propertiesEl, _i, _len, _ref, _results;
                propertiesEl = _this.menuEl.find('.settings .properties');
                propertiesEl.html('');
                if (data.properties.get()) {
                  _ref = data.properties.get();
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    prop = _ref[_i];
                    _results.push((function(prop) {
                      var propEl;
                      if ('count' in prop) {
                        propertiesEl.append(propEl = $("<div class='property'><input type='checkbox' class='selected'> <label>" + prop.label + "&nbsp;(" + prop.count + ")</label></div>"));
                        if (prop.count === 0) {
                          propEl.addClass('none');
                        }
                      } else {
                        propertiesEl.append(propEl = $("<div class='property'><input type='checkbox' class='selected'> <label>" + prop.label + "</label></div>"));
                      }
                      propEl.find('.selected').change(function() {
                        _this.event('toggleProperty');
                        return _this.callBackgroundMethod('setProperty', [prop.path, propEl.find('.selected').prop('checked')]);
                      }).prop('checked', prop.selected.get());
                      return propEl.click(function() {
                        propEl.find('.selected').prop('checked', !propEl.find('.selected').prop('checked'));
                        return propEl.find('.selected').triggerHandler('change');
                      });
                    })(prop));
                  }
                  return _results;
                }
              };
            })(this);
            updateProperties();
            data.properties.observe(updateProperties);
          } else if (data.state === 'Product') {
            productPreviewView = this.clientView.createView('ProductPreviewView', {
              "public": this["public"]
            });
            productPreviewView.represent(data.productId, (function(_this) {
              return function() {
                return productPreviewView.el.children('.head').appendTo(_this.titleEl);
              };
            })(this));
            productPreviewView.el.appendTo(this.clientEl);
            tracking.page("" + (this.path()) + "/" + (productPreviewView.pathElement()));
          }
          return this.updateLayout();
        };

        CompareView.prototype.onDroppedOn = function(el, fromEl, toEl, dropAction) {
          return util.resolveDraggingData(el, (function(_this) {
            return function(data) {
              if (fromEl) {
                _this.event('move');
                return _this.callBackgroundMethod('move', [
                  data, {
                    view: toEl.data('view').id
                  }, dropAction
                ]);
              } else {
                _this.event('drop');
                return _this.callBackgroundMethod('drop', [
                  data, {
                    view: toEl.data('view').id
                  }, dropAction
                ]);
              }
            };
          })(this));
        };

        CompareView.prototype.destruct = function() {
          CompareView.__super__.destruct.apply(this, arguments);
          return $(window).unbind('keyup', this.keyListener);
        };

        CompareView.prototype.onData = function(data) {
          this.configure(data.get());
          data.observe((function(_this) {
            return function() {
              return _this.configure(data.get());
            };
          })(this));
          return _tutorial('Workspace');
        };

        return CompareView;

      })(View);
    }
  };
});

//# sourceMappingURL=CompareView.map
