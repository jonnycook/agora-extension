// Generated by CoffeeScript 1.10.0
define(function() {
  return {
    d: ['util'],
    c: function() {
      var TileItem;
      return TileItem = (function() {
        function TileItem(view, args1) {
          this.view = view;
          this.args = args1 != null ? args1 : {};
          this.el = this.view.el;
          this.elementType = this.view.elementType;
        }

        TileItem.prototype.supportsCreateBundle = function() {
          return true;
        };

        TileItem.prototype.callBackgroundMethod = function(name, args) {
          return this.view.callBackgroundMethod(name, args);
        };

        TileItem.prototype.observeObject = function(obj, observer) {
          return this.view.view.observeObject(obj, observer);
        };

        TileItem.prototype.widthChanged = function() {
          return this.view.updateLayout();
        };

        TileItem.prototype.updateTilesLayout = function(params, state) {
          var width;
          width = this.el.width();
          if (state.rows === 1) {
            ++state.cols;
          }
          if (params.offset) {
            this.el.css({
              left: state.x - params.offset.x,
              top: state.y - params.offset.y
            });
          } else {
            this.el.css({
              left: state.x,
              top: state.y
            });
          }
          state.x += width;
          if (state.x > state.maxWidth) {
            state.maxWidth = state.x;
          }
          state.x += params.margin;
          if (state.x + width > params.contWidth) {
            state.x = 0;
            ++state.rows;
            return state.y += params.rowHeight + params.margin;
          }
        };

        TileItem.prototype.updateMasonryLayout = function() {};

        TileItem.prototype.init = function(data) {
          var draggingData, orgDraggingData, ref, ref1;
          if (_.isFunction(this.html)) {
            this.el.html(this.html(this.view.compareView.layout));
          } else {
            this.el.html(this.html);
          }
          this.el.addClass(this.elementType.toLowerCase());
          this.el.addClass(this.view.compareView.layout);
          this.onData(data.barItemData, data);
          if (!this.view.compareView["public"]) {
            draggingData = null;
            if ('draggingData' in this.args) {
              if (this.args.draggingData) {
                draggingData = (ref = typeof this.draggingData === "function" ? this.draggingData() : void 0) != null ? ref : {};
                _.extend(draggingData, this.args.draggingData);
                util.initDragging(this.el, draggingData);
              }
            } else {
              draggingData = (ref1 = typeof this.draggingData === "function" ? this.draggingData() : void 0) != null ? ref1 : {};
            }
            orgDraggingData = _.clone(draggingData);
            _.extend(draggingData, {
              type: this.elementType,
              helper: (function(_this) {
                return function(event, el, offset) {
                  var barItemView;
                  barItemView = new BarItemView(_this.view.contentScript, {
                    queueShrink: function() {},
                    addEditListener: function() {},
                    itemSpacing: 10,
                    animateSpeed: 10,
                    stopShrink: function() {},
                    removeEditListener: function() {},
                    mouseEnteredBarItemView: function() {},
                    mouseLeftBarItemView: function() {},
                    loadBarItem: function() {},
                    barItemLoaded: function() {
                      offset.x = barItemView.el.width() - 10;
                      return offset.y = barItemView.el.height() - 10;
                    },
                    stopDrag: function() {},
                    startDrag: function() {}
                  });
                  barItemView.parent = {
                    childWidthChanged: function() {}
                  };
                  barItemView.represent(_this.view.args);
                  barItemView.el.addClass('dragging');
                  barItemView.el.data('dragging', {
                    data: {
                      view: _this.view.id
                    }
                  });
                  return barItemView.el;
                };
              })(this),
              cancel: (function(_this) {
                return function() {
                  return !_this.view.id;
                };
              })(this),
              start: (function(_this) {
                return function(event, ui) {
                  _this.el.remove();
                  if (orgDraggingData.start) {
                    return orgDraggingData.start.apply(_this, arguments);
                  }
                };
              })(this),
              stop: (function(_this) {
                return function() {
                  _this.el.removeClass('dragging');
                  if (orgDraggingData.stop) {
                    return orgDraggingData.stop.apply(_this, arguments);
                  }
                };
              })(this),
              onDroppedOn: (function(_this) {
                return function(el, fromEl, dropAction) {
                  _this.view.compareView.onDroppedOn(el, fromEl, _this.el, dropAction);
                  el.remove();
                  if (orgDraggingData.onDroppedOn) {
                    return orgDraggingData.onDroppedOn.apply(_this, arguments);
                  } else {
                    return false;
                  }
                };
              })(this),
              onGlobal: (function(_this) {
                return function() {
                  _this.view.noDestruct = true;
                  return _this.view.separate();
                };
              })(this),
              onDropped: (function(_this) {
                return function(receivingEl) {
                  delete _this.view.noDestruct;
                  if (!receivingEl) {
                    _this.callBackgroundMethod('delete');
                    return _this.view.destruct();
                  }
                };
              })(this),
              onDraggedOver: (function(_this) {
                return function(el, draggingEl) {
                  if (el) {
                    draggingEl.addClass('adding');
                    draggingEl.removeClass('removing');
                  } else {
                    draggingEl.removeClass('adding');
                    draggingEl.addClass('removing');
                  }
                  if (orgDraggingData.onDraggedOver) {
                    return orgDraggingData.onDraggedOver.apply(_this, arguments);
                  }
                };
              })(this)
            });
            return util.initDragging(this.el, draggingData);
          }
        };

        TileItem.prototype.destruct = function() {
          this.el.unbind();
          this.el.removeClass(this.elementType.toLowerCase());
          return this.el.html('');
        };

        return TileItem;

      })();
    }
  };
});

//# sourceMappingURL=TileItem.js.map
