// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(function() {
  return {
    d: ['View', 'Frame', 'views/OffersView', 'views/DataView', 'views/AddFeelingView', 'views/AddArgumentView'],
    c: function() {
      var ProductPopupView;
      return ProductPopupView = (function(superClass) {
        extend(ProductPopupView, superClass);

        ProductPopupView.prototype.type = 'ProductPopup';

        function ProductPopupView(contentScript, opts) {
          this.opts = opts != null ? opts : {};
          ProductPopupView.__super__.constructor.apply(this, arguments);
          this.el = this.viewEl('<div class="-agora v-productPopup"> <span class="p-picture"></span> <a href="#" class="p-title"></a> <a href="#" class="p-site"></a> <span class="ratingInfo"><span class="rating">' + util2.ratingHtml + '</span><span class="reviews">Loading...</span></span> <span class="price" /> <!--<a href="#" class="menu" />--> <ul class="subAdd"> <li class="feelings"><a href="#">Feelings</a></li> <li class="arguments"><a href="#">Pros and cons</a></li> <li class="attachments"><a href="#">Attached clips</a></li> </ul> <div class="productSidebar" /> </div>');
          if (this.opts.unconstrainedPictureHeight) {
            this.el.addClass('unconstrainedPictureHeight');
            this.el.find('.p-picture').append('<img>');
          }
          this.productMenuView = this.createView('ProductMenu', this.el.find('.productSidebar'), {
            orientation: 'horizontal',
            pinSidebar: (function(_this) {
              return function() {
                return _this.el.addClass('pinSidebar');
              };
            })(this),
            unpinSidebar: (function(_this) {
              return function() {
                return _this.el.removeClass('pinSidebar');
              };
            })(this),
            addEl: (function(_this) {
              return function(el) {
                return typeof _this.addEl === "function" ? _this.addEl(el) : void 0;
              };
            })(this),
            removeEl: (function(_this) {
              return function(el) {
                return typeof _this.removeEl === "function" ? _this.removeEl(el) : void 0;
              };
            })(this)
          });
          if (this.opts.pictureClickHandler) {
            this.el.find('.p-picture').mouseup(this.opts.pictureClickHandler);
          } else {
            this.el.find('.p-picture').mouseup((function(_this) {
              return function() {
                if (typeof _this.close === "function") {
                  _this.close(false);
                }
                util.openProductPreview(_this.args, _this);
                return false;
              };
            })(this));
          }
        }

        ProductPopupView.prototype.onRepresent = function(args) {
          this.createView('ProductPrice', this.el.find('.price')).represent(args, (function(_this) {
            return function() {
              return setTimeout((function() {
                return typeof _this.sizeChanged === "function" ? _this.sizeChanged() : void 0;
              }), 0);
            };
          })(this));
          return this.productMenuView.represent(args);
        };

        ProductPopupView.prototype.onData = function(data) {
          var image, lastEmotion, mouseDowned, price, site, title, updateForImage, updateForLastFeeling;
          title = this.el.find('.p-title');
          site = this.el.find('.p-site');
          image = this.el.find('.p-picture');
          price = this.el.find('.productOffer .price');
          if (data.title.get()) {
            title.html(data.title.get());
          }
          this.observe(data.title, (function(_this) {
            return function(mutation) {
              title.html(mutation.value);
              return typeof _this.sizeChanged === "function" ? _this.sizeChanged() : void 0;
            };
          })(this));
          if (data.rating && data.ratingCount) {
            if (data.rating.get()) {
              util2.setRating(this.el.find('.ratingInfo .rating'), data.rating.get());
            }
            data.rating.observe((function(_this) {
              return function() {
                util2.setRating(_this.el.find('.ratingInfo .rating'), data.rating.get());
                return typeof _this.sizeChanged === "function" ? _this.sizeChanged() : void 0;
              };
            })(this));
            this.valueInterface(this.el.find('.ratingInfo .reviews')).setDataSource(data.ratingCount);
          } else {
            this.el.find('.ratingInfo').remove();
          }
          title.attr({
            href: data.url
          });
          site.html(data.site.name);
          site.attr({
            href: data.site.url
          });
          updateForImage = this.opts.unconstrainedPictureHeight ? (function(_this) {
            return function() {
              var height, img, updateForSize, updateMenuPos;
              updateForSize = function() {
                image.css('height', img.height());
                if (typeof _this.sizeChanged === "function") {
                  _this.sizeChanged();
                }
                return updateMenuPos();
              };
              updateMenuPos = function() {
                return _this.el.find('.productSidebar').css({
                  top: image.height() - _this.el.find('.productSidebar').height() + 9
                });
              };
              img = image.find('img');
              height = img.height();
              clearInterval(_this.imageResizeTimerId);
              _this.imageResizeTimerId = setInterval((function() {
                if (img.height() !== height) {
                  updateForSize();
                  clearInterval(_this.imageResizeTimerId);
                }
                return height = img.height();
              }), 100);
              img.attr('src', data.image.get()).load(function() {
                updateForSize();
                return clearInterval(_this.imageResizeTimerId);
              });
              if (img.height()) {
                return updateForSize();
              }
            };
          })(this) : (function(_this) {
            return function() {
              if (data.image.get()) {
                return image.css({
                  backgroundImage: "url('" + (data.image.get()) + "')"
                });
              }
            };
          })(this);
          updateForImage();
          data.image.observe(updateForImage);
          this.el.append('<span class="feelingBadge"><span class="icon" /><span class="text">buffalo</span></span>');
          lastEmotion = null;
          updateForLastFeeling = (function(_this) {
            return function() {
              var emotionClass;
              if (lastEmotion) {
                _this.el.find('.feelingBadge').removeClass(lastEmotion);
              }
              if (data.lastFeeling.get()) {
                _this.el.find('.feelingBadge').show();
                _this.el.find('.feelingBadge .text').html(data.lastFeeling.get().thought);
                emotionClass = util.emotionClass(data.lastFeeling.get().positive, data.lastFeeling.get().negative);
                _this.el.find('.feelingBadge').addClass(emotionClass);
                return lastEmotion = emotionClass;
              } else {
                return _this.el.find('.feelingBadge').hide();
              }
            };
          })(this);
          data.lastFeeling.observe(updateForLastFeeling);
          updateForLastFeeling();
          if (data.selected) {
            mouseDowned = false;
            this.el.append('<div class="actions"><!--<a href="#" class="dismiss" />--><input type="checkbox" class="chosen"></div>');
            this.el.find('.chosen').prop('checked', data.selected.get()).mousedown(function() {
              return mouseDowned = true;
            }).mouseup(function(e) {
              if (!mouseDowned) {
                $(this).trigger('click');
              }
              e.stopPropagation();
              return mouseDowned = false;
            }).change((function(_this) {
              return function() {
                return _this.callBackgroundMethod('setSelected', [_this.el.find('.chosen').prop('checked')]);
              };
            })(this)).click((function(_this) {
              return function(e) {
                _this.event('toggleChosen');
                return e.stopPropagation();
              };
            })(this));
            this.observeObject(data.selected, (function(_this) {
              return function() {
                return _this.el.find('.chosen').prop('checked', data.selected.get());
              };
            })(this));
            util.tooltip(this.el.find('.chosen'), 'choose');
            this.el.find('.dismiss').mouseup((function(_this) {
              return function() {
                _this.callBackgroundMethod('dismiss');
                return false;
              };
            })(this)).click(function() {
              return false;
            });
            util.tooltip(this.el.find('.dismiss'), 'dismiss');
            return typeof this.sizeChanged === "function" ? this.sizeChanged() : void 0;
          }
        };

        ProductPopupView.prototype.shown = function() {
          this.productMenuView.shown();
          this.event('open');
          return _tutorial('AccessProductPortalFromPopup', this.el.find('.p-picture'), 'side');
        };

        ProductPopupView.prototype.destruct = function() {
          ProductPopupView.__super__.destruct.apply(this, arguments);
          return clearInterval(this.imageResizeTimerId);
        };

        return ProductPopupView;

      })(View);
    }
  };
});

//# sourceMappingURL=ProductPopupView.js.map
