// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['View', 'util', 'icons'],
    c: function() {
      var DataView;
      return DataView = (function(_super) {
        __extends(DataView, _super);

        DataView.prototype.type = 'Data';

        function DataView() {
          var addDataView, opened;
          DataView.__super__.constructor.apply(this, arguments);
          this.el = this.viewEl('<div class="v-data"> <div class="cont"> <ul class="data"> <li /> </ul> <div class="addWrapper"><input type="text" class="add" placeholder="Paste URL to add content"></div> </div> </div>');
          util.trapScrolling(this.el.find('.data'));
          opened = false;
          addDataView = null;
          this.el.find('.add').keyup((function(_this) {
            return function(e) {
              if (e.keyCode === 13) {
                if (opened) {
                  addDataView.submit();
                  return _this.event('addData');
                }
              } else {
                if (_this.el.find('.add').val() !== '') {
                  if (!opened) {
                    opened = true;
                    _this.event('beginAddData');
                    addDataView = _this.createView('AddData', {
                      type: 'connected',
                      url: _this.el.find('.add').val(),
                      args: _this.args
                    });
                    addDataView.onSubmit = function() {
                      return _this.el.find('.add').val('');
                    };
                    _this.popout = util.createPopout(_this.el.find('.addWrapper'), {
                      el: addDataView.el,
                      side: 'left',
                      anchor: 'middle',
                      distance: 17,
                      onClose: function() {
                        delete _this.popout;
                        return opened = false;
                      }
                    });
                    return addDataView.close = _this.popout.close;
                  }
                } else if (opened) {
                  _this.event('cancelAddData');
                  return _this.popout.close();
                }
              }
            };
          })(this));
        }

        DataView.prototype.onData = function(data) {
          var dataIface, updateSize;
          this.data = data;
          dataIface = this.listInterface(this.el, '.data li', (function(_this) {
            return function(el, data, pos, onRemove) {
              var updateForUrl, view;
              view = _this.view();
              onRemove(function() {
                return view.destruct();
              });
              el.addClass(data.type.get());
              switch (data.type.get()) {
                case 'plainText':
                  el.html("<span class='text' /> <a href='#' target='_blank' class='url'>Page</a> <span class='date' />");
                  view.valueInterface(el.find('.text')).setDataSource(data.text);
                  view.valueInterface(el.find('.url')).setDataSource(data.url, function(value, el) {
                    return el.attr('href', value);
                  });
                  break;
                case 'video':
                  el.html('<a href="#" class="title" /> <span class="videoWrapper" />');
                  view.valueInterface(el.find('.title')).setDataSource(data.title);
                  updateForUrl = function() {
                    var matches;
                    matches = /https?:\/\/www\.youtube\.com\/watch\?.*?v=(.*?)(&|$)/.exec(data.url.get());
                    if (matches) {
                      el.find('.videoWrapper').html("<iframe class='videoPlayer' width='314' height='177' src='//www.youtube.com/embed/" + matches[1] + "' frameborder='0' allowfullscreen></iframe>");
                    }
                    return el.find('.title').attr('href', data.url.get());
                  };
                  updateForUrl();
                  data.url.observe(updateForUrl);
                  break;
                case 'image':
                  el.html('<a href="#" class="title" target="_blank" /> <a class="image" target="_blank" /> <span class="date" />');
                  updateForUrl = function() {
                    el.find('.image').css({
                      backgroundImage: "url('" + (data.url.get()) + "')"
                    });
                    return el.find('.image').attr('href', data.url.get());
                  };
                  data.url.observe(updateForUrl);
                  updateForUrl();
                  view.valueInterface(el.find('.title')).setDataSource(data.title);
                  view.valueInterface(el.find('.title'), 'href').setDataSource(data.url);
                  break;
                case 'url':
                  el.html('<a class="title" target="_blank" /> <span class="date" />');
                  view.valueInterface(el.find('.title')).setDataSource(data.title);
                  view.valueInterface(el.find('.title'), 'href').setDataSource(data.url);
              }
              el.append("<a href='#' class='delete' />").find('.delete').click(function() {
                _this.event('delete');
                _this.callBackgroundMethod('delete', data.id);
                return false;
              });
              util.tooltip(el.find('.delete'), 'delete', {
                position: 'below'
              });
              return el;
            };
          })(this));
          if (data.length()) {
            this.el.removeClass('empty');
          } else {
            this.el.addClass('empty');
          }
          updateSize = (function(_this) {
            return function() {
              var height, lastEl;
              if (dataIface.length()) {
                _this.el.removeClass('empty');
              } else {
                _this.el.addClass('empty');
              }
              if (_this.popout) {
                _this.popout.updatePos();
              }
              lastEl = _this.el.find('.data li:last');
              height = 30;
              if (lastEl.length) {
                height += lastEl.offset().top - _this.el.find('.data').offset().top + lastEl.outerHeight() + 10;
              }
              _this.el.find('.cont').css({
                height: height
              });
              return typeof _this.sizeChanged === "function" ? _this.sizeChanged() : void 0;
            };
          })(this);
          dataIface.setDataSource(data);
          dataIface.onLengthChanged = updateSize;
          return setTimeout(updateSize, 0);
        };

        DataView.prototype.shown = function() {
          this.event('open');
          return _tutorial('AddData', this.el.find('.add'));
        };

        return DataView;

      })(View);
    }
  };
});

//# sourceMappingURL=DataView.map
