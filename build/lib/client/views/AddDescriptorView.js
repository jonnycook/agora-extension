// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['View', 'util', 'icons'],
    c: function() {
      var AddDescriptorView;
      return AddDescriptorView = (function(_super) {
        __extends(AddDescriptorView, _super);

        AddDescriptorView.prototype.type = 'AddDescriptor';

        function AddDescriptorView() {
          var descriptorEl, el, parseTimerId;
          AddDescriptorView.__super__.constructor.apply(this, arguments);
          this.el = this.viewEl('<div class="v-addDescriptor t-dialog"> <h2>Add something</h2> <div class="content"> <form class="dark"> <div class="group descriptor"> <div class="field"><input type="text" class="descriptor" placeholder="Describe what you are looking for"></div> </div> <div class="group"> <div class="field"><label>Product</label> <input type="text" name="product" placeholder="Product"></div> <div class="field"><label>Purpose</label> <input type="text" name="purpose" placeholder="Purpose"></div> <div class="field"><label>Context</label> <input type="text" name="context" placeholder="Context"></div> </div> <div class="group properties"> <div class="field"><label>Properties</label> <input type="text" name="properties" placeholder="Properties"></div> </div> <div class="group recipient"> <div class="field"><label>Recipient</label> <input type="text" name="recipient" placeholder="Recipient"></div> <div class="field"><label>Relationship</label> <input type="text" name="recipient.relationship" placeholder="Relationship"></div> <div class="field"><label>Age</label> <input type="text" name="recipient.age" placeholder="Age"></div> <div class="field"> <label>Sex</label> <select name="recipient.sex"> <option>Sex</option> <option name="male">Male</option> <option name="female">Female</option> </select> </div> </div> <div class="group gift"> <div class="field"><label>Gift</label> <input type="checkbox" name="gift"> </div> <div class="field gift"><label>Occasion</label> <input type="text" name="gift.occasion" placeholder="Occasion"></div> </div> </form> <span class="t-item -agora-newItem" /> </div> </div>');
          icons.setIcon(this.el.find('.-agora-newItem'), 'list');
          parseTimerId = null;
          descriptorEl = this.el.find('input.descriptor');
          descriptorEl.keydown((function(_this) {
            return function() {
              clearTimeout(parseTimerId);
              return parseTimerId = setTimeout((function() {
                return _this.callBackgroundMethod('parse', [descriptorEl.val()]);
              }), 500);
            };
          })(this));
          util.styleSelect(this.el.find('[name="recipient.sex"]'), {
            autoSize: false
          });
          el = this.el.find('.-agora-newItem');
          util.tooltip(this.el.find('.-agora-newItem'), ((function(_this) {
            return function() {
              return descriptorEl.val();
            };
          })(this)), {
            position: 'below'
          });
          util.initDragging(this.el.find('.-agora-newItem'), {
            data: (function(_this) {
              return function(cb) {
                var descriptor, _ref;
                descriptor = (_ref = _this.descriptor) != null ? _ref : {};
                descriptor.descriptor = descriptorEl.val();
                return cb({
                  action: 'new',
                  type: 'descriptor',
                  descriptor: descriptor
                });
              };
            })(this),
            context: 'page',
            onDraggedOver: function(activeEl, helperEl) {
              if (activeEl) {
                return helperEl.addClass('adding');
              } else {
                return helperEl.removeClass('adding');
              }
            },
            helper: function() {
              return el.clone().addClass('-agora dragging');
            },
            start: function() {
              return el.css({
                opacity: .5
              });
            },
            stop: (function(_this) {
              return function(event, ui) {
                el.animate({
                  opacity: 1
                });
                ui.helper.detach();
                return _this.close();
              };
            })(this)
          });
          setTimeout(((function(_this) {
            return function() {
              return descriptorEl.get(0).focus();
            };
          })(this)), 50);
        }

        AddDescriptorView.prototype.onData = function(data) {
          this.data = data;
          return data.observe((function(_this) {
            return function() {
              var descriptor, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9;
              descriptor = _this.descriptor = data.get().descriptor;
              _this.el.find('[name="product"]').val((_ref = (_ref1 = descriptor.product) != null ? _ref1.type : void 0) != null ? _ref : '');
              _this.el.find('[name="purpose"]').val((_ref2 = descriptor.purpose) != null ? _ref2 : '');
              _this.el.find('[name="context"]').val((_ref3 = descriptor.context) != null ? _ref3 : '');
              if ((_ref4 = descriptor.product) != null ? _ref4.properties : void 0) {
                _this.el.find('[name="properties"]').val(descriptor.product.properties.join(', '));
              } else {
                _this.el.find('[name="properties"]').val('');
              }
              _this.el.find('[name="recipient"]').val((_ref5 = (_ref6 = descriptor.person) != null ? _ref6.name : void 0) != null ? _ref5 : '');
              _this.el.find('[name="recipient.relationship"]').val((_ref7 = (_ref8 = descriptor.person) != null ? _ref8.relationship : void 0) != null ? _ref7 : '');
              _this.el.find('[name="recipient.age"]').val((_ref9 = (_ref10 = descriptor.person) != null ? _ref10.age : void 0) != null ? _ref9 : '');
              if ((_ref11 = descriptor.person) != null ? _ref11.sex : void 0) {
                _this.el.find('[name="recipient.sex"]').children("[name=" + ((_ref12 = descriptor.person) != null ? _ref12.sex : void 0) + "]").prop('selected', true);
              } else {
                _this.el.find('[name="recipient.sex"]').children(':first').prop('selected', true);
              }
              _this.el.find('[name="recipient.sex"]').trigger('change');
              if ('occasion' in descriptor) {
                _this.el.find('[name="gift"]').prop('checked', true);
                _this.el.find('[name="gift.occasion"]').val(descriptor.occasion);
              } else {
                _this.el.find('[name="gift"]').prop('checked', false);
                _this.el.find('[name="gift.occasion"]').val('');
              }
              return icons.setIcon(_this.el.find('.-agora-newItem'), (_ref13 = data.get().icon) != null ? _ref13 : 'list');
            };
          })(this));
        };

        return AddDescriptorView;

      })(View);
    }
  };
});

//# sourceMappingURL=AddDescriptorView.map
