// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(function() {
  return {
    d: ['View', 'Frame', 'views/OffersView', 'views/DataView', 'views/AddFeelingView', 'views/AddArgumentView'],
    c: function() {
      var ChatView;
      return ChatView = (function(superClass) {
        extend(ChatView, superClass);

        function ChatView() {
          return ChatView.__super__.constructor.apply(this, arguments);
        }

        ChatView.prototype.type = 'Chat';

        ChatView.prototype.init = function(bagsbyEl) {
          var messageEl;
          this.bagsbyEl = bagsbyEl;
          this.el = this.viewEl('<div class="v-chat"> <div class="wrapper scroll vertical"> <div class="intro">Hey there! It looks like you’re doing some shopping! Let me know if you have any questions or comments and I’ll get back to you ASAP.</div> <ul class="messages"><li class="message" /></ul> </div> <form> <input type="text" placeholder="Type a message and press enter to send..." class="message"> </form> </div>');
          this.el.find('form').submit(function() {
            return false;
          });
          this.messageEl = messageEl = this.el.find('form .message');
          messageEl.keyup((function(_this) {
            return function(e) {
              if (e.keyCode === 27) {
                _this.close();
                return;
              } else if (e.keyCode === 13) {
                _this.callBackgroundMethod('sendMessage', [messageEl.val()]);
                messageEl.val('');
              }
              return _this.callBackgroundMethod('writingMessage', [messageEl.val()]);
            };
          })(this));
          Q(window).blur((function(_this) {
            return function() {
              return _this.windowFocused = false;
            };
          })(this));
          return Q(window).focus((function(_this) {
            return function() {
              _this.windowFocused = true;
              if (_this.isReadingMessages()) {
                return _this.callBackgroundMethod('readNewMessages');
              }
            };
          })(this));
        };

        ChatView.prototype.isReadingMessages = function() {
          return this.windowFocused && this.open;
        };

        ChatView.prototype.scrollToBottom = function() {
          return this.el.find('.wrapper .scrollWrapper').scrollTop(this.el.find('.wrapper .scrollWrapper').get(0).scrollHeight);
        };

        ChatView.prototype.onData = function(data1) {
          var iface;
          this.data = data1;
          this.withData(this.data.online, (function(_this) {
            return function(online) {
              if (online) {
                _this.el.addClass('online');
                return _this.bagsbyEl.addClass('online');
              } else {
                _this.el.removeClass('online');
                return _this.bagsbyEl.removeClass('online');
              }
            };
          })(this));
          iface = this.listInterface(this.el, '.messages .message', (function(_this) {
            return function(el, data, pos, onRemove) {
              return el.html("<span class='sender" + (!data.sender ? ' you' : '') + "'>" + (data.sender ? 'Bagsby' : 'you') + "</span> <span class='content'>" + data.content + "</span> ");
            };
          })(this));
          this.data.newMessages.observe((function(_this) {
            return function() {
              if (_this.isReadingMessages()) {
                return _this.callBackgroundMethod('readNewMessages');
              }
            };
          })(this));
          this.withData(this.data.newUnreadMessages, (function(_this) {
            return function(newUnreadMessages) {
              if (newUnreadMessages) {
                return _this.bagsbyEl.addClass('newMessages');
              } else {
                return _this.bagsbyEl.removeClass('newMessages');
              }
            };
          })(this));
          iface.onInsert = (function(_this) {
            return function() {
              if (typeof _this.sizeChanged === "function") {
                _this.sizeChanged();
              }
              if (_this.lockedAtBottom) {
                return _this.scrollToBottom();
              }
            };
          })(this);
          iface.onDelete = (function(_this) {
            return function(el, del) {
              del();
              return typeof _this.sizeChanged === "function" ? _this.sizeChanged() : void 0;
            };
          })(this);
          return iface.setDataSource(this.data.messages);
        };

        ChatView.prototype.onDisplay = function() {
          var lockBottom, unlockBottom, wrapperEl;
          this.lockedAtBottom = true;
          setTimeout(((function(_this) {
            return function() {
              return _this.messageEl.get(0).focus();
            };
          })(this)), 10);
          this.open = true;
          this.windowFocused = true;
          this.callBackgroundMethod('readNewMessages');
          if (!this.initedScrollbar) {
            util.initScrollbar(this.el.find('.wrapper'), {
              absolute: false
            });
            this.initedScrollbar = true;
            wrapperEl = this.el.find('.wrapper .scrollWrapper');
            this.lockedAtBottom = false;
            lockBottom = (function(_this) {
              return function() {
                if (!_this.lockedAtBottom) {
                  return _this.lockedAtBottom = true;
                }
              };
            })(this);
            unlockBottom = (function(_this) {
              return function() {
                if (_this.lockedAtBottom) {
                  return _this.lockedAtBottom = false;
                }
              };
            })(this);
            wrapperEl.scroll((function(_this) {
              return function() {
                if ((wrapperEl.get(0).scrollHeight - wrapperEl.height()) - wrapperEl.scrollTop() <= 5) {
                  return lockBottom();
                } else {
                  return unlockBottom();
                }
              };
            })(this));
          }
          return this.scrollToBottom();
        };

        ChatView.prototype.onClose = function() {
          return this.open = false;
        };

        return ChatView;

      })(View);
    }
  };
});

//# sourceMappingURL=ChatView.js.map
