// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(function() {
  return {
    d: ['View', 'util', 'icons'],
    c: function() {
      var AddItemView;
      return AddItemView = (function(superClass) {
        extend(AddItemView, superClass);

        AddItemView.prototype.type = 'AddItem';

        function AddItemView() {
          var fn, i, len, ref, type;
          AddItemView.__super__.constructor.apply(this, arguments);
          this.el = this.viewEl('<div class="v-addItem t-dialog"> <h2>Add something</h2> <div class="content"> <input type="text" class="filter" placeholder="Describe what you are looking for"> <div class="itemList"> <!--<span class="item" />--> </div> </div> </div>');
          ref = ['decision', 'bundle', 'computer', 'session', 'list', 'descriptor'];
          fn = (function(_this) {
            return function(type) {
              var el;
              el = $("<span class='-agora-newItem' />");
              icons.setIcon(el, type);
              util.tooltip(el, type, {
                position: 'below'
              });
              util.initDragging(el, {
                data: function(cb) {
                  return cb(type === 'descriptor' ? {
                    action: 'new',
                    type: type,
                    descriptor: _this.el.find('.filter').val()
                  } : {
                    action: 'new',
                    type: type
                  });
                },
                context: 'page',
                onDraggedOver: function(activeEl, helperEl) {
                  if (activeEl) {
                    return helperEl.addClass('adding');
                  } else {
                    return helperEl.removeClass('adding');
                  }
                },
                helper: function() {
                  return el.clone().addClass('-agora dragging');
                },
                start: function() {
                  return el.css({
                    opacity: .5
                  });
                },
                stop: function(event, ui) {
                  el.animate({
                    opacity: 1
                  });
                  ui.helper.detach();
                  return _this.close();
                }
              });
              return _this.el.find('.itemList').append(el);
            };
          })(this);
          for (i = 0, len = ref.length; i < len; i++) {
            type = ref[i];
            fn(type);
          }
        }

        AddItemView.prototype.onData = function(data) {
          this.data = data;
        };

        return AddItemView;

      })(View);
    }
  };
});

//# sourceMappingURL=AddItemView.js.map
