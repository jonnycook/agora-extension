// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['View'],
    c: function() {
      var CompetitiveProcessView;
      return CompetitiveProcessView = (function(_super) {
        __extends(CompetitiveProcessView, _super);

        CompetitiveProcessView.prototype.type = 'CompetitiveProcess';

        function CompetitiveProcessView() {
          CompetitiveProcessView.__super__.constructor.apply(this, arguments);
          this.el = this.viewEl('<div class="v-competitiveProess"> <div class="elements"> <div class="element" /> </div> </div>');
          this.elementsEl = this.el.find('.elements');
          this.el.find('.elements').data('spacing', 5).attr('draggingroot', true);
        }

        CompetitiveProcessView.prototype.updateLayout = function(animate) {
          var itemSpacing, width, x;
          if (animate == null) {
            animate = false;
          }
          x = 0;
          itemSpacing = 5;
          this.el.children('.elements').children('.element').each(function() {
            if (animate) {
              $(this).stop(true, true).animate({
                left: x
              });
            } else {
              $(this).css({
                left: x
              });
            }
            return x += $(this).data('view').width() + itemSpacing;
          });
          width = Math.max(0, x - itemSpacing);
          return this.el.children('.elements').css('width', width ? width : 48);
        };

        CompetitiveProcessView.prototype.childWidthChanged = function() {
          return this.updateLayout();
        };

        CompetitiveProcessView.prototype.initEl = function(el, row) {
          var mousemove, newTop, offset;
          offset = null;
          newTop = null;
          el.css({
            top: -row * 48
          });
          mousemove = (function(_this) {
            return function(e) {
              var newRow;
              newTop = Math.min(0, e.pageY - _this.elementsEl.offset().top - offset.y);
              newRow = -Math.round(newTop / 48);
              if (row !== newRow) {
                row = newRow;
                _this.callBackgroundMethod('setRow', [el.data('view').id, row]);
                return el.stop(true).animate({
                  top: -row * 48
                });
              }
            };
          })(this);
          return el.mousedown((function(_this) {
            return function(e) {
              offset = {
                x: e.pageX - el.offset().left,
                y: e.pageY - el.offset().top
              };
              $(window).mousemove(mousemove);
              return $(window).one('mouseup', function() {
                return $(window).unbind('mousemove', mousemove);
              });
            };
          })(this));
        };

        CompetitiveProcessView.prototype.onData = function(data) {
          var contents;
          this.data = data;
          contents = this.listInterface(this.el, '.element', (function(_this) {
            return function(el, data, pos, onRemove) {
              var barItemView;
              barItemView = _this.createView('BarItemView', _this.shoppingBarView, {
                barItemArgs: {
                  draggingData: {
                    immutableContents: true,
                    enabled: false
                  }
                }
              });
              barItemView.changedType = function() {
                return _this.initEl(barItemView.el, data.row.get());
              };
              barItemView.represent(data.barItem);
              onRemove(function() {
                return barItemView.destruct();
              });
              return barItemView.el;
            };
          })(this));
          contents.setDataSource(data);
          contents.onInsert = (function(_this) {
            return function() {
              return _this.updateLayout(true);
            };
          })(this);
          contents.onDelete = (function(_this) {
            return function(el, del) {
              del();
              return _this.updateLayout(true);
            };
          })(this);
          contents.onMove = (function(_this) {
            return function() {
              return _this.updateLayout(true);
            };
          })(this);
          return this.updateLayout();
        };

        return CompetitiveProcessView;

      })(View);
    }
  };
});

//# sourceMappingURL=CompetitiveProcessView.map
