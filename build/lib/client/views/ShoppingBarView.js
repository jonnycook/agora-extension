// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['View', 'util', 'util2', 'views/ShoppingBarView/BarItemView', 'views/CompetitiveProcessView', 'views/ReviewsView', 'views/AddItemView', 'views/CouponsView', 'views/AddDescriptorView', 'views/AddDataView', 'views/compare/CompareView', 'views/ContactView', 'views/ShareView', 'views/SharedWithYouView', 'views/CollaborateView', 'views/ChatView', 'devAction', 'views/SocialShareView', 'views/BuyView', 'views/ProductWatchView', 'views/ProductWatchesView'],
    c: function() {
      var ShoppingBarView;
      return ShoppingBarView = (function(_super) {
        __extends(ShoppingBarView, _super);

        ShoppingBarView.prototype.type = 'ShoppingBar';

        function ShoppingBarView(contentScript, opts) {
          var bagsbyEl, chatFrame, chatOpen, collaborateFrame, collaborateOpen, collaborateView, contentWrapperEl, menu, updateForErrorState, updateForUserId;
          this.opts = opts != null ? opts : {};
          ShoppingBarView.__super__.constructor.apply(this, arguments);
          this.startTime = new Date().getTime();
          this.el = this.viewEl('<div class="-agora v-shoppingBar style1"> <div class="actions"> <span class="count" /> <a href="#" class="home" /> <a href="#" class="moveUp">Up</a> </div> <div class="contentWrapper"> <div class="content"> <div class="element" /> <!--<div class="add" />--> </div> </div> <a href="http://agora.sh/connect.html" target="_blank" class="signIn">Sign In to Agora</a> <span class="message" /> <span class="errorState">!</span> <div class="right"> <span class="collaborate" /> <span class="priceWatch" /> <span class="bagsby" /> </div> <span class="devAction"><span class="reloadDevAction" /><span class="devAction" /><span class="reloadStyles" /></span> <span class="needsReload">To continue to use Agora, please reload this page. Thank you!</span> </div>');
          this.el.find(".devAction .reloadDevAction").click(function() {
            return devAction.reloadDevAction();
          });
          this.el.find(".devAction .devAction").click(function() {
            return devAction.devAction();
          });
          this.el.find(".devAction .reloadStyles").click(function() {
            return reloadStyles();
          });
          this.itemSpacing = 7;
          this.sessionSpacing = 7;
          this.animateSpeed = 0;
          this.pinCount = 0;
          this.editListeners = [];
          this.el.find('.content').data({
            view: this,
            spacing: this.sessionSpacing
          });
          this.el.find('.contentWrapper').data('view', this);
          util.initDragging(this.el.find('.contentWrapper'), {
            enabled: false,
            root: true,
            rootZIndex: 1,
            acceptsDrop: true,
            dragArea: true,
            contentEl: this.el.find('.content'),
            onRippedOut: (function(_this) {
              return function() {};
            })(this),
            onReorder: (function(_this) {
              return function(el, startIndex, endIndex) {
                tracking.event('ShoppingBar', 'reorder');
                return _this.callBackgroundMethod('reorder', [startIndex, endIndex]);
              };
            })(this),
            onDroppedOn: (function(_this) {
              return function(el, fromEl) {
                _this.onDroppedOn(el, fromEl, _this.el.find('.contentWrapper'));
                el.remove();
                return false;
              };
            })(this),
            data: 'ShoppingBar'
          });
          util.initDragging(this.el.find('.actions .moveUp'), {
            enabled: false,
            root: true,
            acceptsDrop: true,
            dragArea: true,
            onDroppedOn: (function(_this) {
              return function(el, fromEl) {
                return _this.onDroppedOn(el, fromEl, 'up');
              };
            })(this)
          });
          this.contents = this.listInterface(this.el, '.element', (function(_this) {
            return function(el, data, pos, onRemove) {
              var view;
              view = util.getBarItem(data, _this, _this, _this.selectMode);
              onRemove(function() {
                return view.destruct();
              });
              return view.el;
            };
          })(this));
          this.contents.onDelete = (function(_this) {
            return function(el, del) {
              del();
              return _this.updateLayout();
            };
          })(this);
          this.contents.onInsert = (function(_this) {
            return function(el) {
              return _this.updateLayout();
            };
          })(this);
          this.contents.onMove = (function(_this) {
            return function() {
              return _this.updateLayout();
            };
          })(this);
          menu = (function(_this) {
            return function(anchorEl) {
              return function() {
                var el, frame, update;
                if (window.suppressShoppingBarMenu) {
                  return false;
                }
                _this.updateMenu = update = function() {
                  if (_this.selectMode) {
                    el.html('<div class="group"> <a href="#" class="wrap"><label>wrap</label></a> <a href="#" class="createBundle"><label>bundle</label></a> <a href="#" class="delete"><label>delete</label></a> </div> <div class="group"> <a href="#" class="cancel"><label>cancel select</label></a> </div>');
                    if (_this.atRoot) {
                      el.find('.group:first').prepend('<a href="#" class="createSession"><label>create session</label></a>');
                      el.find('.createSession').click(function() {
                        _this.wrapSelection('session');
                        return false;
                      });
                    } else {
                      el.find('.group:first').prepend('<a href="#" class="extract"><label>extract</label></a> <a href="#" class="split"><label>split</label></a>');
                      el.find('.extract').click(function() {
                        _this.extractSelection();
                        return false;
                      });
                      el.find('.split').click(function() {
                        _this.splitSelection();
                        return false;
                      });
                    }
                    el.find('.cancel').click(function() {
                      _this.event('cancelSelect');
                      _this.unpinMenu();
                      _this.disableSelection();
                      update();
                      frame.update();
                      return false;
                    });
                    el.find('.createBundle').click(function() {
                      _this.wrapSelection('bundle');
                      return false;
                    });
                    el.find('.wrap').click(function() {
                      _this.wrapSelection('decision');
                      return false;
                    });
                    el.find('.delete').click(function() {
                      _this.deleteSelection();
                      return false;
                    });
                  } else {
                    el.html('<div class="group"> <a href="#" class="settings"><label>settings</label></a> <a href="#" class="contact"><label>contact</label></a> <a href="#" class="sharedWithYou"><span class="count" /><label>shared with you</label></a> </div> <div class="group actions"> <a href="#" class="collaborate"><label>collaborate</label></a> <a href="#" class="selectMode"><label>selection mode</label></a> </div>');
                    if (_this.data.unseenSharedObjectsCount.get()) {
                      el.find('.sharedWithYou .count').addClass('nonzero').html(_this.data.unseenSharedObjectsCount.get());
                    }
                    if (_this.atRoot) {
                      el.find('.group:first').append('<a href="http://agora.sh/supportedSites.html" target="_blank" class="supportedSites"><label>supported sites</label></a>').append('<a href="http://support.agora.sh/knowledgebase" target="_blank" class="manual"><label>manual</label></a>');
                    }
                    if (typeof _this.menuInjection === "function") {
                      _this.menuInjection(el);
                    }
                    el.find('.sharedWithYou').click(function() {
                      tracking.page("" + (_this.path()) + "/SharedWithYou");
                      util.showDialog(function() {
                        var view;
                        view = new SharedWithYouView(_this.contentScript);
                        view.represent();
                        return view;
                      });
                      return false;
                    });
                    el.find('.collaborate').click(function() {
                      tracking.page("" + (_this.path()) + "/Share");
                      util.showDialog(function() {
                        var view;
                        view = new CollaborateView(_this.contentScript);
                        view.represent();
                        return view;
                      });
                      return false;
                    });
                    el.find('.contact').click(function() {
                      tracking.page("" + (_this.path()) + "/Contact");
                      util.showDialog(function() {
                        var contactView;
                        contactView = new ContactView(_this.contentScript);
                        contactView.represent();
                        return contactView;
                      });
                      return false;
                    });
                    el.find('.settings').click(function() {
                      tracking.page("" + (_this.path()) + "/Settings");
                      util.showDialog(function() {
                        var settingsView;
                        settingsView = new SettingsView(_this.contentScript);
                        settingsView.represent();
                        return settingsView;
                      });
                      return false;
                    });
                    el.find('.selectMode').click(function() {
                      _this.event('select');
                      _this.enableSelection();
                      update();
                      frame.update();
                      return false;
                    });
                  }
                  if (frame) {
                    return frame.update();
                  }
                };
                _this.menuEl = el = $('<div class="shoppingBarMenu"> </div>');
                el.mouseenter(function() {
                  return _this._mouseenter();
                });
                el.mouseleave(function() {
                  return _this._mouseleave();
                });
                update();
                frame = Frame.frameFixedAbove(anchorEl, el, {
                  type: 'balloon'
                });
                frame.el.css({
                  marginTop: -14
                });
                return frame.el;
              };
            };
          })(this);
          this.menus = [];
          this.menus.push(util.popupTrigger(this.el.find('.home'), {
            createPopup: menu(this.el.find('.home')),
            onClose: (function(_this) {
              return function(el) {
                el.data('frame').close();
                return _this.menuEl = null;
              };
            })(this)
          }));
          this.el.find('.home').hide().click(false);
          this.el.find('.moveUp').hide().click((function(_this) {
            return function() {
              _this.callBackgroundMethod('up');
              return false;
            };
          })(this));
          this.menus.push(util.popupTrigger(this.el.find('.moveUp'), {
            createPopup: menu(this.el.find('.moveUp')),
            onClose: function(el) {
              return el.data('frame').close();
            }
          }));
          this.el.find('.addData').click((function(_this) {
            return function() {
              util.showDialog(function() {
                var addDataView;
                addDataView = _this.createView('AddData');
                addDataView.shoppingBarView = _this;
                return addDataView;
              });
              return false;
            };
          })(this));
          this.el.find('.content > .add').hide().click((function(_this) {
            return function() {
              return util.showDialog(function() {
                var addItemView;
                addItemView = _this.createView('AddDescriptor');
                addItemView.represent();
                addItemView.shoppingBarView = _this;
                return addItemView;
              });
            };
          })(this));
          util.tooltip(this.el.find('.content > .add'), 'add item', {
            distance: 20
          });
          util.initDragging(this.el.find('.content > .add'), {
            enabled: false,
            dragArea: true,
            acceptsDrop: false
          });
          this.el.find('.collectionsToggle').click((function(_this) {
            return function() {
              if (_this.state === 'collections') {
                _this.callBackgroundMethod('exitCollections');
              } else {
                _this.callBackgroundMethod('enterCollections');
              }
              return false;
            };
          })(this));
          util.initDragging(this.el.find('.collectionsToggle'), {
            enabled: false,
            dragArea: true,
            holdDelay: 200,
            onDroppedOn: (function(_this) {
              return function(el) {
                return util.resolveDraggingData(el, function(data) {
                  _this.callBackgroundMethod('addCollection', [data]);
                  return el.remove();
                });
              };
            })(this),
            onHoldOver: (function(_this) {
              return function(el) {
                var onDropped;
                if (_this.state !== 'collections') {
                  onDropped = el.data('dragging').onDropped;
                  el.data('dragging').onDropped = function(receivingEl) {
                    setTimeout((function() {
                      return _this.callBackgroundMethod('exitCollections');
                    }), 500);
                    return typeof onDropped === "function" ? onDropped(receivingEl) : void 0;
                  };
                  return _this.callBackgroundMethod('enterCollections');
                }
              };
            })(this)
          });
          contentWrapperEl = this.el.find('.contentWrapper');
          this.updateContentWrapperWidth = (function(_this) {
            return function() {
              var nextEl, prevEl, right, x;
              x = 10;
              prevEl = contentWrapperEl.prevAll(':visible').first();
              if (prevEl.length) {
                x = prevEl.position().left + prevEl.outerWidth(true);
              }
              nextEl = contentWrapperEl.nextAll(':visible').first();
              right = 0;
              if (nextEl.length) {
                right = _this.el.width() - nextEl.position().left;
              }
              contentWrapperEl.css({
                left: x,
                width: '',
                right: right
              });
              if (_this.state === 'collections') {
                _this.el.find('.collectionsArrow').css({
                  left: contentWrapperEl.offset().left + contentWrapperEl.width()
                });
              }
              return true;
            };
          })(this);
          $(window).resize(this.updateContentWrapperWidth);
          $((function(_this) {
            return function() {
              return _this.updateContentWrapperWidth();
            };
          })(this));
          window.shoppingBarView = this;
          updateForUserId = (function(_this) {
            return function() {
              if (Agora.userId.get()) {
                return _this.el.removeClass('signedOut').addClass('signedIn');
              } else {
                return _this.el.removeClass('signedIn').addClass('signedOut');
              }
            };
          })(this);
          Agora.userId.observe(updateForUserId);
          updateForUserId();
          this.el.find('.errorState').click((function(_this) {
            return function() {
              _this.contentScript.reloadExtension();
              setTimeout((function() {
                return document.location.reload();
              }), 1000);
              return false;
            };
          })(this));
          updateForErrorState = (function(_this) {
            return function() {
              if (Agora.errorState.get()) {
                contentWrapperEl.css({
                  right: 50
                });
                _this.el.find('.errorState').show();
                return util.tooltip(_this.el.find('.errorState'), 'Error! Click to reload extension (some changes may be lost)');
              } else {
                contentWrapperEl.css({
                  right: 0
                });
                return _this.el.find('.errorState').hide();
              }
            };
          })(this);
          Agora.errorState.observe(updateForErrorState);
          updateForErrorState();
          if (Agora.settings.hideBelt.get()) {
            this.displayMode = 'hidden';
            this.hide();
          } else {
            this.displayMode = 'always';
          }
          Agora.settings.hideBelt.observe((function(_this) {
            return function() {
              if (Agora.settings.hideBelt.get()) {
                _this.displayMode = 'hidden';
                _this.pinCount = 0;
                return _this.hide();
              } else {
                if (!_this.shown) {
                  _this.show();
                }
                return _this.displayMode = 'always';
              }
            };
          })(this));
          bagsbyEl = this.el.find('.right .bagsby');
          this.chatView = this.createView('Chat', bagsbyEl);
          this.chatView.represent();
          chatOpen = false;
          chatFrame = null;
          bagsbyEl.click((function(_this) {
            return function() {
              var frame;
              if (chatOpen) {
                return chatFrame.close();
              } else {
                tracking.page("" + (_this.path()) + "/Chat");
                chatFrame = frame = Frame.frameAbove(bagsbyEl, _this.chatView.el, {
                  type: 'balloon',
                  close: true,
                  onClose: function() {
                    _this.chatView.onClose();
                    _this.chatView.el.detach();
                    chatOpen = false;
                    return delete _this.chatView.sizeChanged;
                  }
                });
                frame.el.css({
                  marginLeft: -9,
                  marginTop: -24
                });
                _this.chatView.onDisplay();
                chatOpen = true;
                _this.chatView.close = function() {
                  return frame.close();
                };
                return _this.chatView.sizeChanged = function() {
                  return frame.update();
                };
              }
            };
          })(this));
          collaborateFrame = null;
          collaborateOpen = false;
          collaborateView = this.collaborateView = this.createView('Collaborate');
          this.el.find('.right .collaborate').click((function(_this) {
            return function() {
              var frame;
              if (collaborateOpen) {
                return collaborateFrame.close();
              } else {
                tracking.page("" + (_this.path()) + "/Collaborate");
                collaborateFrame = frame = Frame.frameAbove(_this.el.find('.right .collaborate'), collaborateView.el, {
                  type: 'balloon',
                  close: true,
                  onClose: function() {
                    collaborateView.onClose();
                    collaborateView.el.detach();
                    collaborateOpen = false;
                    return delete collaborateView.sizeChanged;
                  }
                });
                frame.el.css({
                  marginLeft: -9,
                  marginTop: -24
                });
                collaborateView.onDisplay();
                collaborateOpen = true;
                collaborateView.close = function() {
                  return frame.close();
                };
                return collaborateView.sizeChanged = function() {
                  return frame.update();
                };
              }
            };
          })(this));
          util.initDragging(this.el.find('.right .priceWatch'), {
            enabled: false,
            root: true,
            acceptsDrop: true,
            dragArea: true,
            onDroppedOn: (function(_this) {
              return function(el, fromEl) {
                return _this.onDroppedOn(el, fromEl, 'priceWatch');
              };
            })(this)
          });
          this.el.find('.right .priceWatch').click((function(_this) {
            return function() {
              var frameEl, productWatchesView;
              productWatchesView = new ProductWatchesView(_this.contentScript);
              frameEl = Frame.wrapInFrame(productWatchesView.el, {
                type: 'fullscreen',
                scroll: true,
                resize: function(width, height) {
                  return [width - 100, height - 100];
                },
                close: function() {
                  return productWatchesView.destruct();
                }
              });
              productWatchesView.close = function() {
                return Frame.close(frameEl);
              };
              frameEl.appendTo(document.body);
              Frame.show(frameEl);
              return productWatchesView.represent();
            };
          })(this));
        }

        ShoppingBarView.prototype.closeMenu = function() {
          var close, _i, _len, _ref, _results;
          _ref = this.menus;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            close = _ref[_i].close;
            _results.push(close());
          }
          return _results;
        };

        ShoppingBarView.prototype.pinMenu = function() {
          var pin, _i, _len, _ref, _results;
          _ref = this.menus;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            pin = _ref[_i].pin;
            _results.push(pin());
          }
          return _results;
        };

        ShoppingBarView.prototype.unpinMenu = function() {
          var unpin, _i, _len, _ref, _results;
          _ref = this.menus;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            unpin = _ref[_i].unpin;
            _results.push(unpin());
          }
          return _results;
        };

        ShoppingBarView.prototype.shrinkQueue = [];

        ShoppingBarView.prototype.queueShrink = function(listBarItem) {
          this.shrinkQueue.push(listBarItem);
          this.stopShrink();
          return this.resumeShrink();
        };

        ShoppingBarView.prototype.stopShrink = function() {
          return clearTimeout(this.shrinkTimerId);
        };

        ShoppingBarView.prototype.resumeShrink = function() {
          return this.shrinkTimerId = setTimeout(((function(_this) {
            return function() {
              var listBarItem, _i, _len, _ref;
              _ref = _this.shrinkQueue;
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                listBarItem = _ref[_i];
                if (listBarItem.state === 'expanded' && !listBarItem.args.readOnly) {
                  if (listBarItem.startedDrag) {
                    listBarItem.startedDrag = false;
                    listBarItem.shrink();
                  }
                }
              }
              return _this.shrinkQueue = [];
            };
          })(this)), 50);
        };

        ShoppingBarView.prototype.barItemLoadCount = 0;

        ShoppingBarView.prototype.loadBarItem = function(barItem) {
          return ++this.barItemLoadCount;
        };

        ShoppingBarView.prototype.barItemLoaded = function(barItem) {
          --this.barItemLoadCount;
          if (!this.barItemLoadCount) {
            return this.el.find('.content').animate({
              opacity: 1
            }, 100);
          }
        };

        ShoppingBarView.prototype.hoverStack = [];

        ShoppingBarView.prototype.mouseEnteredBarItemView = function(barItemView) {
          var deepest, deepestDepth, depth, item, _i, _j, _len, _len1, _ref, _ref1;
          barItemView.el.addClass('mouseentered');
          _ref = this.hoverStack;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            item.el.removeClass('hover');
          }
          this.hoverStack.push(barItemView);
          deepest = deepestDepth = null;
          _ref1 = this.hoverStack;
          for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
            item = _ref1[_j];
            depth = item.el.parents('.element').length;
            if (deepest === null || depth > deepestDepth) {
              deepestDepth = depth;
              deepest = item;
            }
          }
          return deepest.el.addClass('hover');
        };

        ShoppingBarView.prototype.mouseLeftBarItemView = function(barItemView) {
          var deepest, deepestDepth, depth, item, _i, _len, _ref;
          barItemView.el.removeClass('mouseentered');
          barItemView.el.removeClass('hover');
          $(this.hoverStack).find('.hover').removeClass('hover');
          _.pull(this.hoverStack, barItemView);
          deepest = deepestDepth = null;
          _ref = this.hoverStack;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            item = _ref[_i];
            depth = item.el.parents('.element').length;
            if (deepest === null || depth > deepestDepth) {
              deepestDepth = depth;
              deepest = item;
            }
          }
          if (deepest) {
            return deepest.el.addClass('hover');
          }
        };

        ShoppingBarView.prototype.processChild = function(view) {};

        ShoppingBarView.prototype.destructChild = function(view) {};

        ShoppingBarView.prototype.addEditListener = function(listener) {
          return this.editListeners.push(listener);
        };

        ShoppingBarView.prototype.startEdit = function() {
          var listener, _i, _len, _ref, _results;
          if (!this.editing) {
            this.editing = true;
            _ref = this.editListeners;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              listener = _ref[_i];
              _results.push(listener.startEdit());
            }
            return _results;
          }
        };

        ShoppingBarView.prototype.stopEdit = function() {
          var listener, _i, _len, _ref, _results;
          if (this.editing) {
            this.editing = false;
            _ref = this.editListeners;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              listener = _ref[_i];
              _results.push(listener.stopEdit());
            }
            return _results;
          }
        };

        ShoppingBarView.prototype.removeEditListener = function(listener) {
          var index;
          index = this.editListeners.indexOf(listener);
          if (index !== -1) {
            return this.editListeners.splice(index, 1);
          }
        };

        ShoppingBarView.prototype.pin = function() {
          if (!this.pinCount && this.shown) {
            clearTimeout(this.hideTimerId);
          }
          ++this.pinCount;
          if (!this.shown) {
            return this.show();
          }
        };

        ShoppingBarView.prototype.unpin = function() {
          --this.pinCount;
          if (!this.pinCount && this.shown) {
            return this.hideTimerId = setTimeout(((function(_this) {
              return function() {
                return _this.hide();
              };
            })(this)), 1000);
          }
        };

        ShoppingBarView.prototype.startDrag = function() {
          return this.pin();
        };

        ShoppingBarView.prototype.stopDrag = function() {
          return this.unpin();
        };

        ShoppingBarView.prototype.hide = function(animate) {
          if (animate == null) {
            animate = true;
          }
          if (this.displayMode === 'hidden') {
            if (this.shown) {
              this.el.animate({
                opacity: 0
              }, (function(_this) {
                return function() {
                  return _this.el.css({
                    height: 10,
                    overflow: 'hidden'
                  });
                };
              })(this));
              return this.shown = false;
            }
          }
        };

        ShoppingBarView.prototype.show = function() {
          if (this.displayMode === 'hidden') {
            if (!this.shown) {
              this.el.stop();
              this.el.css({
                height: '',
                overflow: ''
              });
              this.el.animate({
                opacity: 1
              });
              return this.shown = true;
            }
          }
        };

        ShoppingBarView.prototype.onMouseenter = function() {
          return this.pin();
        };

        ShoppingBarView.prototype.onMouseleave = function() {
          return this.unpin();
        };

        ShoppingBarView.prototype.eachSelectable = function(cb) {
          return this.el.find('.content').children('.element').each(function() {
            var v, view, _i, _len, _ref, _results;
            view = $(this).data('view');
            if (view.elementType === 'Session') {
              _ref = view.views;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                v = _ref[_i];
                if (v.barItem) {
                  _results.push(cb(v));
                } else {
                  _results.push(void 0);
                }
              }
              return _results;
            } else {
              return cb(view);
            }
          });
        };

        ShoppingBarView.prototype.enableSelection = function() {
          if (!this.selectMode) {
            this.pinMenu();
            this.eachSelectable(function(view) {
              return view.enableSelection();
            });
            return this.selectMode = true;
          }
        };

        ShoppingBarView.prototype.disableSelection = function() {
          if (this.selectMode) {
            this.unpinMenu();
            this.eachSelectable(function(view) {
              return view.disableSelection();
            });
            this.selectMode = false;
            return this.updateMenu();
          }
        };

        ShoppingBarView.prototype.selected = function() {
          var selected;
          selected = [];
          this.eachSelectable(function(view) {
            if (view.selected) {
              return selected.push(view.id);
            }
          });
          return selected;
        };

        ShoppingBarView.prototype.wrapSelection = function(type) {
          this.event('wrap');
          this.callBackgroundMethod('wrap', [type, this.selected()]);
          return this.disableSelection();
        };

        ShoppingBarView.prototype.deleteSelection = function() {
          this.event('delete');
          this.callBackgroundMethod('delete', [this.selected()]);
          return this.disableSelection();
        };

        ShoppingBarView.prototype.extractSelection = function() {
          this.event('extract');
          this.callBackgroundMethod('extract', [this.selected()]);
          return this.disableSelection();
        };

        ShoppingBarView.prototype.splitSelection = function() {
          this.event('split');
          this.callBackgroundMethod('split', [this.selected()]);
          return this.disableSelection();
        };

        ShoppingBarView.prototype.updateLayout = function() {
          var animateSpeed, sessionSpacing, x;
          x = 0;
          sessionSpacing = this.el.find('.content').data('spacing');
          animateSpeed = this.animateSpeed;
          this.el.find('.content').children('.element').each(function() {
            if (!$(this).data('view')) {
              throw new Error('no view');
            }
            $(this).css({
              left: x,
              right: ''
            });
            return x += $(this).data('view').width() + sessionSpacing;
          });
          this.el.find('.content > .add').css({
            left: x,
            right: ''
          });
          if (this.state !== 'collections') {
            x += this.el.find('.content > .add').width();
          }
          this.el.find('.content').width(Math.max(0, x - this.sessionSpacing));
          if (this.direction === 'ltr') {
            this.el.find('.content').css({
              left: 0,
              right: ''
            });
          } else if (this.direction === 'rtl') {
            this.el.find('.content').css({
              left: '',
              right: 5
            });
          }
          this.animateSpeed = 200;
          return this.updateContentWrapperWidth();
        };

        ShoppingBarView.prototype.childWidthChanged = function(view) {
          return this.updateLayout();
        };

        ShoppingBarView.prototype.onData = function(data) {
          this.collaborateView.represent('ShoppingBar');
          if (data.barContents) {
            this.withData(data.barContents, (function(_this) {
              return function(barContents) {
                return _this.configure(barContents);
              };
            })(this));
          }
          this.withData(data.updaterStatus, (function(_this) {
            return function(updaterStatus, mutation) {
              if (mutation) {
                if (mutation.oldValue) {
                  _this.el.removeClass("" + mutation.oldValue + "-status");
                }
              }
              return _this.el.addClass("" + updaterStatus + "-status");
            };
          })(this));
          this.valueInterface(this.el.children('.message')).setDataSource(data.updaterMessage);
          if (data.unseenSharedObjectsCount) {
            return this.withData(data.unseenSharedObjectsCount, (function(_this) {
              return function(count) {
                if (_this.menuEl) {
                  _this.menuEl.find('.sharedWithYou .count')[count ? 'addClass' : 'removeClass']('nonzero');
                  _this.menuEl.find('.sharedWithYou .count').html(count);
                }
                _this.el.find('.actions .count')[count ? 'addClass' : 'removeClass']('nonzero');
                return _this.el.find('.actions .count').html(count);
              };
            })(this));
          }
        };

        ShoppingBarView.prototype.onDroppedOn = function(el, fromEl, toEl, dropAction) {
          this.lastDroppedOn = toEl;
          return util.resolveDraggingData(el, (function(_this) {
            return function(data) {
              var to;
              to = !(toEl === 'up' || toEl === 'priceWatch') ? {
                view: toEl.data('view').id
              } : toEl;
              if (fromEl) {
                _this.event('move');
                return _this.callBackgroundMethod('move', [data, to, dropAction]);
              } else {
                _this.event('drop');
                return _this.callBackgroundMethod('drop', [data, to, dropAction]);
              }
            };
          })(this));
        };

        ShoppingBarView.prototype.configure = function(data) {
          this.disableSelection();
          this.hoverStack = [];
          this.barItemLoadCount = 0;
          if (this.productAddedPopup) {
            this.productAddedPopup.close();
          }
          if (this.state) {
            this.el.removeClass(this.state);
            delete this.menuInjection;
            switch (this.state) {
              case 'collections':
                this.el.find('.content > .add').show();
                this.el.find('.collectionsArrow').remove();
                null;
            }
          }
          this.state = data.state;
          if (this.state) {
            this.el.addClass(this.state);
            switch (this.state) {
              case 'Decision':
                this.menuInjection = (function(_this) {
                  return function(el) {
                    el.find('.group.actions').prepend($('<a href="#" class="workspace"><label>workspace</label></a>').click(function() {
                      var compareTileView, frameEl;
                      compareTileView = new CompareView(_this.contentScript);
                      compareTileView.shoppingBarView = _this;
                      frameEl = Frame.wrapInFrame(compareTileView.el, {
                        type: 'fullscreen',
                        scroll: true,
                        resize: function(width, height) {
                          return [width - 100, height - 100];
                        },
                        close: function() {
                          return compareTileView.destruct();
                        }
                      });
                      compareTileView.close = function() {
                        return Frame.close(frameEl);
                      };
                      frameEl.appendTo(document.body);
                      Frame.show(frameEl);
                      compareTileView.setContEl(frameEl.data('client'));
                      compareTileView.backEl = compareTileView.contEl;
                      compareTileView.el.css({
                        margin: '20px auto 0'
                      });
                      compareTileView.represent({
                        decision: {
                          id: data.args.decisionId
                        }
                      });
                      tracking.page("" + (_this.path()) + "/Compare");
                      _this.event('openWorkspace');
                      _this.closeMenu();
                      return false;
                    }));
                    return el.find('.group.actions').prepend($('<a href="#" class="share"><label>share</label></a>').click(function() {
                      tracking.page("" + (_this.path()) + "/SocialShare");
                      util.presentViewAsModalDialog('SocialShare', {
                        id: data.args.decisionId
                      }, {
                        waitUntilRepresented: true
                      });
                      return false;
                    }));
                  };
                })(this);
                break;
              case 'collections':
                this.el.find('.content > .add').hide();
                this.el.append('<span class="collectionsArrow" />');
            }
          }
          this.el.find('.contentWrapper').css({
            width: 0
          });
          this.el.find('.content').css({
            opacity: 0
          });
          this.direction = data.direction;
          if (data.contents) {
            this.contents.setDataSource(data.contents);
            this.updateLayout();
            if (this.barItemLoadCount === 0) {
              this.el.find('.content').css({
                opacity: ''
              });
            }
          }
          if (data.moveUp) {
            this.atRoot = false;
            this.el.find('.moveUp').show();
            this.el.find('.home').hide();
          } else {
            this.atRoot = true;
            this.el.find('.moveUp').hide();
            this.el.find('.home').show();
          }
          this.withData(data.shared, (function(_this) {
            return function(shared) {
              _this.el[shared ? 'addClass' : 'removeClass']('shared');
              return _this.updateContentWrapperWidth();
            };
          })(this));
          return this.updateContentWrapperWidth();
        };

        ShoppingBarView.prototype.items = function() {
          return this.el.find('.content').children('.element');
        };

        ShoppingBarView.prototype.propOpen = function(view) {
          this.pin();
          return view.events.onDestruct.subscribe((function(_this) {
            return function() {
              return _this.unpin();
            };
          })(this));
        };

        ShoppingBarView.prototype.methods = {
          productAdded: function(id) {
            return setTimeout(((function(_this) {
              return function() {
                var el, frame, productWatchView;
                if (_this.lastDroppedOn === 'priceWatch') {
                  productWatchView = _this.createView('ProductWatch');
                  productWatchView.represent(id);
                  frame = Frame.frameAbove(_this.el.find('.right .priceWatch'), productWatchView.el, {
                    type: 'balloon'
                  });
                  return productWatchView.close = function() {
                    return frame.close();
                  };
                } else {
                  el = _this.lastDroppedOn === 'up' ? void 0 : _this.lastDroppedOn.data('view') === _this ? _this.lastDroppedOn.data('view').items().last() : _this.lastDroppedOn.data('view').elementType === 'Session' || _this.lastDroppedOn.data('view').elementType === 'Bundle' ? _this.lastDroppedOn.data('view').barItem.items().last() : _this.lastDroppedOn;
                  return _tutorial('Belt/RemoveItem', {
                    positionEl: el,
                    attachEl: $(document.body),
                    position: 'top'
                  }, {
                    close: true
                  }, function(showTutorial) {
                    var cancelClose, closing, closingTimerId, count, editPin, enter, initiateClose, leave, popup;
                    if (!(!window.suppressAddFeeling && (Agora.settings.autoFeelings.get() || _this.opts.context === 'tutorial'))) {
                      return;
                    }
                    _this.disableProductPopups = true;
                    editPin = false;
                    closing = false;
                    count = 0;
                    initiateClose = function() {
                      closing = true;
                      return popup.initiateClose();
                    };
                    cancelClose = function() {
                      popup.cancelClose();
                      return closing = false;
                    };
                    enter = function() {
                      ++count;
                      return cancelClose();
                    };
                    leave = function() {
                      return --count;
                    };
                    closingTimerId = null;
                    _this.productAddedPopup = popup = util.showPopup(el, {
                      close: false,
                      createPopup: function(cb, close) {
                        var addFeelingView;
                        addFeelingView = _this.createView('AddFeelingView', {
                          auto: true
                        });
                        _this.propOpen(addFeelingView);
                        addFeelingView.el.find('input[name=feeling]').keyup(function(e) {
                          if (e.keyCode === 13) {
                            if (editPin) {
                              return editPin = false;
                            }
                          } else {
                            editPin = true;
                            return cancelClose();
                          }
                        });
                        addFeelingView.represent(id, function() {
                          frame = Frame.frameFixedAbove(el, addFeelingView.el, {
                            type: 'balloon',
                            color: 'dark',
                            onClose: function() {
                              addFeelingView.destruct();
                              return addFeelingView = null;
                            }
                          });
                          frame.el.css({
                            marginTop: -17
                          });
                          addFeelingView.close = function(esc) {
                            if (esc) {
                              return popup.close();
                            } else {
                              return popup.initiateClose();
                            }
                          };
                          addFeelingView.sizeChanged = function() {
                            return frame.update();
                          };
                          frame.el.mouseenter(enter).mouseleave(leave);
                          return cb(frame.el);
                        });
                        return null;
                      },
                      onClose: function(el) {
                        var _ref;
                        if ((_ref = el.data('frame')) != null) {
                          if (typeof _ref.close === "function") {
                            _ref.close();
                          }
                        }
                        _this.lastDroppedOn.unbind('mouseleave', leave).unbind('mouseenter', enter);
                        delete _this.disableProductPopups;
                        delete _this.productAddedPopup;
                        return clearTimeout(closingTimerId);
                      }
                    });
                    if (_this.opts.context !== 'tutorial') {
                      _this.lastDroppedOn.mouseleave(leave);
                      _this.lastDroppedOn.mouseenter(enter);
                      return $(window).one('mousemove', function() {
                        return closingTimerId = setInterval((function() {
                          if (count <= 0 && !editPin && !closing) {
                            return initiateClose();
                          }
                        }), 100);
                      });
                    }
                  });
                }
              };
            })(this)), 100);
          }
        };

        return ShoppingBarView;

      })(View);
    }
  };
});

//# sourceMappingURL=ShoppingBarView.map
