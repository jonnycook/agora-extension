// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(function() {
  return {
    d: ['SiteInjector', 'views/ShoppingBarView'],
    c: function() {
      var BCSiteInjector;
      return BCSiteInjector = (function(superClass) {
        extend(BCSiteInjector, superClass);

        function BCSiteInjector() {
          return BCSiteInjector.__super__.constructor.apply(this, arguments);
        }

        BCSiteInjector.prototype.init = function() {
          var $, Client, t$, t$$, that;
          t$ = (function(_this) {
            return function() {
              return _this.contentScript.querySelector.apply(_this.contentScript, arguments);
            };
          })(this);
          t$$ = (function(_this) {
            return function() {
              return _this.contentScript.querySelectorAll.apply(_this.contentScript, arguments);
            };
          })(this);
          $ = (function(_this) {
            return function() {
              return _this.contentScript.safeQuerySelector.apply(_this.contentScript, arguments);
            };
          })(this);
          eval("var pages = (" + (this.pages.toString()) + ")()");
          this.pages = pages;
          that = this;
          return this.Client = Client = {
            productID: null,
            clearProduct: function(boolValue) {
              console.log("Client.clearProduct(" + boolValue + ")");
              return this.productInit();
            },
            productInit: function() {
					this.inited = false;
					try {
						that.sid = this.productID = this.site.productID();

						if (!this.productID) {
							this.clearProduct();
							return;
						}
						
						//that.updateButton();
						
						
						// Debug
						console.log('Detected product:', this.productID);
						//this.productInfo(['title', 'price'], function(info) {
						//	console.log('Product Info', info);
						//});
						//
						//Drone.scrape(this.site.name, this.productID, ['title', 'price', 'image'], function(info) {
						//	console.log('Product Info (scraped)', info);
						//	console.log(info.price);
						//});
						
						//this.productCheckIn(function() {
						//	Client.inited = true;
						//});
					}
					catch (e) {
						console.log('Failed to init product');
						throw e;
						//this.mainCont.style.opacity = '.1';
						//this.scrapeError(this.site.name, '<unknown>', 'productID', e);
						//this.error = true;
					}
				}
          };
        };

        BCSiteInjector.prototype.run = function() {
          this.init();
          this.url = document.location.href;
          $((function(_this) {
            return function() {
              var el, i, len, page, pageMatch, ref, ref1, results;
              ref = _this.pages;
              results = [];
              for (pageMatch in ref) {
                page = ref[pageMatch];
                if (_this.url.match(pageMatch)) {
                  console.log("matched " + pageMatch);
                  _this.Client.site = page;
                  _this.Client.site.init();
                  ref1 = $(page.drag);
                  for (i = 0, len = ref1.length; i < len; i++) {
                    el = ref1[i];
                    _this.products(el, {
                      productSid: _this.sid
                    }, {
                      area: 'main',
                      initOverlay: function(overlay) {
                        return overlay.addAlwaysShow('productPage');
                      }
                    });
                  }
                  setInterval((function() {
                    var j, len1, ref2, results1, sid;
                    sid = _this.Client.site.productID();
                    if (_this.sid !== sid) {
                      _this.sid = sid;
                      ref2 = $(page.drag);
                      results1 = [];
                      for (j = 0, len1 = ref2.length; j < len1; j++) {
                        el = ref2[j];
                        _this.clearProductEl(el);
                        results1.push(_this.products(el, {
                          productSid: _this.sid
                        }, {
                          area: 'main',
                          initOverlay: function(overlay) {
                            return overlay.addAlwaysShow('productPage');
                          }
                        }));
                      }
                      return results1;
                    }
                  }), 2000);
                  break;
                } else {
                  results.push(void 0);
                }
              }
              return results;
            };
          })(this));
          this.initPage((function(_this) {
            return function() {
              _this.shoppingBarView = new ShoppingBarView(_this.contentScript);
              _this.shoppingBarView.el.appendTo(document.body);
              _this.shoppingBarView.represent();
              if (_this.onInitPage) {
                return _this.onInitPage();
              }
            };
          })(this));
          return true;
        };

        return BCSiteInjector;

      })(SiteInjector);
    }
  };
});

//# sourceMappingURL=BCSiteInjector.js.map
