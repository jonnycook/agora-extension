// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function() {
  return {
    d: ['SiteInjector'],
    c: function() {
      var DataDrivenSiteInjector, doHandleOverlay, handleOverlay;
      doHandleOverlay = function(overlayEl, image, hide) {
        var down, event;
        if (hide == null) {
          hide = false;
        }
        $(overlayEl).unbind('.agora');
        down = false;
        event = null;
        return Q(overlayEl).bind('mousedown.agora', function(e) {
          down = true;
          Q('html').disableSelection();
          e.preventDefault();
          event = e;
          return true;
        }).bind('mouseup.agora', function() {
          down = false;
          return true;
        }).bind('mousemove.agora', function(e) {
          if (down) {
            down = false;
            if (hide) {
              Q(this).hide();
            }
            image.trigger(event);
            setTimeout(((function(_this) {
              return function() {
                return image.trigger(event);
              };
            })(this)), 100);
            return $('html').one('mouseup', (function(_this) {
              return function() {
                $('html').enableSelection();
                if (hide) {
                  return $(_this).show();
                }
              };
            })(this));
          }
        });
      };
      handleOverlay = function(overlayEl, image, hide) {
        if (hide == null) {
          hide = false;
        }
        return Q('body').delegate(overlayEl, 'mouseover', function() {
          return doHandleOverlay(overlayEl, image($(this)), hide);
        });
      };
      return DataDrivenSiteInjector = (function(_super) {
        __extends(DataDrivenSiteInjector, _super);

        DataDrivenSiteInjector.productListing = {
          testProductLink: function(a) {
            return true;
          },
          productSid: function(href) {
            return this.parseUrl(href);
          },
          productData: function(href, a, img) {
            var productSid;
            productSid = this.productListing.productSid.call(this, href, a, img);
            if (productSid) {
              return {
                productSid: productSid
              };
            }
          }
        };

        DataDrivenSiteInjector.productPage = {
          productSid: function() {
            throw new Error('unimplemented');
          },
          test: function() {
            return $('meta[property="og:type"]').attr('content') === 'product';
          },
          waitFor: 'body',
          imgEl: null,
          productSid: function(href) {
            return this.parseUrl(document.location.href);
          }
        };

        function DataDrivenSiteInjector() {
          DataDrivenSiteInjector.__super__.constructor.apply(this, arguments);
          if (!_.isFunction(this.productListing)) {
            this.productListing = _.extend(_.clone(DataDrivenSiteInjector.productListing), this.productListing);
          }
          this.productPage = _.extend(_.clone(DataDrivenSiteInjector.productPage), this.productPage);
        }

        DataDrivenSiteInjector.prototype.run = function() {
          return this.initPage((function(_this) {
            return function() {
              var doInitProducts, initProducts, that, _base;
              _this.shoppingBarView = new ShoppingBarView(_this.contentScript);
              Q(_this.shoppingBarView.el).appendTo(document.body);
              _this.shoppingBarView.represent();
              if (_.isFunction(_this.productListing)) {
                _this.productListing.call(_this);
              } else {
                if ((_base = _this.productListing).image == null) {
                  _base.image = _this.productListing.imgSelector;
                }
                if (_this.productListing.init) {
                  _this.productListing.init.call(_this);
                }
                if (_this.productListing.mode === 2) {
                  if (_this.productListing.overlay) {
                    handleOverlay(_this.productListing.overlay, _this.productListing.overlayImage);
                  }
                  doInitProducts = function(selector, params) {
                    var a, el, href, img, positionEl, productData, _i, _len, _ref, _results;
                    _ref = $(selector);
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      el = _ref[_i];
                      img = params.image && params.image !== selector ? params.image($(el)) : el;
                      a = params.anchor ? params.anchor($(el)) : $(img).parents('a');
                      href = a.prop('href');
                      productData = params.productData.call(_this, href, a, $(img), $(el));
                      if (productData) {
                        positionEl = params.positionA ? a : params.position ? params.position($(el)) : img;
                        if (params.anchorProxy) {
                          doHandleOverlay(a, img);
                        }
                        _this.initProductEl(img, productData, {
                          overlay: false
                        });
                        if (params.forcePositioned) {
                          Q(a).css('position', 'relative');
                        }
                        _results.push(_this.attachOverlay({
                          positionEl: $(positionEl),
                          attachEl: a,
                          productData: productData,
                          overlayZIndex: 9999,
                          position: params.overlayPosition
                        }));
                      } else {
                        _results.push(void 0);
                      }
                    }
                    return _results;
                  };
                  window.initProducts = initProducts = function() {
                    var params, selector, _base1, _ref, _results;
                    if (typeof (_base1 = _this.productListing).custom === "function") {
                      _base1.custom();
                    }
                    if (_this.productListing.selectors) {
                      _ref = _this.productListing.selectors;
                      _results = [];
                      for (selector in _ref) {
                        params = _ref[selector];
                        _results.push(doInitProducts(selector, params));
                      }
                      return _results;
                    } else {
                      return doInitProducts(_this.productListing.image, _this.productListing);
                    }
                  };
                  $(initProducts);
                  Q(window).load(initProducts);
                  Q.setInterval(initProducts, 2000);
                  if (_this.productListing.image) {
                    that = _this;
                    Q('body').delegate(_this.productListing.image, 'mouseenter', function() {
                      var a, href, img, productData;
                      img = this;
                      a = $(img).parents('a');
                      href = a.prop('href');
                      productData = that.productListing.productData.call(that, href, a, $(img));
                      if (productData) {
                        return that.initProductEl(this, productData, {
                          overlay: false
                        });
                      }
                    });
                  }
                } else {
                  window.initProducts = initProducts = function() {
                    var a, contEl, href, img, imgEl, productSid, _i, _len, _ref, _results;
                    _ref = $(_this.productListing.image);
                    _results = [];
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      img = _ref[_i];
                      a = $(img).parents('a');
                      href = a.prop('href');
                      productSid = _this.productListing.productSid.call(_this, href, a, $(img));
                      if (productSid) {
                        if (_this.productListing.container && $(img).parents(_this.productListing.container).length) {
                          contEl = $(img).parents(_this.productListing.container);
                          _this.initProductEl(contEl, {
                            productSid: productSid
                          }, {
                            image: false,
                            overlayZIndex: _this.productListing.overlayZIndex,
                            overlayPosition: _this.productListing.overlayPosition
                          });
                          _results.push((function() {
                            var _j, _len1, _ref1, _results1;
                            _ref1 = a.find('img');
                            _results1 = [];
                            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                              imgEl = _ref1[_j];
                              _results1.push(this.initProductEl(imgEl, {
                                productSid: productSid
                              }, {
                                overlay: false
                              }));
                            }
                            return _results1;
                          }).call(_this));
                        } else {
                          _results.push(_this.initProductEl(img, {
                            productSid: productSid
                          }, {
                            overlayPosition: _this.productListing.overlayPosition
                          }));
                        }
                      } else {
                        _results.push(void 0);
                      }
                    }
                    return _results;
                  };
                  $(initProducts);
                  $(window).load(initProducts);
                  Q.setInterval(initProducts, 2000);
                }
              }
              return $(function() {
                var lastProductSid, overlay, overlayEl, update, _base1, _ref, _ref1;
                if ((_ref = _this.productPage) != null ? typeof _ref.test === "function" ? _ref.test() : void 0 : void 0) {
                  console.debug('product page');
                  if (_this.productPage.initPage) {
                    _this.productPage.initPage.call(_this);
                  }
                  if (_this.productPage.mode === 2) {
                    if (_this.productPage.overlay) {
                      if ((_base1 = _this.productPage).hideOverlay == null) {
                        _base1.hideOverlay = true;
                      }
                      overlay = _this.productPage.overlay;
                      Q('body').delegate(overlay, 'mouseover', function() {
                        var down, event;
                        $(overlay).unbind('.agora');
                        down = false;
                        event = null;
                        return Q(overlay).bind('mousedown.agora', function(e) {
                          down = true;
                          Q('html').disableSelection();
                          e.preventDefault();
                          event = e;
                          return true;
                        }).bind('mouseup.agora', function() {
                          down = false;
                          return true;
                        }).bind('mousemove.agora', function(e) {
                          var el, selector, _i, _len, _ref1;
                          if (down) {
                            down = false;
                            selector = _this.productPage.image;
                            _ref1 = $(selector);
                            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
                              el = _ref1[_i];
                              _this.clearProductEl(el);
                              _this.initProductEl(el, {
                                productSid: _this.productPage.productSid.call(_this),
                                variant: _this.productPage.variant
                              }, {
                                overlay: false
                              });
                            }
                            return setTimeout((function() {
                              if (_this.productPage.hideOverlay) {
                                Q(overlay).hide();
                              }
                              console.debug($(selector));
                              $(selector).trigger(event);
                              return $('html').one('mouseup', function() {
                                $('html').enableSelection();
                                if (_this.productPage.hideOverlay) {
                                  return $(overlay).show();
                                }
                              });
                            }), 100);
                          }
                        });
                      });
                    }
                    if (_this.productPage.image) {
                      that = _this;
                      lastProductSid = null;
                      Q('body').delegate(_this.productPage.image, 'mouseenter', function() {
                        var img, productSid;
                        img = this;
                        productSid = that.productPage.productSid.call(that);
                        that.clearProductEl(this);
                        return that.initProductEl(this, {
                          productSid: productSid,
                          variant: that.productPage.variant
                        }, {
                          overlay: false
                        });
                      });
                    }
                    update = function() {
                      var _ref1, _ref2;
                      console.debug(_this.productPage.productSid.call(_this));
                      _this.removeOverlay($(_this.productPage.attach));
                      return _this.attachOverlay({
                        attachEl: $(_this.productPage.attach),
                        positionEl: $((_ref1 = _this.productPage.position) != null ? _ref1 : _this.productPage.image),
                        productData: {
                          productSid: _this.productPage.productSid.call(_this)
                        },
                        overlayZIndex: (_ref2 = _this.productPage.zIndex) != null ? _ref2 : 9999,
                        init: function(overlay) {
                          return overlay.addAlwaysShow('productPage');
                        }
                      });
                    };
                    return _this.waitFor(_this.productPage.attach, function() {
                      lastProductSid = null;
                      return Q.setInterval((function() {
                        var productSid;
                        productSid = _this.productPage.productSid.call(_this);
                        if (productSid && productSid !== lastProductSid) {
                          lastProductSid = productSid;
                          return update();
                        }
                      }), 500);
                    });
                  } else {
                    if (_this.productPage.overlayEl) {
                      overlayEl = _this.productPage.overlayEl;
                      Q('body').delegate(overlayEl, 'mouseover', function() {
                        var down, event;
                        $(overlayEl).unbind('.agora');
                        down = false;
                        event = null;
                        return Q(overlayEl).bind('mousedown.agora', function(e) {
                          down = true;
                          Q('html').disableSelection();
                          e.preventDefault();
                          event = e;
                          return true;
                        }).bind('mouseup.agora', function() {
                          down = false;
                          return true;
                        }).bind('mousemove.agora', function(e) {
                          var selector;
                          if (down) {
                            down = false;
                            selector = _this.productPage.imgEl;
                            return setTimeout((function() {
                              Q(overlayEl).hide();
                              $(selector).trigger(event);
                              return $('html').one('mouseup', function() {
                                $('html').enableSelection();
                                return $(overlayEl).show();
                              });
                            }), 100);
                          }
                        });
                      });
                    }
                    update = function() {
                      var el, _ref1;
                      console.debug(_this.productPage.productSid.call(_this));
                      if (_this.productPage.initProduct) {
                        return _this.productPage.initProduct.call(_this);
                      } else {
                        el = _this.productPage.imgEl;
                        _this.clearProductEl(el);
                        return _this.initProductEl(el, {
                          productSid: _this.productPage.productSid.call(_this)
                        }, {
                          overlayZIndex: (_ref1 = _this.productPage.overlayZIndex) != null ? _ref1 : 1000,
                          initOverlay: function(overlay) {
                            return overlay.addAlwaysShow('productPage');
                          }
                        });
                      }
                    };
                    return _this.waitFor((_ref1 = _this.productPage.waitFor) != null ? _ref1 : _this.productPage.imgEl, function() {
                      lastProductSid = null;
                      return Q.setInterval((function() {
                        var productSid;
                        productSid = _this.productPage.productSid.call(_this);
                        if (productSid && productSid !== lastProductSid) {
                          lastProductSid = productSid;
                          return update();
                        }
                      }), 1000);
                    });
                  }
                }
              });
            };
          })(this));
        };

        return DataDrivenSiteInjector;

      })(SiteInjector);
    }
  };
});

//# sourceMappingURL=DataDrivenSiteInjector.map
