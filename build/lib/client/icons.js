// Generated by CoffeeScript 1.10.0
define(function() {
  return {
    d: [],
    c: function() {
      return {
        get: function(type, opts) {
          var component, components, file, has2x, i, j, len, map, name, position, ref, size, sizes, systems;
          if (opts == null) {
            opts = {};
          }
          systems = {
            computer: ['harddrive', 'monitor', 'cpu', 'ram', 'motherboard', 'graphicsCard', 'powerSupply', 'keyboard', 'mouse', 'soundcard', 'cooling', 'speakers']
          };
          map = {};
          for (name in systems) {
            components = systems[name];
            for (i = j = 0, len = components.length; j < len; i = ++j) {
              component = components[i];
              map[component] = {
                system: name,
                position: i
              };
            }
          }
          file = position = size = null;
          has2x = true;
          file = type;
          if (opts.color == null) {
            opts.color = 'darkGray';
          }
          if (opts.inverted) {
            file += '(inverted)';
          }
          if (opts.color === 'white') {
            file += 'White';
          } else if (opts.color === 'lightGray') {
            file += 'LightGray';
          } else if (opts.color === 'darkGray') {
            file += 'DarkGray';
          } else {
            throw new Error('invalid color');
          }
          if (opts.size === 'large') {
            file += 'Large';
          }
          if (has2x && typeof window.devicePixelRatio !== 'undefined' && window.devicePixelRatio > 1) {
            file += '@2x';
          }
          sizes = opts.inverted ? {} : opts.size === 'large' ? {
            babyToy: {
              width: 102,
              height: 103
            },
            list: {
              width: 109,
              height: 117
            },
            trousers: {
              width: 93,
              height: 82
            }
          } : {
            list: {
              width: 24,
              height: 24
            },
            computer: {
              width: 30,
              height: 32
            },
            bundle: {
              width: 30,
              height: 27
            },
            babyToy: {
              width: 30,
              height: 30
            },
            trousers: {
              width: 24,
              height: 21
            }
          };
          size = (ref = sizes[type]) != null ? ref : {
            width: 48,
            height: 48
          };
          if (opts.size === 'small') {
            size.width /= 2;
            size.height /= 2;
          }
          return {
            position: position,
            file: "images/icons/" + file + ".png",
            size: size
          };
        },
        setIcon: function(el, type, opts) {
          var iconInfo, ref;
          if (opts == null) {
            opts = {};
          }
          if (!type) {
            return this.clearIcon(el);
          } else {
            iconInfo = this.get(type, opts);
            if ((ref = opts.itemClass) != null ? ref : true) {
              el.addClass('t-item');
            }
            if (opts.inverted) {
              el.addClass('icon-inverted');
            }
            if (iconInfo.position) {
              el.css({
                backgroundPosition: "-" + iconInfo.position.left + "px -" + iconInfo.position.top + "px"
              });
            } else {
              el.css({
                backgroundPosition: 'center'
              });
            }
            el.css({
              backgroundImage: "url('" + (contentScript.resourceUrl(iconInfo.file)) + "')",
              backgroundRepeat: 'no-repeat'
            });
            if (opts.size === 'contain') {
              return el.css({
                backgroundSize: 'contain'
              });
            } else if (iconInfo.size) {
              return el.css({
                backgroundSize: iconInfo.size.width + "px " + iconInfo.size.height + "px"
              });
            }
          }
        },
        clearIcon: function(el) {
          el.removeClass('icon-inverted');
          return el.css({
            backgroundPosition: '',
            backgroundImage: '',
            backgroundRepeat: ''
          });
        }
      };
    }
  };
});

//# sourceMappingURL=icons.js.map
