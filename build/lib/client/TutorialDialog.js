// Generated by CoffeeScript 1.7.1
define(function() {
  return function() {
    var TutorialDialog;
    return TutorialDialog = (function() {
      function TutorialDialog(steps, step) {
        var i, _i;
        this.steps = steps;
        this.step = step;
        this.pointerEl = $('<div class="-agora tutorialPointer"><span class="frame" /><span class="frameNoArrow" /><span class="logo" /></div>');
        this.frameEl = $('<div class="-agora tutorialDialog"> <div class="steps" /> <div class="cont" /> <div class="audioControls"><a href="#" class="replay" /><a href="#" class="mute" /></div> </div>');
        if (this.steps) {
          for (i = _i = 1; 1 <= steps ? _i <= steps : _i >= steps; i = 1 <= steps ? ++_i : --_i) {
            this.frameEl.find('.steps').append($('<span class="step" />'));
          }
        }
        this.frameEl.css({
          position: 'absolute'
        });
        this.frameEl.appendTo(document.body);
        this.pointerEl.css({
          position: 'absolute'
        });
        this.pointerEl.appendTo(document.body);
        this.pointerEl.hide();
        this.frameEl.hide();
        this.distance = 50;
        this.currentStep = step;
        this.setMuted = (function(_this) {
          return function(muted) {
            _this.muted = muted;
            if (_this.muted) {
              _this.frameEl.addClass("muted");
            } else {
              _this.frameEl.removeClass("muted");
            }
            if (_this.audio) {
              _this.audio.muted = _this.muted;
            }
            chrome.storage.local.set({
              tutorial: {
                muted: _this.muted
              }
            });
          };
        })(this);
        chrome.storage.local.get("tutorial", (function(_this) {
          return function(data) {
            if (data.tutorial) {
              return _this.setMuted(data.tutorial.muted);
            }
          };
        })(this));
        this.frameEl.find(".audioControls .mute").click((function(_this) {
          return function() {
            _this.setMuted(!_this.muted);
            return false;
          };
        })(this));
        this.frameEl.find(".audioControls .replay").click((function(_this) {
          return function() {
            if (_this.audio) {
              _this.audio.currentTime = 0;
              _this.audio.play();
            }
            return false;
          };
        })(this));
      }

      TutorialDialog.prototype.showCenter = function(width, content, cb) {
        if (cb == null) {
          cb = null;
        }
        return this.show({
          left: $(window).width() / 2,
          top: $(window).height() / 4,
          pointer: false,
          width: width
        }, 'below', content, cb);
      };

      TutorialDialog.prototype.show = function(anchorEl, orientation, content, cb) {
        var adjust, anchorHeight, anchorPos, anchorWidth, audioUrl, calcFramePos, factor, framePos, frameSize, next, playAudio, pointer, pointerAngle, pointerPos, transitionAngle, updateSteps, _ref;
        if (cb == null) {
          cb = null;
        }
        framePos = pointerPos = pointerAngle = null;
        this.pointerEl.show();
        this.frameEl.show();
        anchorPos = anchorWidth = anchorHeight = pointer = null;
        audioUrl = void 0;
        if (content.audio) {
          audioUrl = content.audio;
        }
        if (content.text) {
          content = content.text;
        }
        adjust = 0;
        if (_.isPlainObject(orientation)) {
          if ('adjust' in orientation) {
            adjust = orientation.adjust;
          }
          orientation = orientation.orientation;
        }
        if ('top' in anchorEl && 'left' in anchorEl) {
          anchorPos = anchorEl;
          anchorWidth = anchorHeight = 0;
          pointer = (_ref = anchorEl.pointer) != null ? _ref : true;
        } else {
          anchorPos = anchorEl.offset();
          anchorWidth = anchorEl.outerWidth();
          anchorHeight = anchorEl.outerHeight();
          pointer = true;
        }
        next = (function(_this) {
          return function() {
            if (anchorEl.top && anchorEl.left) {
              if (anchorEl.width) {
                return _this.frameEl.css({
                  maxWidth: anchorEl.width
                });
              } else {
                return _this.frameEl.css({
                  maxWidth: ''
                });
              }
            } else {
              return _this.frameEl.css({
                maxWidth: ''
              });
            }
          };
        })(this);
        calcFramePos = (function(_this) {
          return function() {
            var pos;
            pos = (function() {
              switch (orientation) {
                case 'left':
                  return {
                    left: anchorPos.left - this.frameEl.outerWidth() - this.distance,
                    top: anchorPos.top + anchorHeight / 2 - this.frameEl.outerHeight() / 2
                  };
                case 'right':
                  return {
                    left: anchorPos.left + anchorWidth + this.distance + (adjust != null ? adjust : 0),
                    top: anchorPos.top + anchorHeight / 2 - this.frameEl.outerHeight() / 2
                  };
                case 'above':
                  return {
                    left: anchorPos.left + anchorWidth / 2 - this.frameEl.outerWidth() / 2,
                    top: anchorPos.top - this.frameEl.outerHeight() - this.distance
                  };
                case 'below':
                  return {
                    left: anchorPos.left + anchorWidth / 2 - this.frameEl.outerWidth() / 2,
                    top: anchorPos.top + anchorHeight + this.distance
                  };
              }
            }).call(_this);
            pos.left = Math.max(5, Math.min($(window).width() - 5, pos.left));
            pos.top = Math.max(0, Math.min($(window).height() + $(window).scrollTop() - _this.frameEl.outerHeight(), pos.top));
            return pos;
          };
        })(this);
        frameSize = 55;
        factor = .57;
        switch (orientation) {
          case 'left':
            pointerPos = {
              left: anchorPos.left - frameSize - this.distance + frameSize * factor,
              top: anchorPos.top + anchorHeight / 2 - this.pointerEl.outerHeight() / 2
            };
            pointerAngle = '90deg';
            break;
          case 'right':
            pointerPos = {
              left: anchorPos.left + anchorWidth + this.distance - frameSize * factor + (adjust != null ? adjust : 0),
              top: anchorPos.top + anchorHeight / 2 - this.pointerEl.outerHeight() / 2
            };
            if (this.prevPointerAngle === '-180deg') {
              pointerAngle = '-90deg';
            } else if (this.prevPointerAngle === '180deg') {
              pointerAngle = '270deg';
            } else {
              pointerAngle = '-90deg';
            }
            break;
          case 'above':
            pointerPos = {
              left: anchorPos.left + anchorWidth / 2 - frameSize / 2,
              top: anchorPos.top - this.pointerEl.outerHeight() - this.distance + this.pointerEl.height() * factor
            };
            if (this.prevOrientation === 'right') {
              pointerAngle = '-180deg';
            } else {
              pointerAngle = '180deg';
            }
            break;
          case 'below':
            pointerPos = {
              left: anchorPos.left + anchorWidth / 2 - frameSize / 2,
              top: anchorPos.top + anchorHeight + this.distance - this.pointerEl.height() * factor
            };
            pointerAngle = '0deg';
        }
        transitionAngle = this.prevOrientation !== orientation;
        this.prevOrientation = orientation;
        this.prevPointerAngle = pointerAngle;
        updateSteps = (function(_this) {
          return function() {
            var contWidth, el, i, marginLeft, stepWidth, _i, _len, _ref1;
            stepWidth = 10;
            contWidth = _this.frameEl.find('.cont').width();
            marginLeft = (contWidth - stepWidth * _this.steps) / (_this.steps - 1);
            _ref1 = _this.frameEl.find('.steps .step');
            for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
              el = _ref1[i];
              if (i !== 0) {
                $(el).css('marginLeft', marginLeft);
              }
              if (i + 1 <= _this.step) {
                $(el).addClass('filled');
              }
            }
            return ++_this.step;
          };
        })(this);
        playAudio = (function(_this) {
          return function() {
            if (_this.audio) {
              if (_this.muted) {
                _this.audio.muted = true;
              }
              return _this.audio.play();
            }
          };
        })(this);
        if (this.audio) {
          this.audio.pause();
        }
        if (audioUrl) {
          this.audio = new Audio(audioUrl);
        } else {
          this.audio = null;
        }
        if (!this.shown) {
          next();
          this.shown = true;
          this.frameEl.find('.cont').append(content);
          this.frameEl.css(calcFramePos());
          this.pointerEl.css(pointerPos);
          this.prevPointer = pointer;
          setTimeout(updateSteps, 0);
          if (pointer) {
            this.pointerEl.find('.frame').css({
              transform: "rotate(" + pointerAngle + ")"
            });
            this.pointerEl.find('.frameNoArrow').hide();
          } else {
            this.pointerEl.find('.frame').hide();
            this.pointerEl.find('.frameNoArrow').show();
          }
          playAudio();
          return typeof cb === "function" ? cb() : void 0;
        } else {
          return this.frameEl.fadeOut((function(_this) {
            return function() {
              next();
              _this.frameEl.find('.cont').html('').append(content);
              _this.pointerEl.animate(pointerPos, function() {
                _this.frameEl.css(calcFramePos());
                setTimeout(updateSteps, 0);
                return _this.frameEl.fadeIn(function() {
                  playAudio();
                  return typeof cb === "function" ? cb() : void 0;
                });
              });
              if (_this.prevPointer === pointer) {
                if (pointer) {
                  if (transitionAngle) {
                    _this.pointerEl.find('.frame').animate({
                      transform: "rotate(" + pointerAngle + ")"
                    });
                  }
                }
              } else {
                if (pointer) {
                  _this.pointerEl.find('.frame').css({
                    transform: "rotate(" + pointerAngle + ")"
                  }).fadeIn();
                  _this.pointerEl.find('.frameNoArrow').fadeOut();
                } else {
                  _this.pointerEl.find('.frame').fadeOut();
                  _this.pointerEl.find('.frameNoArrow').fadeIn();
                }
              }
              return _this.prevPointer = pointer;
            };
          })(this));
        }
      };

      TutorialDialog.prototype.close = function() {
        this.frameEl.fadeOut();
        if (this.audio) {
          this.audio.pause();
        }
        return this.pointerEl.fadeOut();
      };

      return TutorialDialog;

    })();
  };
});

//# sourceMappingURL=TutorialDialog.map
