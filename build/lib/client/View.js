// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

define(function() {
  return function() {
    var ClientArray, ClientObject, ClientValue, Event, ListInterface, ValueInterface, View, deserialize;
    ClientObject = (function() {
      function ClientObject(args) {
        this.args = args;
        this._id = args._id, this.contentScript = args.contentScript, this._name = args._name, this.view = args.view;
        this.listener = (function(_this) {
          return function(data) {
            var eventType, observer, _i, _len, _ref, _results;
            data = _.clone(data);
            eventType = data.event;
            delete data.event;
            switch (eventType) {
              case 'mutation':
                if (typeof _this.onMutation === "function") {
                  _this.onMutation(data);
                }
                if (_this.observers) {
                  _ref = _this.observers;
                  _results = [];
                  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                    observer = _ref[_i];
                    _results.push(observer(data));
                  }
                  return _results;
                }
                break;
              case 'disconnection':
                return _this.clearObservers();
            }
          };
        })(this);
        this.contentScript.mapEvent("ClientObjectEvent:" + this._id, this._name);
        this.contentScript.listen("ClientObjectEvent:" + this._id, this.listener, this.args.view);
      }

      ClientObject.prototype.observe = function(cb, tag) {
        if (!cb) {
          throw new Error('Null observer');
        }
        if (this.observers == null) {
          this.observers = [];
        }
        this.observers.push(cb);
        if (this.tags == null) {
          this.tags = [];
        }
        return this.tags.push(tag);
      };

      ClientObject.prototype.stopObserving = function(observer) {
        var index;
        if (this.observers) {
          index = this.observers.indexOf(observer);
          if (index !== -1) {
            return this.observers.splice(index, 1);
          }
        }
      };

      ClientObject.prototype.clearObservers = function() {
        this.observers = null;
        return this.tags = null;
      };

      ClientObject.prototype.clearObjs = function(removeFromView) {
        var obj, _i, _len, _ref;
        if (removeFromView == null) {
          removeFromView = true;
        }
        if (this.objs) {
          _ref = this.objs;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            obj = _ref[_i];
            obj.destruct(removeFromView);
          }
          return delete this.objs;
        }
      };

      ClientObject.prototype.destruct = function(removeFromView) {
        if (removeFromView == null) {
          removeFromView = true;
        }
        this.clearObservers();
        if (removeFromView && this.view) {
          this.view.clientObjects.splice(this.view.clientObjects.indexOf(this), 1);
        }
        this.clearObjs(removeFromView);
        return this.contentScript.stopListening("ClientObjectEvent:" + this._id, this.listener, this);
      };

      ClientObject.prototype.setObjs = function(objs) {
        return this.objs = objs;
      };

      ClientObject.prototype.deserialize = function(data, objs) {
        if (this.view) {
          return this.view.deserialize(data, objs);
        } else {
          return deserialize(data, {
            ClientArray: ClientArray,
            ClientValue: ClientValue
          }, {
            contentScript: this.contentScript
          }, null, objs);
        }
      };

      return ClientObject;

    })();
    ClientArray = (function(_super) {
      __extends(ClientArray, _super);

      ClientArray.prototype.__type = 'ClientArray';

      function ClientArray(args) {
        ClientArray.__super__.constructor.apply(this, arguments);
        this._array = args._array;
      }

      ClientArray.prototype.each = function(cb) {
        return _.each(this._array, cb);
      };

      ClientArray.prototype.forEach = function(cb) {
        return this.each(cb);
      };

      ClientArray.prototype.setArray = function(array) {
        return this._array = array;
      };

      ClientArray.prototype["delete"] = function(pos) {
        return this._array.splice(pos, 1);
      };

      ClientArray.prototype.insert = function(el, pos) {
        if (pos === 0) {
          return this._array.unshift(el);
        } else if (pos === this._array.length) {
          return this._array.push(el);
        } else {
          return this._array.splice(pos, 0, el);
        }
      };

      ClientArray.prototype.move = function(from, to) {
        var el;
        if (from !== to) {
          el = this._array.splice(from, 1)[0];
          return this._array.splice(to, 0, el);
        }
      };

      ClientArray.prototype._sync = function(obj) {
        return this.setArray(this.view.deserialize(obj._array));
      };

      ClientArray.prototype.onMutation = function(mutation) {
        switch (mutation.type) {
          case 'insertion':
            return this.insert(this.view.deserialize(mutation.value), mutation.position);
          case 'deletion':
            return this["delete"](mutation.position);
          case 'movement':
            return this.move(mutation.from, mutation.to);
          case 'setArray':
            return this.setArray(this.view.deserialize(mutation.array));
        }
      };

      ClientArray.prototype.get = function(i) {
        return this._array[i];
      };

      ClientArray.prototype.length = function() {
        return this._array.length;
      };

      return ClientArray;

    })(ClientObject);
    window.ClientValue = ClientValue = (function(_super) {
      __extends(ClientValue, _super);

      ClientValue.prototype.__type = 'ClientValue';

      function ClientValue(args) {
        ClientValue.__super__.constructor.apply(this, arguments);
        this._scalar = args._scalar;
      }

      ClientValue.prototype._set = function(value) {
        this.clearObjs();
        this.objs = [];
        return this._scalar = this.deserialize(value, this.objs);
      };

      ClientValue.prototype._sync = function(obj) {
        return this._set(obj._scalar);
      };

      ClientValue.prototype.onMutation = function(mutation) {
        return this._set(mutation.value);
      };

      ClientValue.prototype.get = function() {
        return this._scalar;
      };

      return ClientValue;

    })(ClientObject);
    deserialize = function(obj, classMap, extraArgs, passThru, objs) {
      var className, classObj, i, item, name, theseObjs, value, _i, _len;
      if (_.isObject(obj)) {
        obj = _.clone(obj);
        if (_.isArray(obj)) {
          for (i = _i = 0, _len = obj.length; _i < _len; i = ++_i) {
            item = obj[i];
            obj[i] = deserialize(item, classMap, extraArgs, passThru, objs);
          }
        } else {
          if (className = obj.__class__) {
            delete obj.__class__;
            if (classObj = classMap[className]) {
              theseObjs = [];
              obj = new classObj(_.extend(deserialize(obj, classMap, extraArgs, passThru, theseObjs), extraArgs));
              if (typeof obj.setObjs === "function") {
                obj.setObjs(theseObjs);
              }
              if (typeof passThru === "function") {
                passThru(obj);
              }
              if (objs != null) {
                objs.push(obj);
              }
            } else {
              throw new Error("no class " + className);
            }
          } else if (obj.constructor === Object) {
            for (name in obj) {
              value = obj[name];
              obj[name] = deserialize(value, classMap, extraArgs, passThru, objs);
            }
          }
        }
      }
      return obj;
    };
    ValueInterface = (function() {
      function ValueInterface(view, el, attr) {
        this.view = view;
        this.el = el;
        this.attr = attr != null ? attr : null;
      }

      ValueInterface.prototype.setMapping = function(mapping) {
        this.mapping = mapping;
        return this;
      };

      ValueInterface.prototype.set = function(value) {
        this.value = value;
        if (this.mapping) {
          value = this.mapping(value);
        }
        if (this.attr) {
          return this.el.attr(this.attr, value);
        } else {
          return this.el.html(value);
        }
      };

      ValueInterface.prototype.get = function() {
        return this.value;
      };

      ValueInterface.prototype.setDataSource = function(dataSource, trigger) {
        this.dataSource = dataSource;
        this.trigger = trigger;
        if (this._observer) {
          dataSource.stopObserving(this._observer);
        }
        this.set(dataSource.get());
        if (typeof this.trigger === "function") {
          this.trigger(dataSource.get(), this.el);
        }
        return dataSource.observe(this._observer = (function(_this) {
          return function(mutation) {
            _this.set(mutation.value);
            return typeof _this.trigger === "function" ? _this.trigger(mutation.value, _this.el) : void 0;
          };
        })(this));
      };

      ValueInterface.prototype.destruct = function() {
        if (this._observer) {
          return this.dataSource.stopObserving(this._observer);
        }
      };

      return ValueInterface;

    })();
    ListInterface = (function() {
      ListInterface.id = 1;

      ListInterface.prototype.setDataSource = function(dataSource) {
        var _ref;
        if ((_ref = this.dataSource) != null) {
          _ref.stopObserving(this._observer);
        }
        this.dataSource = dataSource;
        this.set(dataSource);
        return dataSource.observe(this._observer = (function(_this) {
          return function(mutation) {
            switch (mutation.type) {
              case 'insertion':
                return _this.insert(_this.view.deserialize(mutation.value), mutation.position);
              case 'deletion':
                return _this["delete"](mutation.position);
              case 'movement':
                return _this.move(mutation.from, mutation.to);
              case 'setArray':
                return _this.set(_this.view.deserialize(mutation.array));
            }
          };
        })(this));
      };

      ListInterface.prototype.destruct = function() {
        var _ref;
        return (_ref = this.dataSource) != null ? _ref.stopObserving(this._observer) : void 0;
      };

      function ListInterface(view, el, selector, mapping) {
        this.view = view;
        this.el = el;
        this.selector = selector;
        this.mapping = mapping;
        this.id = ListInterface.id++;
        this.template = $(el.find(this.selector).get(0));
        if (this.template.length === 0) {
          throw new Error('Failed to find template');
        }
        this.prevSibling = this.template.prev();
        this.nextSibling = this.template.next();
        this.parent = this.template.parent();
        if (this.parent.length === 0) {
          throw new Error("BAD");
        }
        this.els = [];
        this.deleteCbs = [];
      }

      ListInterface.prototype.get = function(position) {
        return this.els[position];
      };

      ListInterface.prototype.clear = function() {
        var cb, _i, _len, _ref;
        this.el.find(this.selector).remove();
        this.els = [];
        _ref = this.deleteCbs;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          cb = _ref[_i];
          if (typeof cb === "function") {
            cb();
          }
        }
        this.deleteCbs = [];
        return typeof this.onLengthChanged === "function" ? this.onLengthChanged() : void 0;
      };

      ListInterface.prototype.set = function(data) {
        this.clear();
        data.forEach((function(_this) {
          return function(item, i) {
            return _this.insert(item, i, false);
          };
        })(this));
        return typeof this.onMutation === "function" ? this.onMutation() : void 0;
      };

      ListInterface.prototype["delete"] = function(i) {
        var el, _base;
        el = this.els[i];
        this.els.splice(i, 1);
        if (this.onDelete) {
          this.onDelete(el, function() {
            return el.remove();
          });
        } else {
          el.remove();
        }
        if (typeof (_base = this.deleteCbs)[i] === "function") {
          _base[i]();
        }
        this.deleteCbs.splice(i, 1);
        if (typeof this.onLengthChanged === "function") {
          this.onLengthChanged();
        }
        return typeof this.onMutation === "function" ? this.onMutation() : void 0;
      };

      ListInterface.prototype.insert = function(data, pos, signalMutation) {
        var el, next, setDeleteCb;
        if (signalMutation == null) {
          signalMutation = true;
        }
        setDeleteCb = (function(_this) {
          return function(cb) {
            return _this.deleteCbs.splice(pos, 0, cb);
          };
        })(this);
        el = this.mapping(this.template.clone(), data, pos, setDeleteCb);
        next = this.els[pos];
        if (next) {
          this.parent.get(0).insertBefore(el.get(0), next.get(0));
        } else {
          this.parent.get(0).insertBefore(el.get(0), this.nextSibling.get(0));
        }
        if (pos === 0) {
          this.els.unshift(el);
        } else if (pos === this.els.length) {
          this.els.push(el);
        } else {
          this.els.splice(pos, 0, el);
        }
        if (typeof this.onInsert === "function") {
          this.onInsert(el);
        }
        if (typeof this.onLengthChanged === "function") {
          this.onLengthChanged();
        }
        if (signalMutation) {
          return typeof this.onMutation === "function" ? this.onMutation() : void 0;
        }
      };

      ListInterface.prototype.push = function(data) {
        return this.insert(data, this.els.length);
      };

      ListInterface.prototype.move = function(from, to) {
        var el;
        el = this.els[from];
        if (from > to) {
          el.detach().insertBefore(this.els[to]);
        } else {
          el.detach().insertAfter(this.els[to]);
        }
        el = this.els.splice(from, 1)[0];
        this.els.splice(to, 0, el);
        el = this.deleteCbs.splice(from, 1)[0];
        this.deleteCbs.splice(to, 0, el);
        if (typeof this.onMove === "function") {
          this.onMove(from, to);
        }
        return typeof this.onMutation === "function" ? this.onMutation() : void 0;
      };

      ListInterface.prototype.length = function() {
        return this.els.length;
      };

      return ListInterface;

    })();
    Event = (function() {
      function Event() {
        this.subscribers = [];
      }

      Event.prototype.subscribe = function(subscriber) {
        return this.subscribers.push(subscriber);
      };

      Event.prototype.fire = function() {
        var args, subscriber, _i, _len, _ref, _results;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        _ref = this.subscribers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          subscriber = _ref[_i];
          _results.push(subscriber.apply(null, args));
        }
        return _results;
      };

      return Event;

    })();
    window.View_views = {};
    window.View_nextClientId = 1;
    return View = (function() {
      View.flexibleViews = {};

      View.clear = function() {
        var View_nextClientId, View_views, id, view;
        for (id in View_views) {
          view = View_views[id];
          view.destruct();
        }
        View_views = {};
        View_nextClientId = 1;
        return this.flexibleViews = {};
      };

      View.windowResized = function() {
        clearTimeout(this.resizeTimerId);
        return this.resizeTimerId = setTimeout(((function(_this) {
          return function() {
            var view, viewId, _ref, _results;
            _ref = _this.flexibleViews;
            _results = [];
            for (viewId in _ref) {
              view = _ref[viewId];
              _results.push(typeof view.updateLayout === "function" ? view.updateLayout() : void 0);
            }
            return _results;
          };
        })(this)), 50);
      };

      View.isClientValue = function(obj) {
        return obj.__type === 'ClientValue';
      };

      View.isClientArray = function(obj) {
        return obj.__type === 'ClientArray';
      };

      View.createView = function() {
        var args, className, view;
        className = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        view = null;
        if (className) {
          if (!className.match(/View$/)) {
            className += 'View';
          }
          eval("klass = " + className);
          if (args && args.length) {
            view = (function(func, args, ctor) {
              ctor.prototype = func.prototype;
              var child = new ctor, result = func.apply(child, args);
              return Object(result) === result ? result : child;
            })(klass, [contentScript].concat(__slice.call(args)), function(){});
          } else {
            view = new klass(contentScript);
          }
        } else {
          view = new View(contentScript);
        }
        return view;
      };

      View.prototype.withData = function(data, cb) {
        if (data.get() != null) {
          cb(data.get());
        }
        return data.observe(function(mutation) {
          return cb(data.get(), mutation);
        });
      };

      function View() {
        var args, contentScript;
        contentScript = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        this.contentScript = contentScript;
        this.clientId = View_nextClientId++;
        this.clientObjects = [];
        this.observedObjects = [];
        this.views = [];
        this.interfaces = [];
        this.trackingViews = [];
        this.mouseEnteredCount = 0;
        this.prevMouseEnteredCount = 0;
        if (typeof this.init === "function") {
          this.init.apply(this, args);
        }
        if (this.flexibleLayout) {
          View.flexibleViews[this.clientId] = this;
        }
        if (!View.inited) {
          View.inited = true;
          $(window).resize(function() {
            return View.windowResized();
          });
        }
        this.events = {
          onDestruct: new Event
        };
      }

      View.prototype.alsoRepresent = function(view) {
        if (this.representList == null) {
          this.representList = [];
        }
        return this.representList.push(view);
      };

      View.prototype.useEl = function(el) {
        this.el = el;
        el.data('view', this);
        el.mouseenter((function(_this) {
          return function() {
            return _this._mouseenter(true);
          };
        })(this));
        el.mouseleave((function(_this) {
          return function() {
            return _this._mouseleave(true);
          };
        })(this));
        return el;
      };

      View.prototype.viewEl = function(html) {
        var el;
        el = $(html);
        this.useEl(el);
        return el;
      };

      View.prototype.createView = function() {
        var args, className, view;
        className = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        view = View.createView.apply(View, [className].concat(__slice.call(args)));
        this.views.push(view);
        view.parent = this;
        return view;
      };

      View.prototype.view = function() {
        return this.createView.apply(this, arguments);
      };

      View.prototype.syncWithValue = function(value, cb) {
        cb(value.get());
        return this.observe(value, function() {
          return cb(value.get());
        });
      };

      View.prototype.isAttached = function() {
        return typeof this.id !== 'undefined';
      };

      View.prototype.attach = function(cb) {
        if (!this.type) {
          throw new Error('No type!');
        }
        return this.contentScript.triggerBackgroundEvent('CreateView', {
          type: this.type
        }, (function(_this) {
          return function(response) {
            _this.id = response.id;
            if (_this.el) {
              _this.el.attr('agora:id', _this.id);
            }
            View_views[_this.id] = _this;
            _this.contentScript.listen("ViewMethod:" + _this.id, function(args) {
              return _this.callMethod(args.name, args.params);
            });
            if (cb) {
              return cb();
            }
          };
        })(this));
      };

      View.prototype.detach = function() {
        this.clearClientObjects();
        this.contentScript.stopListening("ViewMethod:" + this.id);
        if (this.id != null) {
          return this.contentScript.triggerBackgroundEvent('DeleteView', {
            id: this.id
          });
        }
      };

      View.prototype.represent = function(args, cb) {
        var view, _i, _len, _ref;
        this.args = args;
        if (this.isAttached()) {
          if (typeof this.onRepresent === "function") {
            this.onRepresent(this.args);
          }
          if (this.representList) {
            _ref = this.representList;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              view = _ref[_i];
              view.represent(this.args);
            }
          }
          return this.contentScript.triggerBackgroundEvent('ConnectView', {
            id: this.id,
            args: args
          }, (function(_this) {
            return function(response) {
              var clientObject, ids, map, _j, _len1, _ref1;
              if (response === false) {

              } else {
                _this.data = _this.deserialize(response.data);
                map = {};
                ids = [];
                _ref1 = _this.clientObjects;
                for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                  clientObject = _ref1[_j];
                  ids.push(clientObject._id);
                  map[clientObject._id] = clientObject;
                }
                return _this.contentScript.triggerBackgroundEvent('GetClientObjects', ids, function(response) {
                  var id, value;
                  for (id in response) {
                    value = response[id];
                    map[id]._sync(value);
                  }
                  if (typeof _this.onData === "function") {
                    _this.onData(_this.data);
                  }
                  return typeof cb === "function" ? cb() : void 0;
                });
              }
            };
          })(this));
        } else {
          return this.attach((function(_this) {
            return function() {
              return _this.represent(args, cb);
            };
          })(this));
        }
      };

      View.prototype.deserialize = function(data, objs) {
        return deserialize(data, {
          ClientArray: ClientArray,
          ClientValue: ClientValue
        }, {
          contentScript: this.contentScript,
          view: this
        }, ((function(_this) {
          return function(obj) {
            return _this.clientObjects.push(obj);
          };
        })(this)), objs);
      };

      View.prototype.callBackgroundMethod = function(methodName, args, returnValueCb) {
        if (this.id) {
          return this.contentScript.triggerBackgroundEvent('CallViewBackgroundMethod', {
            view: this.type,
            id: this.id,
            methodName: methodName,
            args: args,
            timestamp: new Date().getTime()
          }, function(response) {
            return returnValueCb(response);
          });
        } else {
          throw new Error("not connected");
        }
      };

      View.prototype._addInterface = function(iface) {
        this.interfaces.push(iface);
        return iface;
      };

      View.prototype.listInterface = function(el, selector, mapping) {
        return this._addInterface(new ListInterface(this, el, selector, mapping));
      };

      View.prototype.valueInterface = function(el, attr) {
        if (attr == null) {
          attr = null;
        }
        return this._addInterface(new ValueInterface(this, el, attr));
      };

      View.prototype.callMethod = function(name, params) {
        var method;
        if (this.methods && (method = this.methods[name])) {
          return method.apply(this, params);
        }
      };

      View.prototype.observe = function(observable, observer) {
        this.observedObjects.push({
          object: observable,
          observer: observer
        });
        return observable.observe(observer, this);
      };

      View.prototype.observeObject = function(observable, observer) {
        return this.observe(observable, observer);
      };

      View.prototype.clearClientObjects = function() {
        var clientObject, _i, _len, _ref;
        _ref = this.clientObjects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          clientObject = _ref[_i];
          clientObject.destruct(false);
        }
        return this.clientObjects = [];
      };

      View.prototype.clearInterfaces = function() {
        var iface, _i, _len, _ref;
        _ref = this.interfaces;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          iface = _ref[_i];
          iface.destruct();
        }
        return this.interfaces = [];
      };

      View.prototype.trackView = function(view) {
        if (view.trackingViews == null) {
          view.trackingViews = [];
        }
        view.trackingViews.push(this);
        if (this.trackedViews == null) {
          this.trackedViews = [];
        }
        return this.trackedViews.push(view);
      };

      View.prototype.clearViews = function() {
        var view, _i, _len, _ref;
        _ref = _.clone(this.views);
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          view = _ref[_i];
          if (!view) {
            console.error('null view!', this);
          }
          if (view != null) {
            view.destruct(true, this);
          }
        }
        return this.views = [];
      };

      View.prototype.stopObservingObjects = function() {
        var object, observer, _i, _len, _ref, _ref1;
        _ref = this.observedObjects;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], object = _ref1.object, observer = _ref1.observer;
          object.stopObserving(observer);
        }
        return this.observedObjects = [];
      };

      View.prototype.clear = function() {
        var view, _i, _len, _ref;
        this.clearClientObjects();
        this.stopObservingObjects();
        this.clearViews();
        this.clearInterfaces();
        if (this.trackedViews) {
          _ref = this.trackedViews;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            view = _ref[_i];
            view.destruct(true, this);
          }
        }
        return delete this.trackedViews;
      };

      View.prototype.pathElement = function() {
        var parts;
        parts = this.type.split('/');
        return parts[parts.length - 1];
      };

      View.prototype.path = function() {
        if (this.type) {
          if (this.basePath) {
            return "" + this.basePath + "/" + (this.pathElement());
          } else if (this.parent) {
            return "" + (this.parent.path()) + "/" + (this.pathElement());
          } else {
            return "/" + (this.pathElement());
          }
        } else if (this.parent) {
          return this.parent.path();
        } else {
          return '/';
        }
      };

      View.prototype.event = function(action, label) {
        var parts;
        if (label == null) {
          label = null;
        }
        parts = this.type.split('/');
        return tracking.event(parts[parts.length - 1], action, label);
      };

      View.prototype.separate = function() {
        var view, _i, _len, _ref;
        _.pull(this.parent.views, this);
        if (this.trackingViews) {
          _ref = this.trackingViews;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            view = _ref[_i];
            _.pull(view.trackedViews, this);
          }
        }
        return delete this.trackingViews;
      };

      View.prototype.destruct = function(removeFromParent, destructor) {
        if (removeFromParent == null) {
          removeFromParent = true;
        }
        if (destructor == null) {
          destructor = null;
        }
        if (this.noDestruct) {
          return;
        }
        if (this.mouseEntered) {
          this._mouseleave(true);
        }
        if (!this.destructed) {
          if (this.flexibleLayout) {
            delete View.flexibleViews[this.clientId];
          }
          this.detach();
          this.clear();
          if (this.parent && removeFromParent) {
            _.pull(this.parent.views, this);
          }
          this.destructed = true;
          return this.events.onDestruct.fire();
        }
      };

      View.prototype.shown = function() {};

      View.prototype._testMouseEntered = function() {
        clearTimeout(this._testMouseEnteredTimerId);
        return this._testMouseEnteredTimerId = setTimeout(((function(_this) {
          return function() {
            if (_this.mouseEnteredCount !== _this.prevMouseEnteredCount) {
              if (_this.mouseEnteredCount && !_this.prevMouseEnteredCount) {
                if (typeof _this.onMouseenter === "function") {
                  _this.onMouseenter();
                }
              } else if (!_this.mouseEnteredCount && _this.prevMouseEnteredCount) {
                if (typeof _this.onMouseleave === "function") {
                  _this.onMouseleave();
                }
              }
              return _this.prevMouseEnteredCount = _this.mouseEnteredCount;
            }
          };
        })(this)), 100);
      };

      View.prototype._mouseenter = function(self) {
        var _ref;
        if (self == null) {
          self = false;
        }
        if (self) {
          if (this.mouseEntered) {
            return;
          }
          this.mouseEntered = true;
        }
        this.mouseEnteredCount++;
        if ((_ref = this.parent) != null) {
          _ref._mouseenter();
        }
        return this._testMouseEntered();
      };

      View.prototype._mouseleave = function(self) {
        var _ref;
        if (self == null) {
          self = false;
        }
        if (self) {
          if (!this.mouseEntered) {
            return;
          }
          this.mouseEntered = false;
        }
        this.mouseEnteredCount--;
        if ((_ref = this.parent) != null) {
          _ref._mouseleave();
        }
        return this._testMouseEntered();
      };

      return View;

    })();
  };
});

//# sourceMappingURL=View.map
