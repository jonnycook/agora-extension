// Generated by CoffeeScript 1.10.0
var slice = [].slice;

define(function() {
  return {
    d: ['View', 'views/ProductOverlayView', 'Frame', 'util'],
    c: function() {
      var ChangeCapsule, SiteInjector, showingModal, textMap;
      showingModal = false;
      textMap = {
        AccessWorkspace: 'Click on the preview to access the Workspace for this Decision.',
        AccessProductPortalFromWorkspace: 'Click on the product\'s image to access the Product Portal.',
        AccessProductPortalFromPopup: 'Click on the product\'s image to access the Product Portal.',
        Workspace: 'The Workspace is an open-ended product comparison environment. It displays the product considerations of a Decision in a fullscreen view. Press the ESC key or click the close button at the top right to exit.',
        'Workspace/Dismiss': 'Click the X to dismiss a product you’re considering off to the side. Click a dismissed product to return it.',
        Select: 'Click the checkmark to select the item as one you have chosen among your considerations. The Decision will then be represented by that — as well as any other item you have selected — on the Belt and in the Workspace.',
        'Workspace/ReturnToParent': 'You can return to the main Decision by click this thumbnail.',
        'Belt/RemoveItem': 'To remove a product from the Belt, simply drag it off.',
        AddFeeling: 'You can record the feelings and thoughts you have about the products you are shopping for. Type a thought or feeling and press enter, or just press ESC to close this dialog and continue on to the next step.',
        AddData: 'You can paste links to blogs, videos, or other websites that have information related to the product and hit enter to add the attached content feed.',
        AccessEditDescriptor: 'Edit your decision.',
        EditDescriptor: 'Describe what you\'re shopping for.'
      };
      window._tutorial = function(type, el, args, cb) {
        if (el == null) {
          el = null;
        }
        if (args == null) {
          args = null;
        }
        if (cb == null) {
          cb = null;
        }
        if (showingModal || window.tutorialInProgress) {
          if (typeof cb === "function") {
            cb(false);
          }
          return;
        }
        return contentScript.triggerBackgroundEvent('tutorialCheck', type, function(showTutorial) {
          var close, closed;
          if (typeof cb === "function") {
            cb(showTutorial);
          }
          if (showTutorial) {
            close = null;
            closed = false;
            cb = null;
            if (args) {
              if (_.isFunction(args)) {
                cb = args;
                args = {};
              } else {
                cb = args.cb;
              }
            } else {
              args = {};
            }
            if (!el) {
              args.close = true;
            }
            if (typeof cb === "function") {
              cb(function(delay) {
                if (delay == null) {
                  delay = true;
                }
                if (close) {
                  return close(delay);
                } else {
                  return closed = true;
                }
              });
            }
            return setTimeout((function() {
              var attachEl, connectorEl, currentPosition, distance, elPos, margin, offsetParent, offsetParentPos, pos, position, positionEl, setPosition, text, tipEl;
              if (closed || showingModal) {
                return;
              }
              text = textMap[showTutorial];
              tipEl = $("<div class='-agora tip'>" + text + "</div>");
              tipEl.css({
                position: 'absolute',
                width: 200,
                opacity: 0
              });
              if (args.close) {
                tipEl.addClass('hasClose');
                tipEl.append($('<span class="close" />').click(function() {
                  close(false);
                  return showingModal = false;
                }));
                util.tooltip(tipEl.find('.close'), 'close');
              }
              close = function(delay) {
                if (delay == null) {
                  delay = true;
                }
                if (delay) {
                  return setTimeout((function() {
                    return close(false);
                  }), 300);
                } else {
                  return tipEl.fadeOut(function() {
                    return tipEl.remove();
                  });
                }
              };
              if (el) {
                position = 'right';
                if (_.isArray(el)) {
                  if (_.isArray(type)) {
                    el = el[type.indexOf(showTutorial)];
                  } else {
                    el = el[0];
                  }
                }
                attachEl = positionEl = null;
                if (el.attachEl && el.positionEl) {
                  attachEl = el.attachEl, positionEl = el.positionEl;
                  if (el.position) {
                    position = el.position;
                  }
                } else {
                  attachEl = el.parent();
                  positionEl = el;
                }
                tipEl.append('<div class="connector" />');
                attachEl.append(tipEl);
                offsetParent = util.positioned(attachEl);
                offsetParentPos = offsetParent.offset();
                elPos = positionEl.offset();
                pos = {
                  left: elPos.left - offsetParentPos.left,
                  top: elPos.top - offsetParentPos.top
                };
                distance = 20;
                currentPosition = null;
                margin = 10;
                setPosition = function(position) {
                  currentPosition = position;
                  if (position === 'right') {
                    tipEl.css({
                      left: pos.left + positionEl.width() + distance,
                      top: pos.top + positionEl.outerHeight() / 2 - tipEl.outerHeight() / 2
                    });
                    return tipEl.offset().left + tipEl.width() <= $(window).width();
                  } else if (position === 'left') {
                    tipEl.css({
                      left: pos.left - tipEl.outerWidth() - distance,
                      top: pos.top + positionEl.outerHeight() / 2 - tipEl.outerHeight() / 2
                    });
                    return tipEl.offset().left >= 0;
                  } else if (position === 'top') {
                    tipEl.css({
                      top: pos.top - tipEl.outerHeight() - distance,
                      left: Math.min($(window).width() - tipEl.outerWidth() - margin, Math.max(margin, pos.left + positionEl.outerWidth() / 2 - tipEl.outerWidth() / 2))
                    });
                    return tipEl.offset().top >= 0;
                  } else if (position === 'bottom') {
                    tipEl.css({
                      top: pos.top + positionEl.outerHeight() + distance,
                      left: pos.left + positionEl.outerWidth() / 2 - tipEl.outerWidth() / 2
                    });
                    return tipEl.offset().top + tipEl.outerHeight() - $(window).scrollTop() <= $(window).height();
                  }
                };
                if (!setPosition(position)) {
                  if (position === 'right') {
                    setPosition('left');
                  } else if (position === 'top') {
                    setPosition('bottom');
                  }
                }
                tipEl.addClass(currentPosition);
                connectorEl = tipEl.find('.connector');
                if (currentPosition === 'left' || currentPosition === 'right') {
                  connectorEl.css({
                    top: Math.max(0, Math.min(tipEl.height(), (elPos.top - tipEl.offset().top) + positionEl.outerHeight() / 2 - connectorEl.height() / 2))
                  });
                } else if (currentPosition === 'top' || currentPosition === 'bottom') {
                  connectorEl.css({
                    left: Math.max(0, Math.min(tipEl.width(), (elPos.left - tipEl.offset().left) + positionEl.outerWidth() / 2 - connectorEl.width() / 2))
                  });
                }
              } else {
                showingModal = true;
                tipEl.addClass('modal');
                tipEl.appendTo(document.body);
                tipEl.css({
                  left: $(window).width() / 2 - tipEl.outerWidth() / 2,
                  top: $(window).height() / 2 - tipEl.outerHeight() / 2 + $(window).scrollTop()
                });
              }
              tipEl.animate({
                opacity: 1
              });
              return setTimeout((function() {
                return contentScript.triggerBackgroundEvent('tutorialSeen', showTutorial);
              }), 500);
            }), 50);
          }
        });
      };
      ChangeCapsule = function() {
        var addChange, changes, func;
        changes = [];
        addChange = function() {
          var args, type;
          type = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
          return changes.push({
            type: type,
            args: args
          });
        };
        func = function() {
          var args, jq, obj;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          jq = $.apply(null, args);
          return obj = {
            jq: jq,
            addClass: function(className) {
              addChange('$.addClass', jq, className);
              jq.addClass(className);
              return obj;
            },
            attr: function(name, value) {
              addChange('$.attr', jq, name, value);
              jq.attr(name, value);
              return obj;
            },
            css: function() {
              var args;
              args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
              addChange('$.css', jq, args);
              jq.css.apply(jq, args);
              return obj;
            },
            data: function(name, value) {
              addChange('$.data', jq, name, value);
              jq.data(name, value);
              return obj;
            },
            append: function(el) {
              addChange('$.append', jq, el);
              jq.append(el);
              return obj;
            },
            appendTo: function(el) {
              addChange('$.appendTo', jq, el);
              jq.appendTo(el);
              return obj;
            },
            load: function(func) {
              addChange('$.load', jq, func);
              jq.load(func);
              return obj;
            },
            resize: function(func) {
              addChange('$.resize', jq, func);
              jq.resize(func);
              return obj;
            },
            blur: function(func) {
              addChange('$.blur', jq, func);
              jq.blur(func);
              return obj;
            },
            focus: function(func) {
              addChange('$.focus', jq, func);
              jq.focus(func);
              return obj;
            },
            delegate: function() {
              var args;
              args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
              addChange.apply(null, ['$.delegate', jq].concat(slice.call(args)));
              jq.delegate.apply(jq, args);
              return obj;
            },
            bind: function() {
              var args;
              args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
              addChange.apply(null, ['$.bind', jq].concat(slice.call(args)));
              jq.bind.apply(jq, args);
              return obj;
            },
            hide: function() {
              addChange('$.hide', jq);
              jq.hide();
              return obj;
            },
            disableSelection: function() {
              addChange('$.disableSelection', jq);
              jq.disableSelection();
              return obj;
            },
            mouseenter: function(func) {
              addChange('$.mouseenter', jq, func);
              jq.mouseenter(func);
              return obj;
            },
            mouseleave: function(func) {
              addChange('$.mouseleave', jq, func);
              jq.mouseleave(func);
              return obj;
            }
          };
        };
        _.extend(func, {
          setTimeout: function(func, time) {
            var id;
            id = setTimeout(func, time);
            addChange('setTimeout', id);
            return id;
          },
          setInterval: function(func, time) {
            var id;
            id = setInterval(func, time);
            addChange('setInterval', id);
            return id;
          },
          undo: function() {
            var args, i, j, ref, ref1, results, type;
            results = [];
            for (i = j = ref = changes.length - 1; ref <= 0 ? j <= 0 : j >= 0; i = ref <= 0 ? ++j : --j) {
              ref1 = changes[i], type = ref1.type, args = ref1.args;
              switch (type) {
                case 'setTimeout':
                  results.push(clearTimeout(args[0]));
                  break;
                case 'setInterval':
                  results.push(clearInterval(args[0]));
                  break;
                case '$.addClass':
                  results.push(args[0].removeClass(args[1]));
                  break;
                case '$.attr':
                  results.push(args[0].removeAttr(args[1]));
                  break;
                case '$.data':
                  results.push(args[0].data(args[1], null));
                  break;
                case '$.append':
                  results.push($(args[1]).remove());
                  break;
                case '$.appendTo':
                  results.push(args[0].remove());
                  break;
                case '$.load':
                  results.push(args[0].unbind('load', args[1]));
                  break;
                case '$.blur':
                  results.push(args[0].unbind('blur', args[1]));
                  break;
                case '$.focus':
                  results.push(args[0].unbind('focus', args[1]));
                  break;
                case '$.delegate':
                  results.push(args[0].undelegate(args[1], args[2], args[3]));
                  break;
                case '$.bind':
                  results.push(args[0].unbind(args[1], args[2]));
                  break;
                case '$.hide':
                  results.push(args[0].show());
                  break;
                case '$.disableSelection':
                  results.push(args[0].enableSelection());
                  break;
                case '$.mouseenter':
                  results.push(args[0].unbind('mouseenter', args[1]));
                  break;
                case '$.mouseleave':
                  results.push(args[0].unbind('mouseleave', args[1]));
                  break;
                default:
                  results.push(void 0);
              }
            }
            return results;
          }
        });
        return func;
      };
      return SiteInjector = (function() {
        SiteInjector.prototype.onOldVersion = function() {
          if (!this.alertedOldVersion) {
            this.alertedOldVersion = true;
            return this.shoppingBarView.el.addClass('reload');
          }
        };

        function SiteInjector(contentScript1, continueTutorial, siteName) {
          this.contentScript = contentScript1;
          this.continueTutorial = continueTutorial;
          this.siteName = siteName;
          window.Q = this.c = ChangeCapsule();
        }

        SiteInjector.prototype.waitFor = function(query, cb) {
          var interval, queryString;
          interval = 0;
          if (typeof query === 'string') {
            queryString = query;
            query = (function(_this) {
              return function() {
                return _this.contentScript.querySelector(queryString);
              };
            })(this);
          }
          return this.c.setTimeout(((function(_this) {
            return function() {
              var r;
              r = null;
              if (!(r = query())) {
                return _this.c.setTimeout(arguments.callee, interval);
              } else {
                return cb(r);
              }
            };
          })(this)), interval);
        };

        SiteInjector.prototype.run = function() {
          return true;
        };

        SiteInjector.prototype.initPage = function(cb) {
          var initTimer;
          this.contentScript.triggerBackgroundEvent('siteVisited', this.siteName);
          return initTimer = this.c.setInterval(((function(_this) {
            return function() {
              var callWhen, callWhenNot, doTutorial, stepStartTime, tutorialDialog, tutorialSteps;
              if (document.body) {
                if (Agora.dev) {
                  Q('body').addClass('-agora-dev');
                }
                clearInterval(initTimer);
                cb();
                callWhen = function(el, cb) {
                  var timerId;
                  return timerId = setInterval((function() {
                    if ($(el).length) {
                      cb();
                      return clearInterval(timerId);
                    }
                  }), 50);
                };
                callWhenNot = function(el, cb) {
                  var timerId;
                  return timerId = setInterval((function() {
                    if (!$(el).length) {
                      cb();
                      return clearInterval(timerId);
                    }
                  }), 50);
                };
                if (_this.continueTutorial) {
                  window.tutorialInProgress = true;
                  window.suppressPopups = true;
                  tutorialSteps = [
                    function(next) {
                      return _this.waitFor((function() {
                        var el;
                        el = $('.-agora.v-shoppingBar .actions .moveUp');
                        if (el.length) {
                          return el.offset().top > $(window).height() / 2;
                        }
                      }), function() {
                        return _this.c.setTimeout((function() {
                          tutorialDialog.show($('.v-shoppingBar .actions'), {
                            orientation: 'above'
                          }, {
                            text: 'Now click this back arrow to navigate back out of the Decision to the main level of the Belt where you can create new Decisions or add more products to your existing ones.',
                            audio: 'http://files.agora.sh/tutorialaudio/12_01.mp3'
                          });
                          return $('.v-shoppingBar .moveUp').one('click', function() {
                            return setTimeout(next, 1000);
                          });
                        }), 0);
                      });
                    }, function(next) {
                      window.suppressShoppingBarMenu = false;
                      tutorialDialog.show($('.-agora.v-shoppingBar .actions'), {
                        orientation: 'above'
                      }, {
                        text: 'Now let\'s quickly learn how collaborative shopping works. First, hover over the <b>Belt Menu</b>.',
                        audio: 'http://files.agora.sh/tutorialaudio/13_01.mp3'
                      });
                      return callWhen('.-agora .shoppingBarMenu', next);
                    }, function(next) {
                      tutorialDialog.show($('.-agora .shoppingBarMenu .sharedWithYou'), {
                        orientation: 'right'
                      }, {
                        text: 'And click the <b>Shared With You</b> icon.',
                        audio: 'http://files.agora.sh/tutorialaudio/14_01.mp3'
                      });
                      return callWhen('.-agora .v-sharedWithYou', next);
                    }, function(next) {
                      tutorialDialog.show($('.-agora .v-sharedWithYou'), {
                        orientation: 'right'
                      }, {
                        text: '<p>This menu lists all the things that have been shared with you. If there are items in the list, you can click the checkmarks to add them to your belt.</p> <p>Click the close button at the top right of the window to continue.</p>',
                        audio: 'http://files.agora.sh/tutorialaudio/15_01.mp3'
                      });
                      return callWhenNot('.-agora .v-sharedWithYou', next);
                    }, function(next) {
                      tutorialDialog.show($('.-agora.v-shoppingBar .decision'), {
                        orientation: 'above'
                      }, {
                        text: 'Next, click this <b>Decision</b>.',
                        audio: 'http://files.agora.sh/tutorialaudio/16_01.mp3'
                      });
                      return callWhen('.-agora.v-shoppingBar.Decision', next);
                    }, function(next) {
                      tutorialDialog.show($('.-agora.v-shoppingBar .actions .moveUp'), {
                        orientation: 'above'
                      }, {
                        text: 'Now hover over the <b>back button</b>.',
                        audio: 'http://files.agora.sh/tutorialaudio/17_01.mp3'
                      });
                      return callWhen('.-agora .shoppingBarMenu', next);
                    }, function(next) {
                      tutorialDialog.show($('.-agora .shoppingBarMenu .collaborate'), {
                        orientation: 'right'
                      }, {
                        text: 'And click the <b>Collaborate</b> icon.',
                        audio: 'http://files.agora.sh/tutorialaudio/18_01.mp3'
                      });
                      return callWhen('.-agora .v-collaborate', next);
                    }, function(next) {
                      var id;
                      tutorialDialog.show($('.-agora .v-collaborate'), {
                        orientation: 'right'
                      }, {
                        text: '<p>This window allows you to see the collaborators and activity happening in the Decision. If you’re the owner you can invite or remove collaborators.</p> <p>Invite someone to help you shop or hit the close button at the top left.</p>',
                        audio: 'http://files.agora.sh/tutorialaudio/19_01.mp3'
                      });
                      id = callWhenNot('.-agora .v-collaborate', next);
                      return callWhen('.-agora .v-share', function() {
                        return callWhenNot('.-agora .v-share', function() {
                          clearInterval(id);
                          return next();
                        });
                      });
                    }, function(next) {
                      tutorialDialog.show({
                        left: $(window).width() / 2,
                        top: $(window).height() / 4,
                        pointer: false,
                        width: 400
                      }, 'below', {
                        text: '<p>Congratulations! You\'ve finished the tour. You should now have a basic idea of what Agora is all about.</p> <ul> <li>To learn more, check out our <a target="_blank" href="http://agora.sh/manual.html">user manual</a>.</li> <li>Use Agora on any of our <a target="_blank" href="http://agora.sh/supportedSites.html">supported sites</a>.</li> <li>If you have any questions or comments, you may <a target="_blank" href="http://agora.sh/contact.html">contact us</a>.</li> </ul> <p>Thanks for using Agora, and happy shopping!</p> <a class="virtualHighFive">Virtual High Five!</a>',
                        audio: 'http://files.agora.sh/tutorialaudio/20_01.mp3'
                      }, function() {
                        return tutorialDialog.frameEl.find('.virtualHighFive').click(function() {
                          next();
                          return tutorialDialog.close();
                        });
                      });
                      _this.contentScript.triggerBackgroundEvent('tutorialFinished');
                      delete window.tutorialInProgress;
                      return delete window.suppressPopups;
                    }
                  ];
                  stepStartTime = null;
                  doTutorial = function(i) {
                    if (i > 0) {
                      console.debug('time', i + 11, new Date().getTime() - stepStartTime);
                      tracking.time('Tutorial', "Step" + (i + 11), new Date().getTime() - stepStartTime);
                    }
                    if (tutorialSteps[i]) {
                      this.contentScript.triggerBackgroundEvent('tutorialStep', i + 12);
                      stepStartTime = new Date().getTime();
                      console.debug(i + 12);
                      return tutorialSteps[i](function() {
                        return doTutorial(i + 1);
                      });
                    }
                  };
                  tutorialDialog = new TutorialDialog(20, 12);
                  window.suppressShoppingBarMenu = true;
                  return $(function() {
                    return doTutorial(0);
                  });
                }
              }
            };
          })(this)), 200);
        };

        SiteInjector.prototype.startContentClipping = function() {
          $('body').removeClass('-agora-disabled');
          return util.showDialog((function(_this) {
            return function() {
              var addDataView;
              addDataView = new AddDataView(_this.contentScript, {
                type: 'drag',
                url: document.location.href,
                title: document.title
              });
              addDataView.shoppingBarView = _this;
              return addDataView;
            };
          })(this));
        };

        SiteInjector.prototype.toggle = function() {
          return $('body').toggleClass('-agora-disabled');
        };

        SiteInjector.prototype.clearProductEl = function(el) {
          el = $(el);
          util.terminateDragging(el);
          if (el.data('agora')) {
            if (el.data('agora').overlayView) {
              el.data('agora').overlayView.destruct();
            }
            el.removeData('agora');
          }
          return el.removeAttr('agora');
        };

        SiteInjector.prototype.initProductEl = function(el, productData, opts) {
          if (opts == null) {
            opts = {};
          }
          return this.products(el, productData, opts);
        };

        SiteInjector.prototype.removeOverlay = function(attachEl) {
          var ref;
          if ((ref = attachEl.data('overlay')) != null) {
            if (typeof ref.destruct === "function") {
              ref.destruct();
            }
          }
          return attachEl.removeAttr('agora');
        };

        SiteInjector.prototype.attachOverlay = function(opts) {
          var productOverlay, ref;
          if (opts.attachEl.attr('agora')) {
            return;
          }
          if (!('siteName' in opts.productData)) {
            opts.productData.siteName = this.siteName;
          }
          Q(opts.attachEl).attr('agora', true);
          productOverlay = new ProductOverlayView(contentScript, opts.productData, null, {
            attachEl: opts.attachEl,
            positionEl: opts.positionEl,
            hovering: opts.hovering,
            position: (ref = opts.position) != null ? ref : 'topRight'
          });
          if (opts.overlayZIndex != null) {
            productOverlay.el.css('zIndex', opts.overlayZIndex);
          }
          productOverlay.represent(opts.productData);
          if (typeof this.initOverlay === "function") {
            this.initOverlay(productOverlay);
          }
          return typeof opts.init === "function" ? opts.init(productOverlay) : void 0;
        };

        SiteInjector.prototype.products = function(selector, productData, opts) {
          var a, config, contentScript, el, productOverlay, ref, variant;
          if (opts == null) {
            opts = {};
          }
          variant = null;
          if (productData.variant) {
            variant = productData.variant;
            delete productData.variant;
          }
          el = $(selector);
          if (el.attr('agora')) {
            if (!el.data('agora')) {
              el.parents('a').removeAttr('agora');
              ProductOverlayView.clear(el);
            } else {
              return;
            }
          }
          if (opts.image == null) {
            opts.image = true;
          }
          if (opts.overlay == null) {
            opts.overlay = true;
          }
          if (!('siteName' in productData)) {
            productData.siteName = this.siteName;
          }
          Q(el).attr('productSid', productData.productSid);
          contentScript = this.contentScript;
          config = this.config;
          Q(el).data('agora', {
            opts: opts
          });
          Q(el).attr('agora', true);
          if (opts.overlay && (config != null ? config.productBadges : void 0) !== false) {
            a = el.parents('a');
            if (a.length === 0 || !a.attr('agora')) {
              if (a.length) {
                Q(a).attr('agora', true);
              }
              productOverlay = new ProductOverlayView(contentScript, _.clone(productData), el.get(0), {
                hovering: opts.hovering,
                extra: opts.extraOverlayElements,
                position: (ref = opts.overlayPosition) != null ? ref : 'topRight'
              });
              if (opts.overlayZIndex != null) {
                productOverlay.el.css('zIndex', opts.overlayZIndex);
              }
              productOverlay.represent(_.clone(productData));
              if (typeof this.initOverlay === "function") {
                this.initOverlay(productOverlay);
              }
              if (typeof opts.initOverlay === "function") {
                opts.initOverlay(productOverlay);
              }
              el.data('agora').overlayView = productOverlay;
            }
          }
          if (opts.image) {
            return util.initDragging(el, {
              acceptsDrop: false,
              affect: false,
              context: 'page',
              helper: function(event) {
                return $('<div class="-agora -agora-productClip t-item dragging" style="position:absolute"> <span class="p-image"></span> <div class="g-productInfo"> <span class="p-title">loading...</span> <span class="p-site">loading...</span> <span class="p-price">loading...</span> </div> </div>');
              },
              start: (function(_this) {
                return function(event, ui) {
                  var clip, clipTimerId, image, item, itemState, marginLeft, marginTop, offsetX, offsetY, payload, payloadCb, price, sendPayload, site, size, target, title, view;
                  shoppingBarView.startDrag();
                  tracking.event('Site', 'dragProduct', opts.area);
                  target = $(event.currentTarget);
                  target.css({
                    opacity: .25
                  });
                  image = ui.helper.find('.p-image');
                  image.css({
                    backgroundImage: "url('" + (target.attr('src')) + "')",
                    width: target.width(),
                    height: target.height()
                  });
                  title = ui.helper.find('.p-title');
                  site = ui.helper.find('.p-site');
                  price = ui.helper.find('.p-price');
                  view = new View(_this.contentScript);
                  view.type = 'ProductClip';
                  view.onData = function(data) {
                    if (data.title.get()) {
                      title.html(data.title.get());
                    }
                    view.observe(data.title, function(mutation) {
                      return title.html(mutation.value);
                    });
                    if (data.site.get()) {
                      site.html(data.site.get());
                    }
                    view.observe(data.site, function(mutation) {
                      return site.html(mutation.value);
                    });
                    if (data.price.get()) {
                      price.html(data.price.get());
                    }
                    return view.observe(data.price, function(mutation) {
                      return price.html(mutation.value);
                    });
                  };
                  sendPayload = null;
                  payload = null;
                  payloadCb = function(cb) {
                    if (payload) {
                      return cb(payload);
                    } else {
                      return sendPayload = cb;
                    }
                  };
                  ui.helper.data('dragging').data = payloadCb;
                  marginLeft = marginTop = 0;
                  offsetX = event.pageX - target.offset().left + marginLeft;
                  offsetY = event.pageY - target.offset().top + marginTop;
                  ui.helper.css({
                    marginLeft: marginLeft,
                    width: target.width(),
                    height: target.height(),
                    zIndex: 999999
                  });
                  ui.helper.find('.g-productInfo').css({
                    opacity: 0
                  });
                  size = {
                    width: 48,
                    height: 48
                  };
                  clip = function() {
                    var curve, time;
                    time = 200;
                    curve = null;
                    ui.helper.animate({
                      marginLeft: offsetX - size.width * .9,
                      marginTop: offsetY - size.height * .9,
                      width: 148,
                      height: size.height
                    }, time, curve);
                    image.animate({
                      width: 44,
                      height: 44
                    }, time, curve);
                    return setTimeout((function() {
                      if (!itemState) {
                        return ui.helper.find('.g-productInfo').animate({
                          opacity: 1
                        }, time, curve);
                      }
                    }), time);
                  };
                  itemState = false;
                  item = function() {
                    var time;
                    itemState = true;
                    time = 300;
                    image.animate({
                      width: 44,
                      height: 44
                    }, time);
                    ui.helper.find('.g-productInfo').stop(true).animate({
                      opacity: 0
                    }, time, function() {});
                    return ui.helper.stop(true).animate({
                      width: size.width,
                      height: size.height,
                      marginLeft: offsetX - size.width / 2,
                      marginTop: offsetY - size.height / 2
                    }, time);
                  };
                  productData.elementType = 'Product';
                  if (_.isFunction(variant)) {
                    productData.variant = variant();
                  } else if (variant != null) {
                    productData.variant = variant;
                  }
                  if (productData.variant) {
                    console.debug('variant: %s', productData.variant);
                  }
                  if (sendPayload) {
                    sendPayload(productData);
                  } else {
                    payload = productData;
                  }
                  view.represent(productData);
                  ui.args.onDraggedOver = function(el) {
                    if (el) {
                      clearTimeout(clipTimerId);
                      if (!itemState) {
                        item();
                      }
                      return ui.helper.addClass('adding');
                    } else {
                      return ui.helper.removeClass('adding');
                    }
                  };
                  ui.args.stop = function(event, ui) {
                    shoppingBarView.stopDrag();
                    view.destruct();
                    target.animate({
                      opacity: 1
                    }, 'linear');
                    return ui.helper.animate({
                      marginLeft: offsetX,
                      marginTop: offsetY,
                      width: 10,
                      height: 10,
                      opacity: 0
                    }, 100, 'linear', function() {
                      return ui.helper.remove();
                    });
                  };
                  return clipTimerId = setTimeout(clip, 100);
                };
              })(this)
            });
          }
        };

        return SiteInjector;

      })();
    }
  };
});

//# sourceMappingURL=SiteInjector.js.map
