// Generated by CoffeeScript 1.7.1
define(function() {
  return {
    d: [],
    c: function() {
      var util;
      return util = {
        draggingListeners: {},
        nextDraggingListenerId: 1,
        terminateDragging: function(baseEl) {
          var draggingListenerId;
          baseEl.unbind('mousedown.dragging');
          if (baseEl.data('dragging')) {
            baseEl.unbind('mousedown.dragging');
            baseEl.removeData('dragging');
            if (draggingListenerId = baseEl.data('draggingListenerId')) {
              delete util.draggingListeners[draggingListenerId];
              return baseEl.removeData('draggingListenerId');
            }
          }
        },
        initDragging: function(baseEl, args) {
          var draggingListenerId;
          if (args == null) {
            args = {};
          }
          if (baseEl.data('dragging')) {
            baseEl.unbind('mousedown.dragging');
          }
          if (args.affect !== false) {
            Q(baseEl).data('dragging', args);
          }
          if (args.onDroppedOn || args.onDragOver || args.onDragOut || args.dragArea || args.root) {
            Q(baseEl).attr('dragarea', true);
          }
          if (args.root) {
            Q(baseEl).attr('draggingroot', true);
          }
          if (!(('acceptsDrop' in args) && args.acceptsDrop === false)) {
            Q(baseEl).attr('acceptsdrop', true);
          }
          if ('enabled' in args) {
            if (!args.enabled) {
              return;
            }
          }
          if (args.onUserStartDrag || args.onUserEndDrag) {
            draggingListenerId = util.nextDraggingListenerId++;
            util.draggingListeners[draggingListenerId] = {
              baseEl: baseEl,
              args: args
            };
            Q(baseEl).data('draggingListenerId', draggingListenerId);
          }
          return Q(baseEl).bind('mousedown.dragging', function(e) {
            var curEl, dragging, el, i, parents, selector;
            if (typeof args.cancel === "function" ? args.cancel() : void 0) {
              return;
            }
            selector = '[dragarea]';
            dragging = {
              startDrag: function(e) {
                var draggingCont, draggingContEl, el, helper, offset, overlay, rootEl, states, _base, _base1;
                this.started = true;
                draggingContEl = null;
                draggingCont = function() {
                  if (!draggingContEl) {
                    draggingContEl = $('<div class="-agora -agoraDraggingCont">').css({
                      position: 'absolute',
                      left: 0,
                      top: 0
                    }).appendTo(document.body);
                  }
                  return draggingContEl;
                };
                overlay = $('<div />').css({
                  position: 'fixed',
                  left: 0,
                  right: 0,
                  top: 0,
                  bottom: 0,
                  zIndex: 9999999999
                }).appendTo(document.body);
                offset = {
                  x: e.pageX - this.el.offset().left,
                  y: e.pageY - this.el.offset().top
                };
                if (args.helper) {
                  helper = args.helper(e, this.el, offset);
                  helper.data('dragging', args);
                  helper.appendTo(draggingCont());
                  this.el = helper;
                }
                if (typeof (_base = this.el.data('dragging')).start === "function") {
                  _base.start(e, {
                    helper: this.el,
                    args: args
                  });
                }
                el = this.el;
                if (args.context === 'shoppingBar') {
                  el.addClass('activeDrag');
                }
                rootEl = args.context === 'shoppingBar' ? baseEl.parents('[draggingroot=true]') : $('.-agora.v-shoppingBar .content');
                this.mousemove = function(e) {
                  var left, top, _base1;
                  left = e.pageX - this.el.offsetParent().offset().left - offset.x;
                  top = e.pageY - this.el.offsetParent().offset().top - offset.y;
                  if (this.state && this.state.mousemove(e, left, top) === false) {
                    this.state = states.global;
                    this.state.init();
                    this.el.css({
                      zIndex: 99999999
                    });
                    if (typeof (_base1 = el.data('dragging')).onGlobal === "function") {
                      _base1.onGlobal();
                    }
                    this.state.mousemove(e, left, top);
                  }
                  if (!this.state) {
                    left = e.pageX - this.el.offsetParent().offset().left - offset.x;
                    top = e.pageY - this.el.offsetParent().offset().top - offset.y;
                    return this.el.css({
                      left: left,
                      top: top
                    });
                  }
                };
                this.mouseup = function(e) {
                  var _ref;
                  if (args.context === 'shoppingBar') {
                    this.el.removeClass('activeDrag');
                  }
                  if ((_ref = this.state) != null) {
                    if (typeof _ref.mouseup === "function") {
                      _ref.mouseup(e);
                    }
                  }
                  if (overlay != null) {
                    overlay.remove();
                  }
                  return setTimeout((function() {
                    if (draggingContEl) {
                      return draggingContEl.remove();
                    }
                  }), 1000);
                };
                states = {
                  list: (function() {
                    var containerEl, contentEl, count, currentIndex, direction, elementAtIndex, elements, i, indexForSegment, posForIndex, removed, startIndex, updatePos, _i, _ref, _ref1, _ref2;
                    containerEl = el.parents('.element').first();
                    if (containerEl.length === 0) {
                      containerEl = rootEl;
                    }
                    contentEl = (_ref = (_ref1 = containerEl.data('dragging')) != null ? _ref1.contentEl : void 0) != null ? _ref : containerEl;
                    elements = contentEl.children('.element');
                    removed = false;
                    direction = 'ltr';
                    for (i = _i = 0, _ref2 = elements.length; 0 <= _ref2 ? _i < _ref2 : _i > _ref2; i = 0 <= _ref2 ? ++_i : --_i) {
                      if (elements.get(i) === el.get(0)) {
                        currentIndex = startIndex = i;
                        break;
                      }
                    }
                    count = elements.length;
                    el.css({
                      position: 'absolute'
                    });
                    elementAtIndex = function(index) {
                      var resolvedIndex;
                      if (removed) {
                        if (index >= startIndex) {
                          return $(elements.get(index + 1));
                        } else {
                          return $(elements.get(index));
                        }
                      } else {
                        if (index === currentIndex) {
                          return el;
                        } else {
                          resolvedIndex = index;
                          if (index > currentIndex) {
                            resolvedIndex--;
                          }
                          if (resolvedIndex >= startIndex) {
                            resolvedIndex++;
                          }
                          return $(elements.get(resolvedIndex));
                        }
                      }
                    };
                    indexForSegment = function(start, end) {
                      var width, x, _j;
                      x = 0;
                      for (i = _j = 0; 0 <= count ? _j < count : _j > count; i = 0 <= count ? ++_j : --_j) {
                        width = elementAtIndex(i).data('view').width();
                        if (i !== currentIndex) {
                          if (start < x + width / 2 && end > x + width / 2) {
                            return i;
                          }
                        }
                        x += width + contentEl.data('spacing');
                      }
                      return currentIndex;
                    };
                    posForIndex = function(index) {
                      var pos, _j;
                      if (index === 0) {
                        return 0;
                      } else {
                        pos = 0;
                        for (i = _j = 0; 0 <= index ? _j < index : _j > index; i = 0 <= index ? ++_j : --_j) {
                          pos += elementAtIndex(i).data('view').width() + contentEl.data('spacing');
                        }
                        return pos;
                      }
                    };
                    updatePos = function(el, i) {
                      if (direction === 'ltr') {
                        return el.stop(true, true).animate({
                          left: posForIndex(i)
                        }, 150);
                      } else if (direction === 'rtl') {
                        return el.stop(true, true).animate({
                          right: posForIndex(i)
                        }, 150);
                      }
                    };
                    return {
                      mousemove: function(e, left, top) {
                        var index, lock, prevCurrent, right, _j, _ref3;
                        lock = false;
                        if (!lock && (e.pageY - el.offsetParent().offset().top < -35 || e.pageX - (contentEl.offset().left + contentEl.width()) > 100 || contentEl.offset().left - e.pageX > 100)) {
                          if (currentIndex !== null) {
                            removed = true;
                            for (i = _j = 0, _ref3 = count - 1; 0 <= _ref3 ? _j < _ref3 : _j > _ref3; i = 0 <= _ref3 ? ++_j : --_j) {
                              updatePos(elementAtIndex(i), i);
                            }
                            dragging.fromEl = containerEl;
                          }
                          return false;
                        }
                        if (direction === 'ltr') {
                          el.css({
                            left: Math.min(Math.max(0, left), contentEl.width() - el.width())
                          });
                        } else if (direction === 'rtl') {
                          right = (contentEl.width()) - left;
                          el.css({
                            right: Math.min(Math.max(0, right), contentEl.width() - el.width())
                          });
                        }
                        index = indexForSegment(left, left + el.width());
                        if (index !== void 0 && currentIndex !== index) {
                          prevCurrent = currentIndex;
                          currentIndex = index;
                          if (prevCurrent !== null) {
                            return updatePos(elementAtIndex(prevCurrent), prevCurrent);
                          }
                        }
                      },
                      mouseup: function(e) {
                        var _base1, _j, _ref3;
                        for (i = _j = 0; 0 <= count ? _j < count : _j > count; i = 0 <= count ? ++_j : --_j) {
                          updatePos(elementAtIndex(i), i);
                        }
                        if ((_ref3 = containerEl.data('dragging')) != null) {
                          if (typeof _ref3.onReorder === "function") {
                            _ref3.onReorder(el, startIndex, currentIndex);
                          }
                        }
                        el.removeClass('activeDrag');
                        return typeof (_base1 = el.data('dragging')).stop === "function" ? _base1.stop(e) : void 0;
                      }
                    };
                  })(),
                  global: (function() {
                    var activeEl, bundleActionTimer, deeper, drill, dropAction, highlightEl, rootEls, setActiveEl, shallower, skipRoot;
                    skipRoot = false;
                    rootEls = [];
                    $('[draggingroot]').each(function() {
                      return rootEls.push(this);
                    });
                    rootEls.sort(function(a, b) {
                      var _ref, _ref1;
                      return ((_ref = $(b).data('dragging').rootZIndex) != null ? _ref : 0) - ((_ref1 = $(a).data('dragging').rootZIndex) != null ? _ref1 : 0);
                    });
                    activeEl = null;
                    dropAction = 'default';
                    bundleActionTimer = null;
                    highlightEl = function(el) {
                      var _ref;
                      if ((_ref = el.data('dragging')) != null ? _ref.highlightEl : void 0) {
                        return el.data('dragging').highlightEl;
                      } else {
                        return el;
                      }
                    };
                    setActiveEl = function(el) {
                      var curEl, data, dragOutList, dragOverList, els, i, _base1, _base2, _i, _j, _k, _len, _len1, _ref, _ref1, _ref2, _results;
                      if (activeEl && el && el.get(0) === activeEl.get(0)) {
                        return;
                      }
                      dragOutList = [];
                      dragOverList = [];
                      if (activeEl) {
                        highlightEl(activeEl).removeClass('activeDrop');
                        curEl = activeEl;
                        while (true) {
                          if (!curEl.data('dragging')) {
                            console.debug(curEl);
                          }
                          if (curEl.data('dragging')) {
                            dragOutList.push(curEl.data('dragging'));
                          }
                          curEl = curEl.parents(selector).first();
                          if (!curEl.length) {
                            break;
                          }
                        }
                        if ((_ref = activeEl.data('dragging')) != null) {
                          if (typeof _ref.onInactive === "function") {
                            _ref.onInactive();
                          }
                        }
                      }
                      activeEl = el;
                      if (dragging.el.data('dragging')) {
                        if (typeof (_base1 = dragging.el.data('dragging')).onDraggedOver === "function") {
                          _base1.onDraggedOver(activeEl, dragging.el);
                        }
                      }
                      if (activeEl) {
                        if (typeof (_base2 = activeEl.data('dragging')).onActive === "function") {
                          _base2.onActive();
                        }
                        els = [];
                        els.push(activeEl.get(0));
                        activeEl.parents(selector).each(function() {
                          return els.push(this);
                        });
                        for (i = _i = _ref1 = els.length - 1; _ref1 <= 0 ? _i <= 0 : _i >= 0; i = _ref1 <= 0 ? ++_i : --_i) {
                          curEl = $(els[i]);
                          dragOverList.push(curEl.data('dragging'));
                          if (((_ref2 = curEl.data('dragging')) != null ? _ref2.immutableContents : void 0) && !dragging.el.data('dragging').breaksImmutability) {
                            break;
                          }
                        }
                        highlightEl(activeEl).addClass('activeDrop');
                      }
                      for (_j = 0, _len = dragOutList.length; _j < _len; _j++) {
                        data = dragOutList[_j];
                        if (!_.contains(dragOverList, data)) {
                          if (typeof data.onDragOut === "function") {
                            data.onDragOut();
                          }
                        }
                      }
                      _results = [];
                      for (_k = 0, _len1 = dragOverList.length; _k < _len1; _k++) {
                        data = dragOverList[_k];
                        if (!_.contains(dragOutList, data)) {
                          _results.push(typeof data.onDragOver === "function" ? data.onDragOver() : void 0);
                        } else {
                          _results.push(void 0);
                        }
                      }
                      return _results;
                    };
                    deeper = function(e) {
                      var childEl, childOffset, children, i, sel, _i, _ref, _ref1;
                      sel = selector;
                      if (activeEl.data('dragging').immutableContents && !dragging.el.data('dragging').breaksImmutability) {
                        sel += '[breaksimmutability]';
                      }
                      children = ((_ref = activeEl.data('dragging').contentEl) != null ? _ref : activeEl).children(sel);
                      if (children.length > 0) {
                        for (i = _i = 0, _ref1 = children.length - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
                          if (el.get(0) === children.get(i)) {
                            continue;
                          }
                          childEl = $(children.get(i));
                          childOffset = childEl.offset();
                          if (e.pageX > childOffset.left && e.pageY > childOffset.top && e.pageX < childOffset.left + childEl.outerWidth() && e.pageY < childOffset.top + childEl.outerHeight()) {
                            setActiveEl(childEl);
                            return true;
                          }
                        }
                      }
                      return false;
                    };
                    drill = function(e, el) {
                      var childEl, childOffset, children, i, sel, _i, _ref, _ref1;
                      sel = selector;
                      if (el.data('dragging').immutableContents && !dragging.el.data('dragging').breaksImmutability) {
                        sel += '[breaksimmutability]';
                      }
                      children = ((_ref = el.data('dragging').contentEl) != null ? _ref : el).children(sel);
                      if (children.length > 0) {
                        for (i = _i = 0, _ref1 = children.length - 1; 0 <= _ref1 ? _i <= _ref1 : _i >= _ref1; i = 0 <= _ref1 ? ++_i : --_i) {
                          if (el.get(0) === children.get(i)) {
                            continue;
                          }
                          childEl = $(children.get(i));
                          childOffset = childEl.offset();
                          if (e.pageX > childOffset.left && e.pageY > childOffset.top && e.pageX < childOffset.left + childEl.outerWidth() && e.pageY < childOffset.top + childEl.outerHeight()) {
                            return drill(e, childEl);
                          }
                        }
                      }
                      return el;
                    };
                    shallower = function(e) {
                      var contOffset, parentEl, _results;
                      contOffset = activeEl.offset();
                      _results = [];
                      while (!(e.pageX > contOffset.left && e.pageY > contOffset.top && e.pageX < contOffset.left + activeEl.outerWidth() && e.pageY < contOffset.top + activeEl.outerHeight())) {
                        parentEl = activeEl.parents(selector).first();
                        if (parentEl.length) {
                          setActiveEl(parentEl);
                          _results.push(contOffset = activeEl.offset());
                        } else {
                          setActiveEl(null);
                          break;
                        }
                      }
                      return _results;
                    };
                    return {
                      init: function() {
                        el.appendTo(draggingCont());
                        return this.start();
                      },
                      start: function() {
                        var id, listener, _base1, _ref, _results;
                        setActiveEl(null);
                        if (args.context !== 'page' && !dragging.fromEl) {
                          dragging.fromEl = baseEl.parents(selector).first();
                        }
                        _ref = util.draggingListeners;
                        _results = [];
                        for (id in _ref) {
                          listener = _ref[id];
                          _results.push(typeof (_base1 = listener.args).onUserStartDrag === "function" ? _base1.onUserStartDrag() : void 0);
                        }
                        return _results;
                      },
                      mousemove: function(e, left, top) {
                        var contOffset, contentEl, frameEl, hoverEl, _i, _j, _len, _len1, _ref, _ref1, _results;
                        if (bundleActionTimer) {
                          clearTimeout(bundleActionTimer);
                        }
                        el.css({
                          left: left,
                          top: top
                        });
                        hoverEl = null;
                        for (_i = 0, _len = rootEls.length; _i < _len; _i++) {
                          rootEl = rootEls[_i];
                          contentEl = $(rootEl);
                          contOffset = contentEl.offset();
                          if (e.pageX > contOffset.left && e.pageY > contOffset.top && e.pageX < contOffset.left + contentEl.outerWidth() && e.pageY < contOffset.top + contentEl.outerHeight()) {
                            hoverEl = drill(e, contentEl);
                            break;
                          }
                        }
                        setActiveEl(hoverEl);
                        if (activeEl) {
                          bundleActionTimer = setTimeout((function() {
                            var _base1;
                            return typeof (_base1 = activeEl.data('dragging')).onHoldOver === "function" ? _base1.onHoldOver(el) : void 0;
                          }), (_ref = activeEl.data('dragging').holdDelay) != null ? _ref : 500);
                        }
                        return;
                        if (activeEl) {
                          frameEl = highlightEl(activeEl);
                          contOffset = frameEl.offset();
                          if (!(e.pageX > contOffset.left && e.pageY > contOffset.top && e.pageX < contOffset.left + frameEl.outerWidth() && e.pageY < contOffset.top + frameEl.outerHeight())) {
                            return shallower(e);
                          } else {
                            while (true) {
                              if (!deeper(e)) {
                                break;
                              }
                            }
                            return bundleActionTimer = setTimeout((function() {
                              var _base1;
                              return typeof (_base1 = activeEl.data('dragging')).onHoldOver === "function" ? _base1.onHoldOver(el) : void 0;
                            }), (_ref1 = activeEl.data('dragging').holdDelay) != null ? _ref1 : 500);
                          }
                        } else {
                          _results = [];
                          for (_j = 0, _len1 = rootEls.length; _j < _len1; _j++) {
                            rootEl = rootEls[_j];
                            contentEl = $(rootEl);
                            contOffset = contentEl.offset();
                            if (e.pageX > contOffset.left && e.pageY > contOffset.top && e.pageX < contOffset.left + contentEl.outerWidth() && e.pageY < contOffset.top + contentEl.outerHeight()) {
                              setActiveEl(contentEl);
                              if (skipRoot) {
                                deeper(e);
                              }
                              break;
                            } else {
                              _results.push(void 0);
                            }
                          }
                          return _results;
                        }
                      },
                      mouseup: function(e) {
                        var id, listener, receivingEl, _base1, _base2, _base3, _ref, _ref1, _ref2;
                        if (bundleActionTimer) {
                          clearTimeout(bundleActionTimer);
                        }
                        _ref = util.draggingListeners;
                        for (id in _ref) {
                          listener = _ref[id];
                          if (typeof (_base1 = listener.args).onUserEndDrag === "function") {
                            _base1.onUserEndDrag();
                          }
                        }
                        receivingEl = null;
                        if (activeEl) {
                          receivingEl = !activeEl.attr('acceptsdrop') ? activeEl.parents('[acceptsdrop]').first() : activeEl;
                        }
                        if (typeof (_base2 = el.data('dragging')).stop === "function") {
                          _base2.stop(e, {
                            helper: dragging.el,
                            receivingEl: receivingEl
                          });
                        }
                        if (typeof (_base3 = el.data('dragging')).onDropped === "function") {
                          _base3.onDropped(receivingEl);
                        }
                        if (receivingEl) {
                          if ((_ref1 = receivingEl.data('dragging')) != null) {
                            if (typeof _ref1.onDroppedOn === "function") {
                              _ref1.onDroppedOn(el, dragging.fromEl, dropAction);
                            }
                          }
                        } else if (dragging.fromEl) {
                          if (((_ref2 = dragging.fromEl.data('dragging')) != null ? typeof _ref2.onRemove === "function" ? _ref2.onRemove(el) : void 0 : void 0) !== false) {
                            el.remove();
                          }
                        }
                        return setActiveEl(null);
                      }
                    };
                  })()
                };
                if (args.context === 'shoppingBar') {
                  this.state = states.list;
                } else {
                  this.state = states.global;
                }
                if (typeof (_base1 = this.state).start === "function") {
                  _base1.start();
                }
                return dragging.mousemove(e);
              }
            };
            dragging.el = (function() {
              var _i, _ref, _ref1;
              if (args.context !== 'page') {
                parents = baseEl.parents(selector);
                el = baseEl;
                for (i = _i = _ref = parents.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
                  curEl = $(parents.get(i));
                  if ((_ref1 = curEl.data('dragging')) != null ? _ref1.immutableContents : void 0) {
                    if (curEl.data('dragging').enabled) {
                      el = $(parents.get(i));
                    } else {
                      el = null;
                    }
                    break;
                  }
                }
                return el;
              } else {
                return baseEl;
              }
            })();
            if (dragging.el) {
              $(window).bind('mousemove.dragging', function(e) {
                e.currentTarget = baseEl;
                if (!dragging.started) {
                  dragging.startDrag(e);
                }
                return dragging.mousemove(e);
              });
              $(window).bind('mouseup.dragging', function(e) {
                $(window).unbind('.dragging');
                e.currentTarget = baseEl;
                if (dragging.started) {
                  return dragging.mouseup(e);
                }
              });
              return false;
            }
          });
        },
        getBarItem: function(data, parentView, shoppingBarView, selectMode) {
          var barItemView;
          barItemView = parentView.createView('BarItem', shoppingBarView, {
            selectMode: selectMode
          });
          barItemView.represent(data);
          return barItemView;
        },
        isMutable: function(el) {
          var curEl, i, parents, _i, _ref, _ref1;
          parents = el.parents('.element');
          for (i = _i = _ref = parents.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
            curEl = $(parents.get(i));
            if ((_ref1 = curEl.data('dragging')) != null ? _ref1.immutableContents : void 0) {
              return false;
            }
          }
          return true;
        },
        isFixed: function(el) {
          while (el.get(0) !== document.body) {
            if (el.css('position') === 'fixed') {
              return true;
            }
            el = el.offsetParent();
          }
          return false;
        },
        showPopup: function(el, args) {
          var cancelClose, cb, close, init, initiateClose, open, pin, pinned, popupEl, shouldClose, timerId, unpin;
          if (args.close == null) {
            args.close = true;
          }
          popupEl = timerId = open = null;
          shouldClose = true;
          cancelClose = function() {
            clearTimeout(timerId);
            return shouldClose = false;
          };
          initiateClose = function(time) {
            if (time == null) {
              time = 500;
            }
            if (!_.isNumber(time)) {
              time = 500;
            }
            if (pinned) {
              return shouldClose = true;
            } else {
              clearTimeout(timerId);
              return timerId = setTimeout(close, time);
            }
          };
          close = function() {
            if (popupEl) {
              args.onClose(popupEl);
              popupEl = null;
              return el.unbind('mouseleave', initiateClose).unbind('mouseenter', cancelClose);
            }
          };
          pinned = false;
          pin = function() {
            cancelClose();
            return pinned = true;
          };
          unpin = function() {
            pinned = false;
            if (shouldClose) {
              initiateClose();
              return shouldClose = false;
            }
          };
          init = function() {
            if (args.close) {
              return popupEl.mouseenter(cancelClose).mouseleave(initiateClose);
            }
          };
          cb = function(el) {
            popupEl = el;
            return init();
          };
          popupEl = args.createPopup(cb, close);
          if (popupEl) {
            init();
          }
          if (args.close) {
            el.mouseleave(initiateClose);
            el.mouseenter(cancelClose);
          }
          return {
            close: close,
            pin: pin,
            unpin: unpin,
            initiateClose: initiateClose,
            cancelClose: cancelClose
          };
        },
        popupTrigger2: function(el, args) {
          var addEl, cancelClose, cancelOpen, close, closing, closingTimerId, els, initiateClose, onEnter, onLeave, open, openTimerId, over, pin, pinned, popupEl, removeEl, shouldClose, timerId, unpin;
          popupEl = timerId = open = null;
          shouldClose = false;
          closing = false;
          cancelClose = function() {
            clearTimeout(timerId);
            shouldClose = false;
            return closing = false;
          };
          cancelOpen = function() {
            return clearTimeout(openTimerId);
          };
          initiateClose = function() {
            var _ref;
            closing = true;
            if (pinned) {
              return shouldClose = true;
            } else {
              clearTimeout(timerId);
              if (open) {
                return timerId = setTimeout(close, (_ref = args.closeDelay) != null ? _ref : 500);
              }
            }
          };
          close = function(animate) {
            var _i, _len;
            if (animate == null) {
              animate = false;
            }
            clearTimeout(openTimerId);
            if (popupEl) {
              args.onClose(popupEl, animate);
              popupEl = null;
              clearInterval(closingTimerId);
              closing = false;
              for (_i = 0, _len = els.length; _i < _len; _i++) {
                el = els[_i];
                el.unbind('mouseenter', onEnter).unbind('mouseleave', onLeave);
              }
            }
            return open = false;
          };
          pinned = false;
          pin = function() {
            return pinned = true;
          };
          unpin = function() {
            pinned = false;
            if (shouldClose) {
              initiateClose();
              return shouldClose = false;
            }
          };
          over = 0;
          els = [];
          onEnter = function() {
            $(this).data('entered', true);
            ++over;
            return cancelClose();
          };
          onLeave = function() {
            $(this).data('entered', false);
            --over;
            if (!open) {
              return cancelOpen();
            } else {
              if (over <= 0 && !closing) {
                return initiateClose();
              }
            }
          };
          addEl = function(el) {
            els.push(el);
            return el.mouseenter(onEnter).mouseleave(onLeave);
          };
          removeEl = function(el) {
            if ($(el).data('entered')) {
              return onLeave();
            }
          };
          closingTimerId = null;
          openTimerId = null;
          el.bind('mouseenter.popup', (function(_this) {
            return function() {
              var _ref;
              onEnter();
              return openTimerId = setTimeout((function() {
                var cb, e, init, inited;
                if (open) {
                  return cancelClose();
                } else {
                  inited = false;
                  init = function() {
                    inited = true;
                    return addEl(popupEl);
                  };
                  cb = function(el) {
                    if (open) {
                      popupEl = el;
                      return init();
                    } else {
                      return args.onClose(el);
                    }
                  };
                  open = true;
                  e = args.createPopup(cb, close, addEl, removeEl);
                  if (!popupEl) {
                    popupEl = e;
                  }
                  if (popupEl && !inited) {
                    return init();
                  } else if (popupEl === false) {
                    return open = false;
                  }
                }
              }), (_ref = args.delay) != null ? _ref : 200);
            };
          })(this));
          el.bind('mouseleave.popup', onLeave);
          return {
            close: close,
            pin: pin,
            unpin: unpin,
            cancelOpen: cancelOpen,
            addEl: addEl
          };
        },
        popupTrigger: function(el, args) {
          var addEl, cancelClose, cancelOpen, close, initiateClose, open, pin, pinned, popupEl, shouldClose, timerId, unpin;
          popupEl = timerId = open = null;
          shouldClose = false;
          cancelClose = function() {
            clearTimeout(timerId);
            return shouldClose = false;
          };
          cancelOpen = function() {
            return clearTimeout(timerId);
          };
          initiateClose = function() {
            if (pinned) {
              return shouldClose = true;
            } else {
              clearTimeout(timerId);
              if (open) {
                return timerId = setTimeout(close, 500);
              }
            }
          };
          close = function() {
            clearTimeout(timerId);
            if (popupEl) {
              args.onClose(popupEl);
              popupEl = null;
            }
            return open = false;
          };
          pinned = false;
          pin = function() {
            return pinned = true;
          };
          unpin = function() {
            pinned = false;
            if (shouldClose) {
              initiateClose();
              return shouldClose = false;
            }
          };
          addEl = function(el) {
            return el.mouseenter(cancelClose).mouseleave(initiateClose);
          };
          el.bind('mouseenter.popup', (function(_this) {
            return function() {
              cancelClose();
              return timerId = setTimeout((function() {
                var cb, init;
                if (open) {
                  return cancelClose();
                } else {
                  init = function() {
                    return addEl(popupEl);
                  };
                  cb = function(el) {
                    if (open) {
                      popupEl = el;
                      return init();
                    } else {
                      return args.onClose(el);
                    }
                  };
                  open = true;
                  popupEl = args.createPopup(cb, close, addEl);
                  if (popupEl) {
                    return init();
                  } else if (popupEl === false) {
                    return open = false;
                  }
                }
              }), 200);
            };
          })(this));
          el.bind('mouseleave.popup', (function(_this) {
            return function() {
              return initiateClose();
            };
          })(this));
          return {
            close: close,
            pin: pin,
            unpin: unpin,
            cancelOpen: cancelOpen
          };
        },
        clearPopupTrigger: function(el) {
          return el.unbind('.popup');
        },
        showDialog: function(createView, params) {
          var view, _showDialog;
          if (params == null) {
            params = {};
          }
          _showDialog = function() {
            var frameEl;
            view.close = function() {
              view.destruct();
              return Frame.close(frameEl);
            };
            view.sizeChanged = function() {
              return Frame.positionInCenterOfScreen(frameEl);
            };
            frameEl = Frame.wrapInFrame(view.el, {
              close: function() {
                return view.destruct();
              }
            });
            frameEl.appendTo(document.body);
            Frame.positionInCenterOfScreen(frameEl);
            return Frame.show(frameEl);
          };
          view = createView(function(v) {
            view = v;
            return _showDialog();
          });
          if (view) {
            return _showDialog();
          }
        },
        styleSelect: function(selectEl, opts) {
          var autoSize, el, hasLabel, sizeCalcEl, updateLabel, width, _ref, _ref1;
          if (opts == null) {
            opts = {};
          }
          autoSize = (_ref = opts.autoSize) != null ? _ref : true;
          hasLabel = (_ref1 = opts.label) != null ? _ref1 : true;
          el = $('<span class="t-select" />').css({
            position: 'relative'
          });
          el.addClass(opts["class"]);
          updateLabel = function() {
            var label, selected;
            selected = selectEl.children(':selected');
            label = selected.html();
            el.html(label);
            if (hasLabel) {
              if (selected.index() === 0) {
                el.addClass('label');
              } else {
                el.removeClass('label');
              }
            }
            return selectEl.after(el);
          };
          if (autoSize) {
            sizeCalcEl = $('<div class="-agora t-selectOptions" />').css({
              position: 'absolute',
              visibility: 'hidden'
            });
            selectEl.children().each(function() {
              return $('<div class="t-option" />').css({
                whiteSpace: 'nowrap',
                fontSize: 12
              }).html(this.innerHTML).appendTo(sizeCalcEl);
            });
            sizeCalcEl.appendTo(document.body);
            width = sizeCalcEl.width();
            sizeCalcEl.remove();
            el.css({
              width: width + 15
            });
          }
          selectEl.change(function() {
            return updateLabel();
          });
          el.mousedown(function() {
            var close, ignore, optionsEl;
            close = function() {
              el.animate({
                opacity: 1
              }, 100);
              return optionsEl.fadeOut(100, function() {
                return optionsEl.remove();
              });
            };
            ignore = true;
            setTimeout((function() {
              return ignore = false;
            }), 500);
            optionsEl = $('<div class="-agora t-selectOptions" />');
            selectEl.children().each(function() {
              var optionEl;
              optionEl = $("<span class='t-option' value='" + this.value + "'>" + this.innerHTML + "</span>");
              if (this.selected) {
                optionEl.addClass('selected');
                optionEl.attr('selected', true);
              }
              optionsEl.append(optionEl);
              optionEl.mousedown(function(e) {
                return e.stopPropagation();
              });
              return optionEl.mouseup((function(_this) {
                return function() {
                  if (!(ignore && $(_this).prop('selected'))) {
                    optionEl.addClass('selected');
                    $(_this).prop('selected', true);
                    selectEl.trigger('change');
                    updateLabel();
                    close();
                  }
                  return ignore = false;
                };
              })(this));
            });
            optionsEl.appendTo(el);
            optionsEl.mousemove(function(e) {
              return optionsEl.children().each(function() {
                var offset;
                offset = $(this).offset();
                if (e.pageY > offset.top && e.pageY < offset.top + $(this).outerHeight()) {
                  optionsEl.find('.selected').removeClass('selected');
                  return $(this).addClass('selected');
                }
              });
            });
            optionsEl.css({
              position: 'absolute',
              width: el.outerWidth(),
              zIndex: 9999999999
            });
            optionsEl.css({
              left: 0,
              top: (Math.max(4, el.offset().top - optionsEl.children('.selected').position().top)) - el.offset().top
            });
            return false;
          });
          selectEl.css({
            display: 'none'
          });
          return updateLabel();
        },
        tooltip2: function(el, text, opts) {
          var addEl, cancelClose, close, closeTimer, closing, closingTimerId, count, entered, frame, initiateClose, left, onFrame, open, shouldOpen, timerId;
          if (opts == null) {
            opts = {};
          }
          if (opts.type == null) {
            opts.type = 'text';
          }
          if (el.data('hasTooltip')) {
            util.clearTooltip(el);
          }
          frame = null;
          timerId = null;
          el.data('hasTooltip', true);
          onFrame = null;
          count = 0;
          shouldOpen = true;
          open = false;
          closing = false;
          closingTimerId = null;
          close = function() {
            clearTimeout(timerId);
            open = false;
            if (frame) {
              frame.el.unbind('mouseleave', left).unbind('.mouseenter', entered);
              frame.close();
              if (typeof opts.onClose === "function") {
                opts.onClose();
              }
              count = 0;
              closing = false;
              return clearInterval(closingTimerId);
            } else {
              return shouldOpen = false;
            }
          };
          entered = function() {
            ++count;
            return cancelClose();
          };
          left = function() {
            --count;
            if (!open) {
              return clearTimeout(timerId);
            }
          };
          closeTimer = null;
          initiateClose = function() {
            closing = true;
            if (frame) {
              return closeTimer = setTimeout(close, opts.canFocus ? 200 : 0);
            } else {
              shouldOpen = false;
              return clearTimeout(timerId);
            }
          };
          cancelClose = function() {
            clearTimeout(closeTimer);
            return closing = false;
          };
          addEl = function(el) {
            return el.mouseleave(left).mouseenter(entered);
          };
          if (opts.canFocus) {
            onFrame = function() {
              return addEl(frame.el);
            };
          }
          el.bind('mouseenter.tooltip', function() {
            var _ref;
            document.body.addEventListener('click', (function() {
              close();
              return document.body.removeEventListener('click', arguments.callee, true);
            }), true);
            if (!frame) {
              shouldOpen = true;
              return timerId = setTimeout((function() {
                var contentEl, onClose, view, _ref, _ref1;
                if (!(el.get(0).parentNode && shouldOpen && !(typeof opts.cancel === "function" ? opts.cancel() : void 0))) {
                  return;
                }
                contentEl = opts.type === 'text' ? document.createTextNode(typeof text === 'function' ? text() : text) : opts.type === 'html' ? $(text) : void 0;
                view = null;
                onClose = function() {
                  frame = null;
                  return view != null ? view.destruct() : void 0;
                };
                if (opts.parentView) {
                  view = opts.parentView.createView();
                }
                if (typeof opts.init === "function") {
                  opts.init(contentEl, close, view);
                }
                frame = Frame.frameAround((_ref = opts.anchor) != null ? _ref : el, contentEl, _.extend(_.clone(opts), {
                  type: (_ref1 = opts.frameType) != null ? _ref1 : 'tooltip',
                  onClose: onClose
                }));
                if (opts["class"]) {
                  frame.el.addClass(opts["class"]);
                }
                if (typeof onFrame === "function") {
                  onFrame();
                }
                open = true;
                closingTimerId = setInterval((function() {
                  if (!count && !closing) {
                    return initiateClose();
                  }
                }), 50);
                if (view) {
                  return view.useEl(frame.el);
                }
              }), (_ref = opts.delay) != null ? _ref : 500);
            }
          });
          addEl(el);
          if (opts.anchor) {
            return addEl(opts.anchor);
          }
        },
        tooltip: function(el, text, opts) {
          var addEl, cancelClose, close, closeTimer, count, entered, frame, initiateClose, left, onFrame, open, shouldOpen, timerId;
          if (opts == null) {
            opts = {};
          }
          if (opts.type == null) {
            opts.type = 'text';
          }
          if (el.data('hasTooltip')) {
            util.clearTooltip(el);
          }
          frame = null;
          timerId = null;
          el.data('hasTooltip', true);
          onFrame = null;
          count = 0;
          shouldOpen = true;
          open = false;
          close = function() {
            clearTimeout(timerId);
            open = false;
            if (frame) {
              frame.el.unbind('mouseleave', left).unbind('.mouseenter', entered);
              frame.close();
              if (typeof opts.onClose === "function") {
                opts.onClose();
              }
              return count = 0;
            } else {
              return shouldOpen = false;
            }
          };
          entered = function() {
            ++count;
            return cancelClose();
          };
          left = function() {
            --count;
            if (count <= 0) {
              return initiateClose();
            }
          };
          closeTimer = null;
          initiateClose = function() {
            if (frame) {
              return closeTimer = setTimeout(close, opts.canFocus ? 200 : 0);
            } else {
              shouldOpen = false;
              return clearTimeout(timerId);
            }
          };
          cancelClose = function() {
            return clearTimeout(closeTimer);
          };
          addEl = function(el) {
            return el.mouseleave(left).mouseenter(entered);
          };
          if (opts.canFocus) {
            onFrame = function() {
              return addEl(frame.el);
            };
          }
          el.bind('mouseenter.tooltip', function() {
            document.body.addEventListener('click', (function() {
              close();
              return document.body.removeEventListener('click', arguments.callee, true);
            }), true);
            if (!frame) {
              shouldOpen = true;
              return timerId = setTimeout((function() {
                var contentEl, onClose, view, _ref, _ref1;
                if (!(el.get(0).parentNode && shouldOpen && !(typeof opts.cancel === "function" ? opts.cancel() : void 0))) {
                  return;
                }
                contentEl = opts.type === 'text' ? document.createTextNode(typeof text === 'function' ? text() : text) : opts.type === 'html' ? $(text) : void 0;
                view = null;
                onClose = function() {
                  frame = null;
                  return view != null ? view.destruct() : void 0;
                };
                if (opts.parentView) {
                  view = opts.parentView.createView();
                }
                if (typeof opts.init === "function") {
                  opts.init(contentEl, close, view);
                }
                frame = Frame.frameAround((_ref = opts.anchor) != null ? _ref : el, contentEl, _.extend(_.clone(opts), {
                  type: (_ref1 = opts.frameType) != null ? _ref1 : 'tooltip',
                  onClose: onClose
                }));
                if (opts["class"]) {
                  frame.el.addClass(opts["class"]);
                }
                if (typeof onFrame === "function") {
                  onFrame();
                }
                open = true;
                if (view) {
                  return view.useEl(frame.el);
                }
              }), 500);
            }
          });
          addEl(el);
          if (opts.anchor) {
            return addEl(opts.anchor);
          }
        },
        clearTooltip: function(el) {
          if (el.data('hasTooltip')) {
            el.removeData('hasTooltip');
            return el.unbind('.tooltip');
          }
        },
        resolveDraggingData: function(el, cb) {
          var elData;
          elData = el.data('dragging').data ? el.data('dragging').data : {
            view: el.data('view').id
          };
          if (typeof elData === 'function') {
            return elData((function(_this) {
              return function(data) {
                return cb(data);
              };
            })(this));
          } else {
            return cb(elData);
          }
        },
        emotionClass: function(positive, negative) {
          if (positive && negative) {
            return 'mixed';
          } else if (positive) {
            if (positive > 1) {
              return 'veryPositive';
            } else {
              return 'positive';
            }
          } else if (negative) {
            if (negative > 1) {
              return 'veryNegative';
            } else {
              return 'negative';
            }
          } else {
            return 'neutral';
          }
        },
        positionClass: function(pro, against) {
          if (pro) {
            return 'for';
          } else if (against) {
            return 'against';
          }
        },
        openProductPreview: function(productData, fromView) {
          var frameEl, productPreviewView;
          if (fromView == null) {
            fromView = null;
          }
          productPreviewView = new ProductPreviewView(contentScript);
          if (fromView) {
            productPreviewView.basePath = fromView.path();
            fromView.event('openProductPreview');
          }
          productPreviewView.represent(productData);
          tracking.page(productPreviewView.path());
          productPreviewView.close = function() {
            return Frame.close(frameEl);
          };
          frameEl = Frame.wrapInFrame(productPreviewView.el, {
            type: 'fullscreen',
            resize: function(width, height) {
              return [width - 20, height - 20];
            },
            close: function() {
              return productPreviewView.destruct();
            }
          });
          frameEl.children('.close').css({
            top: 15
          });
          frameEl.appendTo(document.body);
          Frame.show(frameEl);
          return productPreviewView.shown();
        },
        trapScrolling: function(el) {
          return el.bind('DOMMouseScroll mousewheel', function(ev) {
            var $this, delta, height, prevent, scrollHeight, scrollTop, up;
            $this = $(this);
            scrollTop = this.scrollTop;
            scrollHeight = this.scrollHeight;
            height = $this.height();
            delta = (ev.type === 'DOMMouseScroll' ? ev.originalEvent.detail * -40 : ev.originalEvent.wheelDelta);
            up = delta > 0;
            prevent = function() {
              ev.stopPropagation();
              ev.preventDefault();
              ev.returnValue = false;
              return false;
            };
            if (!up && -delta > scrollHeight - height - scrollTop) {
              $this.scrollTop(scrollHeight);
              return prevent();
            } else if (up && delta > scrollTop) {
              $this.scrollTop(0);
              return prevent();
            }
          });
        },
        createPopout: function(anchorEl, opts) {
          var init, remove;
          if (opts == null) {
            opts = {};
          }
          if (opts.anchor == null) {
            opts.anchor = 'bottom';
          }
          if (opts.flexibleHeight == null) {
            opts.flexibleHeight = true;
          }
          if (!_.isFunction(opts.el)) {
            opts.el.hide();
          }
          init = function(el, remove) {
            var close, connectorEl, side, updatePos, updateSide;
            if (remove == null) {
              remove = true;
            }
            el.css('position', 'absolute');
            side = opts.side;
            anchorEl.append(connectorEl = $('<div class="popoutConnector" />').css('position', 'absolute').addClass(side));
            switch (opts.anchor) {
              case 'top':
                el.css({
                  top: -9
                });
                break;
              case 'bottom':
                el.css({
                  bottom: -9
                });
                break;
              case 'middle':
                el.css({
                  top: -el.outerHeight() / 2 + anchorEl.height() / 2
                });
            }
            updateSide = function() {
              var _ref, _ref1, _ref2, _ref3;
              switch (side) {
                case 'left':
                  el.css({
                    right: anchorEl.outerWidth() + 3 + ((_ref = opts.distance) != null ? _ref : 0)
                  });
                  return connectorEl.css({
                    marginLeft: -((_ref1 = opts.distance) != null ? _ref1 : 0)
                  });
                case 'right':
                  el.css({
                    left: anchorEl.outerWidth() + 3 + ((_ref2 = opts.distance) != null ? _ref2 : 0)
                  });
                  return connectorEl.css({
                    marginRight: -((_ref3 = opts.distance) != null ? _ref3 : 0)
                  });
              }
            };
            updatePos = function() {
              var height;
              updateSide();
              if (side === 'left') {
                if (el.offset().left < 0) {
                  connectorEl.removeClass('left').addClass('right');
                  side = 'right';
                  updateSide();
                }
              } else if (side === 'right') {
                if (el.offset().left + el.width() > $(window).width()) {
                  connectorEl.removeClass('right').addClass('left');
                  side = 'left';
                  updateSide();
                }
              }
              switch (opts.anchor) {
                case 'top':
                case 'middle':
                  if (el.offset().top < $(window).scrollTop() + 10) {
                    el.css({
                      top: ($(window).scrollTop() + 10) - anchorEl.offset().top
                    });
                  }
                  if (el.offset().top + el.outerHeight() > $(window).scrollTop() + $(window).height() - 10) {
                    el.css({
                      top: $(window).scrollTop() + $(window).height() - 10 - el.outerHeight() - anchorEl.offset().top
                    });
                  }
                  if (opts.flexibleHeight && el.offset().top < $(window).scrollTop() + 10) {
                    height = $(window).height() - 20;
                    return el.css({
                      height: height,
                      top: $(window).scrollTop() + 10 - anchorEl.offset().top
                    });
                  }
                  break;
                case 'bottom':
                  if (el.offset().top - $(window).scrollTop() < 10) {
                    el.css({
                      bottom: (anchorEl.offset().top + anchorEl.height() - $(window).scrollTop()) - el.outerHeight() - 10
                    });
                  }
                  if (el.offset().top - $(window).scrollTop() + el.outerHeight() > $(window).height() - 42) {
                    el.css({
                      height: $(window).height() - 66 - 20
                    });
                    return el.css({
                      bottom: (anchorEl.offset().top + anchorEl.height() - $(window).scrollTop()) - el.outerHeight() - 10
                    });
                  }
              }
            };
            updatePos();
            close = function() {
              if (typeof opts.onClose === "function") {
                opts.onClose();
              }
              if (typeof onClose === "function") {
                onClose();
              }
              if (remove) {
                el.remove();
              } else {
                el.hide();
              }
              anchorEl.removeClass('active');
              return connectorEl.remove();
            };
            anchorEl.removeClass('hover').addClass('active');
            return {
              updatePos: updatePos,
              close: close
            };
          };
          if (_.isFunction(opts.el)) {
            return opts.el(function(el, onClose) {
              el.appendTo(anchorEl);
              return init(el, true);
            });
          } else {
            remove = false;
            if (!opts.el.parent().length) {
              opts.el.appendTo(anchorEl);
              remove = true;
            }
            opts.el.show();
            return init(opts.el, remove);
          }
        },
        popoutTrigger: function(triggerEl, opts) {
          var close, closeTimerId, initiateClose, opened, pin, pinned, shouldClose, unpin;
          if (opts == null) {
            opts = {};
          }
          if (opts.anchor == null) {
            opts.anchor = 'bottom';
          }
          if (!_.isFunction(opts.el)) {
            opts.el.hide();
          }
          pinned = shouldClose = false;
          opened = false;
          pin = function() {
            return pinned = true;
          };
          unpin = function() {
            pinned = false;
            if (shouldClose) {
              close();
              return shouldClose = false;
            }
          };
          closeTimerId = null;
          close = initiateClose = null;
          return triggerEl.mouseenter((function(_this) {
            return function() {
              var openTimerId;
              if (opened) {
                triggerEl.one('mouseleave', initiateClose);
                clearTimeout(closeTimerId);
                return;
              }
              triggerEl.addClass('hover');
              openTimerId = setTimeout((function() {
                var init;
                init = function(el, remove) {
                  var connectorEl, updatePos;
                  if (remove == null) {
                    remove = true;
                  }
                  opened = true;
                  switch (opts.side) {
                    case 'left':
                      el.addClass('left popout').css({
                        position: 'absolute',
                        right: triggerEl.outerWidth() + 3
                      });
                      break;
                    case 'right':
                      el.addClass('right popout').css({
                        position: 'absolute',
                        left: triggerEl.outerWidth() + 3
                      });
                  }
                  switch (opts.anchor) {
                    case 'top':
                      el.css({
                        top: 0
                      });
                      break;
                    case 'bottom':
                      el.css({
                        bottom: -9
                      });
                  }
                  triggerEl.append(connectorEl = $('<div class="popoutConnector" />').addClass(opts.side));
                  updatePos = function() {
                    var height;
                    switch (opts.anchor) {
                      case 'top':
                        if (el.offset().top + el.outerHeight() > $(window).scrollTop() + $(window).height() - 42) {
                          el.css({
                            top: $(window).scrollTop() + $(window).height() - 66 - 10 - el.outerHeight() - triggerEl.offset().top
                          });
                        }
                        if (el.offset().top < $(window).scrollTop() + 10) {
                          height = $(window).height() - 66 - 20;
                          return el.css({
                            height: height,
                            top: $(window).scrollTop() + 10 - triggerEl.offset().top
                          });
                        }
                        break;
                      case 'bottom':
                        if (el.offset().top - $(window).scrollTop() < 10) {
                          el.css({
                            bottom: (triggerEl.offset().top + triggerEl.height() - $(window).scrollTop()) - el.outerHeight() - 10
                          });
                        }
                        if (el.offset().top - $(window).scrollTop() + el.outerHeight() > $(window).height() - 42) {
                          el.css({
                            height: $(window).height() - 66 - 20
                          });
                          return el.css({
                            bottom: (triggerEl.offset().top + triggerEl.height() - $(window).scrollTop()) - el.outerHeight() - 10
                          });
                        }
                    }
                  };
                  updatePos();
                  close = function() {
                    if (pinned) {
                      return shouldClose = true;
                    } else {
                      if (typeof onClose === "function") {
                        onClose();
                      }
                      if (remove) {
                        el.fadeOut(200, function() {
                          el.remove();
                          return triggerEl.removeClass('active');
                        });
                      } else {
                        el.fadeOut(200, function() {
                          return triggerEl.removeClass('active');
                        });
                      }
                      connectorEl.fadeOut(200, function() {
                        return connectorEl.remove();
                      });
                      return opened = false;
                    }
                  };
                  initiateClose = function() {
                    return closeTimerId = setTimeout(close, 200);
                  };
                  triggerEl.one('mouseleave', initiateClose);
                  triggerEl.removeClass('hover').addClass('active');
                  return [updatePos, close];
                };
                if (_.isFunction(opts.el)) {
                  return opts.el((function(el, onClose) {
                    el.css('position', 'absolute');
                    el.appendTo(triggerEl);
                    return init(el);
                  }), {
                    pin: pin,
                    unpin: unpin
                  });
                } else {
                  opts.el.show();
                  return init(opts.el, false);
                }
              }), 200);
              triggerEl.one('mouseleave', function() {
                clearTimeout(openTimerId);
                return triggerEl.removeClass('hover');
              });
              return {
                pin: pin,
                unpin: unpin
              };
            };
          })(this));
        },
        observeOffers: function(view, el, data) {
          var offers, updateAlternative, updateCurrent;
          offers = data;
          el.html('<span class="current offer"><span class="price" /><span class="icon" /></span>');
          updateCurrent = function() {
            var current;
            current = offers.current.get();
            util.tooltip(el.find('.current .icon').css('backgroundImage', "url(" + current.siteIcon + ")"), current.siteName);
            el.find('.current .price').html(current.price);
            if (current.cheaper) {
              return el.find('.current').addClass('cheaper');
            } else {
              return el.find('.current').removeClass('cheaper');
            }
          };
          updateAlternative = (function(_this) {
            return function() {
              var alternative;
              alternative = offers.alternative.get();
              el.find('.alternative').remove();
              if (alternative) {
                el.append('<span class="alternative offer"><span class="price" /><span class="icon" /></span>');
                if (alternative.cheaper) {
                  el.find('.alternative').addClass('cheaper');
                }
                util.tooltip(el.find('.alternative .icon').css('backgroundImage', "url(" + alternative.siteIcon + ")"), alternative.siteName);
                return el.find('.alternative .price').html(alternative.price);
              }
            };
          })(this);
          updateCurrent();
          offers.current.observe(updateCurrent);
          updateAlternative();
          return offers.alternative.observe(updateAlternative);
        },
        scrollbar: function(wrapper, opts) {
          if (opts == null) {
            opts = {};
          }
          if (window.navigator.appVersion.indexOf('Windows') !== -1) {
            return setTimeout(((function(_this) {
              return function() {
                var w;
                wrapper.css({
                  overflow: 'hidden'
                });
                w = $('<div />').css({
                  width: '100%',
                  height: '100%'
                }).addClass('antiscroll-inner');
                w.append(wrapper.children());
                wrapper.append(w);
                wrapper.antiscroll({
                  useVScroll: false
                });
                if (opts.trapScrolling) {
                  return util.trapScrolling(w);
                }
              };
            })(this)), 0);
          } else {
            if (opts.trapScrolling) {
              return util.trapScrolling(wrapper);
            }
          }
        },
        initScrollbar: function(el, opts) {
          var bars, scrolling, timerId, wrapper;
          if (opts == null) {
            opts = {};
          }
          if (opts.trapScrolling == null) {
            opts.trapScrolling = true;
          }
          if (opts.absolute == null) {
            opts.absolute = true;
          }
          el.addClass('scroll');
          wrapper = $('<div class="scrollWrapper" />');
          wrapper.append(el.children());
          wrapper.appendTo(el);
          wrapper.css('padding', el.css('padding'));
          if (opts.trapScrolling) {
            util.trapScrolling(wrapper);
          }
          if (!opts.absolute) {
            if (el.css('position') === 'static') {
              el.css('position', 'relative');
            }
            wrapper.css({
              position: 'static',
              maxHeight: el.css('maxHeight')
            });
          }
          if (window.navigator.appVersion.indexOf('Windows') !== -1) {
            wrapper.addClass('hasScrollBars');
            bars = [];
            if (el.hasClass('vertical')) {
              (function() {
                var thumbEl, update;
                thumbEl = $('<div class="scrollThumb vertical" />');
                thumbEl.appendTo(el);
                update = function() {
                  thumbEl.height(Math.max(30, wrapper.height() / wrapper.get(0).scrollHeight * wrapper.height()));
                  return thumbEl.css('top', (wrapper.scrollTop() / (wrapper.get(0).scrollHeight - wrapper.height())) * (wrapper.height() - thumbEl.height()));
                };
                return bars.push({
                  el: thumbEl,
                  update: update
                });
              })();
            }
            if (el.hasClass('horizontal')) {
              (function() {
                var thumbEl, update;
                thumbEl = $('<div class="scrollThumb horizontal" />');
                thumbEl.appendTo(el);
                update = function() {
                  thumbEl.width(Math.max(30, wrapper.width() / wrapper.get(0).scrollWidth * wrapper.width()));
                  return thumbEl.css('left', (wrapper.scrollLeft() / (wrapper.get(0).scrollWidth - wrapper.width())) * (wrapper.width() - thumbEl.width()));
                };
                return bars.push({
                  el: thumbEl,
                  update: update
                });
              })();
            }
            scrolling = false;
            timerId = null;
            wrapper.scroll(function() {
              var bar, _i, _len;
              for (_i = 0, _len = bars.length; _i < _len; _i++) {
                bar = bars[_i];
                bar.update();
              }
              clearTimeout(timerId);
              timerId = setTimeout((function() {
                el.removeClass('scrolling');
                return scrolling = false;
              }), 1000);
              if (!scrolling) {
                el.addClass('scrolling');
                return scrolling = true;
              }
            });
            setTimeout((function() {
              var bar, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = bars.length; _i < _len; _i++) {
                bar = bars[_i];
                _results.push(bar.update());
              }
              return _results;
            }), 50);
            el.addClass('scrolling');
            return setTimeout((function() {
              return el.removeClass('scrolling');
            }), 2000);
          }
        },
        draggableImage: function(args) {
          return util.initDragging(args.el, {
            acceptsDrop: false,
            affect: false,
            context: 'page',
            cancel: args.cancel,
            helper: function(event) {
              return $('<div class="-agora -agora-productClip t-item dragging" style="position:absolute"> <span class="p-image"></span> <div class="g-productInfo"> <span class="p-title">loading...</span> <span class="p-site">loading...</span> <span class="p-price">loading...</span> </div> </div>');
            },
            start: (function(_this) {
              return function(event, ui) {
                var clip, clipTimerId, height, image, item, itemState, marginLeft, marginTop, offsetX, offsetY, price, site, size, target, title, view, width;
                if (typeof args.onStart === "function") {
                  args.onStart();
                }
                shoppingBarView.startDrag();
                target = $(event.currentTarget);
                width = target.width();
                height = target.height();
                image = ui.helper.find('.p-image');
                image.css({
                  backgroundImage: "url('" + (args.image ? args.image() : args.el.attr('src')) + "')",
                  width: width,
                  height: height
                });
                title = ui.helper.find('.p-title');
                site = ui.helper.find('.p-site');
                price = ui.helper.find('.p-price');
                view = new View(args.view.contentScript);
                view.type = 'ProductClip';
                view.onData = function(data) {
                  if (data.title.get()) {
                    title.html(data.title.get());
                  }
                  view.observe(data.title, function(mutation) {
                    return title.html(mutation.value);
                  });
                  if (data.site.get()) {
                    site.html(data.site.get());
                  }
                  view.observe(data.site, function(mutation) {
                    return site.html(mutation.value);
                  });
                  if (data.price.get()) {
                    price.html(data.price.get());
                  }
                  return view.observe(data.price, function(mutation) {
                    return price.html(mutation.value);
                  });
                };
                ui.helper.data('dragging').data = args.productData();
                marginLeft = 0;
                marginTop = 0;
                offsetX = event.pageX - target.offset().left + marginLeft;
                offsetY = event.pageY - target.offset().top + marginTop;
                ui.helper.css({
                  marginLeft: marginLeft,
                  width: width,
                  height: height,
                  zIndex: 999999
                });
                ui.helper.find('.g-productInfo').css({
                  opacity: 0
                });
                size = {
                  width: 48,
                  height: 48
                };
                clip = function() {
                  var curve, time;
                  time = 200;
                  curve = null;
                  ui.helper.animate({
                    marginLeft: offsetX - size.width * .9,
                    marginTop: offsetY - size.height * .9,
                    width: 148,
                    height: size.height
                  }, time, curve);
                  image.animate({
                    width: 44,
                    height: 44
                  }, time, curve);
                  return setTimeout((function() {
                    if (!itemState) {
                      return ui.helper.find('.g-productInfo').animate({
                        opacity: 1
                      }, time, curve);
                    }
                  }), time);
                };
                itemState = false;
                item = function() {
                  var time;
                  itemState = true;
                  time = 300;
                  image.animate({
                    width: 44,
                    height: 44
                  }, time);
                  ui.helper.find('.g-productInfo').stop(true).animate({
                    opacity: 0
                  }, time, function() {});
                  return ui.helper.stop(true).animate({
                    width: size.width,
                    height: size.height,
                    marginLeft: offsetX - size.width / 2,
                    marginTop: offsetY - size.height / 2
                  }, time);
                };
                view.represent(args.productData());
                ui.args.onDraggedOver = function(el) {
                  if (el) {
                    clearTimeout(clipTimerId);
                    if (!itemState) {
                      item();
                    }
                    return ui.helper.addClass('adding');
                  } else {
                    return ui.helper.removeClass('adding');
                  }
                };
                ui.args.stop = function(event, ui) {
                  shoppingBarView.startDrag();
                  view.destruct();
                  return ui.helper.animate({
                    marginLeft: offsetX,
                    marginTop: offsetY,
                    width: 10,
                    height: 10,
                    opacity: 0
                  }, 100, 'linear', function() {
                    return ui.helper.remove();
                  });
                };
                return clipTimerId = setTimeout(clip, 100);
              };
            })(this)
          });
        },
        initMosaic: function(view, el, selector, dataSource) {
          var classesForLength, contents, prevLength, updateForLength;
          contents = view.listInterface(el, selector, (function(_this) {
            return function(el, data, pos, onRemove) {
              if (data) {
                el.css('background-image', "url('" + data + "')");
              }
              return el;
            };
          })(this));
          contents.setDataSource(dataSource);
          prevLength = contents.length();
          classesForLength = {
            0: 'empty',
            1: 'oneItem',
            2: 'twoItems',
            3: 'threeItems',
            4: 'fourItems'
          };
          updateForLength = (function(_this) {
            return function() {
              el.removeClass(classesForLength[prevLength]);
              return el.addClass(classesForLength[prevLength = contents.length()]);
            };
          })(this);
          contents.onLengthChanged = updateForLength;
          return updateForLength();
        },
        decisionPreview: function(args) {
          var updateTooltip;
          updateTooltip = (function(_this) {
            return function() {
              var text, _ref, _ref1;
              text = ((_ref = args.descriptor.get()) != null ? _ref.descriptor : void 0) ? (_ref1 = args.descriptor.get()) != null ? _ref1.descriptor : void 0 : '<i>Edit Decision</i>';
              return util.tooltip2(args.anchorEl(), "<span class='descriptorTooltip'> <span class='preview'><span class='image' /></span> <div class='descriptorWrapper'><span class='icon' /> <span class='descriptor'>" + text + "</span><a class='edit' href='#' /></div> </span>", {
                parentView: args.view,
                canFocus: true,
                type: 'html',
                anchor: args.selection.length() ? args.el : void 0,
                distance: 20,
                frameType: 'balloon',
                delay: 300,
                cancel: function() {
                  return window.suppressPopups || args.view.shoppingBarView.disableProductPopups;
                },
                init: function(el, close, view) {
                  var classesForLength, contents, edit, openCompareView, prevLength, updateForLength, _ref2;
                  args.view.shoppingBarView.propOpen(view);
                  args.view.shoppingBarView.disableProductPopups = true;
                  icons.setIcon(el.find('.icon'), (_ref2 = args.icon.get()) != null ? _ref2 : 'list', {
                    size: 'small'
                  });
                  el.find('.icon').removeClass('t-item');
                  edit = function() {
                    var editDescriptorView, frame;
                    editDescriptorView = args.view.createView('EditDescriptor');
                    args.view.shoppingBarView.propOpen(editDescriptorView);
                    editDescriptorView._mouseenter(true);
                    editDescriptorView.close = function() {
                      return frame.close();
                    };
                    editDescriptorView.represent(args.view.data.get().id);
                    frame = Frame.frameAround(args.el, editDescriptorView.el, {
                      type: 'balloon',
                      distance: 20,
                      close: function() {
                        frame.close();
                        return editDescriptorView.destruct();
                      }
                    });
                    tracking.page("" + (args.view.path()) + "/" + (editDescriptorView.pathElement()));
                    return false;
                  };
                  el.find('.edit').click(edit);
                  openCompareView = function() {
                    var compareTileView, frameEl;
                    tracking.page("" + (args.view.path()) + "/DecisionPreview/Compare");
                    compareTileView = new CompareView(args.view.contentScript);
                    compareTileView.shoppingBarView = args.view.shoppingBarView;
                    frameEl = Frame.wrapInFrame(compareTileView.el, {
                      type: 'fullscreen',
                      scroll: true,
                      resize: function(width, height) {
                        return [width - 100, height - 100];
                      },
                      close: function() {
                        return compareTileView.destruct();
                      }
                    });
                    compareTileView.close = function() {
                      return Frame.close(frameEl);
                    };
                    frameEl.appendTo(document.body);
                    Frame.show(frameEl);
                    compareTileView.setContEl(frameEl.data('client'));
                    compareTileView.backEl = compareTileView.contEl;
                    compareTileView.el.css({
                      margin: '20px auto 0'
                    });
                    return compareTileView.represent({
                      decision: {
                        id: args.view.data.get().id
                      }
                    });
                  };
                  el.find('.descriptor').click(edit);
                  el.find('.preview').click(openCompareView);
                  contents = view.listInterface(el.find('.preview'), '.image', function(el, data, pos, onRemove) {
                    return el.css('background-image', "url('" + data + "')");
                  });
                  contents.setDataSource(args.preview);
                  prevLength = contents.length();
                  classesForLength = {
                    0: 'empty',
                    1: 'oneItem',
                    2: 'twoItems',
                    3: 'threeItems',
                    4: 'fourItems'
                  };
                  updateForLength = function() {
                    el.find('.preview').removeClass(classesForLength[prevLength]);
                    return el.find('.preview').addClass(classesForLength[prevLength = contents.length()]);
                  };
                  contents.onLengthChanged = updateForLength;
                  updateForLength();
                  return _tutorial(['AccessWorkspace', 'AccessEditDescriptor'], [el.find('.preview'), el.find('.descriptor')]);
                },
                onClose: function() {
                  return delete args.view.shoppingBarView.disableProductPopups;
                }
              });
            };
          })(this);
          args.descriptor.observe(updateTooltip);
          args.selection.observe(updateTooltip);
          return updateTooltip();
        },
        presentViewAsModalDialog: function(type, args, params) {
          var view;
          if (params == null) {
            params = {};
          }
          if (params.waitUntilRepresented) {
            view = View.createView(type);
            return view.represent(args, function() {
              return util.showDialog(function() {
                return view;
              });
            });
          } else {
            return util.showDialog(function() {
              view = View.createView(type);
              view.represent(args);
              return view;
            });
          }
        },
        positioned: function(el) {
          var i, parent, parents;
          if (el.css("position") !== "static" || el.get(0) === document.body) {
            return el;
          } else {
            parents = el.parents();
            i = 0;
            while (i < parents.length) {
              parent = $(parents.get(i));
              if (parent.css("position") !== "static" || parent.get(0) === document.body) {
                return parent;
                break;
              }
              ++i;
            }
          }
        }
      };
    }
  };
});

//# sourceMappingURL=util.map
