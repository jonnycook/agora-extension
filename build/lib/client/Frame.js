// Generated by CoffeeScript 1.7.1
define(function() {
  return function() {
    var Frame, center, positionForAboveCentered, positioned, relativeToScreen;
    positionForAboveCentered = function(p, sateliteEl, contEl) {
      var distance, margin, top, _ref, _ref1, _ref2;
      margin = 10;
      distance = (_ref = (_ref1 = sateliteEl.data('args')) != null ? _ref1.distance : void 0) != null ? _ref : 10;
      top = ((_ref2 = sateliteEl.data('args')) != null ? _ref2.position : void 0) === 'below' ? p.top + distance : p.top - sateliteEl.height() - distance;
      return {
        left: Math.max(margin + window.scrollX, Math.min(p.left - sateliteEl.width() / 2, window.scrollX + contEl.width() - sateliteEl.width() - margin)),
        top: top
      };
    };
    center = function(el, frameEl) {
      var top, _ref;
      top = ((_ref = frameEl.data('args')) != null ? _ref.position : void 0) === 'below' ? el.offset().top + el.height() : el.offset().top;
      return {
        left: el.offset().left + el.outerWidth() / 2,
        top: top
      };
    };
    relativeToScreen = function(position) {
      return {
        left: position.left - window.scrollX,
        top: position.top - window.scrollY
      };
    };
    positioned = function(pos, position) {
      if (position == null) {
        position = 'absolute';
      }
      return {
        position: position,
        left: pos.left,
        top: pos.top
      };
    };
    return Frame = (function() {
      function Frame() {}

      Frame.wrapInFrame = function(el, args) {
        var clientEl, close, frameEl, pos, _ref;
        if (args == null) {
          args = {};
        }
        if (args.type == null) {
          args.type = 'hover';
        }
        frameEl = null;
        close = function() {
          return Frame.close(frameEl);
        };
        switch (args.type) {
          case 'ds':
            pos = (_ref = args.pos) != null ? _ref : 'top';
            frameEl = $("<table class='-agora v-frame " + pos + "'> <tr><td class='tl'></td><td class='t'></td><td class='tr'></td></tr> <tr><td class='l'></td><td class='c'><div class='client'></div></td><td class='r'></td></tr> <tr><td class='bl'></td><td class='b'></td><td class='br'></td></tr> </table>");
            break;
          case 'hover':
            frameEl = $("<div class='-agora v-frame'> <div class='client' /> </div>");
            break;
          case 'balloon':
            frameEl = $('<div class="-agora v-frame"> <span class="-string" /> <div class="client" /> </div>');
            if (args.color === 'dark') {
              frameEl.addClass('dark');
            }
            break;
          case 'tooltip':
            frameEl = $('<div class="-agora v-frame"> <span class="-arrow" /> <div class="client" /> </div>');
            break;
          case 'fullscreen':
            frameEl = $("<div class='-agora v-frame'> <div class='client' /> </div>").scroll(function(e) {
              return e.stopPropagation();
            });
        }
        frameEl.addClass(args.type);
        frameEl.data('args', args);
        if (args.close) {
          frameEl.append($('<a href="#" class="close" />').click(function() {
            close();
            return false;
          }));
          util.tooltip(frameEl.find('.close'), 'close');
        }
        clientEl = frameEl.find('.client');
        if (args.scroll) {
          clientEl.css({
            overflow: 'auto'
          });
        }
        frameEl.data('client', clientEl);
        if (args.width) {
          clientEl.width(args.width);
        }
        if (args.height) {
          clientEl.height(args.height);
        }
        clientEl.append(el).end();
        return frameEl;
      };

      Frame.updatePositionClass = function(frameEl) {
        if (frameEl.data('position')) {
          frameEl.removeClass(frameEl.data('position'));
        }
        frameEl.addClass(frameEl.data('args').position);
        return frameEl.data('position', frameEl.data('args').position);
      };

      Frame.fixFrameAt = function(position, frameEl, contEl) {
        var aw, bp, p, w;
        if (contEl == null) {
          contEl = $(window);
        }
        this.updatePositionClass(frameEl);
        frameEl.css({
          position: 'absolute'
        });
        frameEl.css(positioned(relativeToScreen(positionForAboveCentered(position, frameEl, contEl)), 'fixed'));
        if (frameEl.hasClass('ds')) {
          p = Math.max(15, Math.min(position.left - frameEl.offset().left, frameEl.width() - 15));
          w = 634;
          aw = 8;
          bp = (w - aw) / 2 + p;
          return frameEl.find('.b').css({
            backgroundPosition: "" + bp + "px 0"
          });
        } else if (frameEl.hasClass('balloon')) {
          p = Math.max(15, Math.min(position.left - frameEl.offset().left, frameEl.width() - 15));
          return frameEl.find('.-string').css({
            left: p
          });
        } else if (frameEl.hasClass('tooltip')) {
          p = Math.max(2, Math.min(position.left - frameEl.offset().left, frameEl.width() - 2));
          w = 14;
          aw = 14;
          bp = (w - aw) / 2 + p;
          return frameEl.find('.-arrow').css({
            left: p
          });
        }
      };

      Frame.positionFrameAboveAndCentered = function(anchorEl, frameEl, contEl) {
        var aw, bp, p, w;
        if (contEl == null) {
          contEl = $(window);
        }
        this.updatePositionClass(frameEl);
        frameEl.css({
          position: 'absolute'
        });
        frameEl.css(positioned(positionForAboveCentered(center(anchorEl, frameEl), frameEl, contEl)));
        if (frameEl.hasClass('ds')) {
          p = (anchorEl.offset().left + anchorEl.outerWidth() / 2) - frameEl.offset().left;
          w = 634;
          aw = 8;
          bp = (w - aw) / 2 + p;
          return frameEl.find('.b').css({
            backgroundPosition: "" + bp + "px 0"
          });
        } else if (frameEl.hasClass('balloon')) {
          p = Math.max(2 + scroll, Math.min((anchorEl.offset().left + anchorEl.outerWidth() / 2) - frameEl.offset().left, frameEl.width() - 2));
          return frameEl.find('.-string').css({
            left: p
          });
        } else if (frameEl.hasClass('tooltip')) {
          p = Math.max(2, Math.min((anchorEl.offset().left + anchorEl.outerWidth() / 2) - frameEl.offset().left, frameEl.width() - 2));
          return frameEl.find('.-arrow').css({
            left: p
          });
        }
      };

      Frame.fixFrameAboveAndCentered = function(anchorEl, frameEl, contEl) {
        if (contEl == null) {
          contEl = null;
        }
        return this.fixFrameAt(center(anchorEl, frameEl), frameEl, contEl);
      };

      Frame.setFrameAboveAndCentered = function(anchorEl, frameEl, contEl) {
        var el;
        if (contEl == null) {
          contEl = null;
        }
        el = anchorEl;
        while (el.get(0) !== document.body) {
          if (el.css('position') === 'fixed') {
            this.fixFrameAboveAndCentered(anchorEl, frameEl, contEl);
            return;
          }
          el = el.offsetParent();
        }
        return this.positionFrameAboveAndCentered(anchorEl, frameEl, contEl);
      };

      Frame.fixAtEl = function(anchorEl, frameEl) {
        return this.fixFrameAt(center(anchorEl), frameEl, $(window));
      };

      Frame.positionInCenterOfScreen = function(frameEl) {
        var resize, resizeTimerId;
        frameEl.css({
          position: 'absolute'
        });
        resize = function() {
          var height, width, _base, _ref;
          if (frameEl.data('args').resize) {
            _ref = typeof (_base = frameEl.data('args')).resize === "function" ? _base.resize($(window).width(), $(window).height()) : void 0, width = _ref[0], height = _ref[1];
            frameEl.data('client').width(width).height(height).triggerHandler('resize');
          }
          frameEl.css({
            left: ($(window).width() - frameEl.width()) / 2 + window.scrollX,
            top: ($(window).height() - frameEl.height()) / 2 + window.scrollY
          });
          return true;
        };
        resizeTimerId = null;
        $(window).resize(function() {
          if (frameEl.parent().get(0)) {
            clearTimeout(resizeTimerId);
            return resizeTimerId = setTimeout(resize, 10);
          } else {
            return $(window).unbind('resize', arguments.callee);
          }
        });
        resize();
        return setTimeout(resize, 10);
      };

      Frame.close = function(frameEl, animate) {
        var _ref, _ref1;
        if (animate == null) {
          animate = true;
        }
        if (!$.contains(document, frameEl.get(0))) {
          return;
        }
        if (frameEl.data('args').type === 'fullscreen') {
          $(document.body).removeClass('-agora-modelOpen');
          $('.-agora-fullscreenOverlay').remove();
          delete this.currentFullscreenFrameEl;
        }
        frameEl.unbind();
        if (animate) {
          return frameEl.fadeOut((_.isNumber(animate) ? animate : 200), function() {
            var _ref, _ref1;
            if ((_ref = frameEl.data('args')) != null) {
              if (typeof _ref.onClose === "function") {
                _ref.onClose();
              }
            }
            if ((_ref1 = frameEl.data('args')) != null) {
              if (typeof _ref1.close === "function") {
                _ref1.close();
              }
            }
            return frameEl.remove();
          });
        } else {
          if ((_ref = frameEl.data('args')) != null) {
            if (typeof _ref.onClose === "function") {
              _ref.onClose();
            }
          }
          if ((_ref1 = frameEl.data('args')) != null) {
            if (typeof _ref1.close === "function") {
              _ref1.close();
            }
          }
          return frameEl.remove();
        }
      };

      Frame.show = function(frameEl) {
        var resize, resizeTimerId;
        if (frameEl.data('args').type === 'fullscreen') {
          if (this.currentFullscreenFrameEl) {
            this.close(this.currentFullscreenFrameEl);
          }
          this.currentFullscreenFrameEl = frameEl;
          resize = function() {
            frameEl.data('client').triggerHandler('resize');
            return true;
          };
          resizeTimerId = null;
          Q(window).resize(function() {
            if (frameEl.parent().get(0)) {
              clearTimeout(resizeTimerId);
              return resizeTimerId = setTimeout(resize, 10);
            } else {
              return $(window).unbind('resize', arguments.callee);
            }
          });
          resize();
          Q(document.body).addClass('-agora-modelOpen');
        }
        return frameEl.css({
          opacity: 0
        }).animate({
          opacity: 1
        }, 100);
      };

      Frame.frame = function(el, args) {
        var frame;
        if (args == null) {
          args = null;
        }
        frame = new Frame;
        frame.args = args != null ? args : {};
        frame.el = Frame.wrapInFrame(el, frame.args);
        frame.el.data('frame', frame);
        return frame;
      };

      Frame.frameFixedAbove = function(anchorEl, el, args) {
        var frame;
        if (args == null) {
          args = null;
        }
        frame = Frame.frame(el, args);
        frame.showFixedAbove(anchorEl);
        return frame;
      };

      Frame.showPositionedAbove = function(anchorEl, el, args) {
        var frame;
        if (args == null) {
          args = null;
        }
        frame = Frame.frame(el, args);
        frame.showPositionedAbove(anchorEl);
        return frame;
      };

      Frame.frameAbove = function(anchorEl, el, args) {
        var frame;
        if (args == null) {
          args = null;
        }
        frame = Frame.frame(el, args);
        if (args != null ? args.parent : void 0) {
          frame.el.appendTo(args.parent);
        }
        frame.showAbove(anchorEl);
        return frame;
      };

      Frame.frameAround = function(anchorEl, el, args) {
        var frame;
        if (args == null) {
          args = null;
        }
        frame = Frame.frame(el, args);
        frame.showAround(anchorEl);
        return frame;
      };

      Frame.prototype.shown = function() {
        return this.el.parent().length;
      };

      Frame.prototype.showFixedAbove = function(el) {
        if (!this.shown()) {
          this.el.appendTo(document.body);
        }
        this.update = (function(_this) {
          return function() {
            return Frame.fixFrameAboveAndCentered(el, _this.el);
          };
        })(this);
        this.update();
        return Frame.show(this.el);
      };

      Frame.prototype.showPositionedAbove = function(el) {
        if (!this.shown()) {
          this.el.appendTo(document.body);
        }
        Frame.positionFrameAboveAndCentered(el, this.el);
        return Frame.show(this.el);
      };

      Frame.prototype.showAbove = function(el) {
        if (!this.shown()) {
          this.el.appendTo(document.body);
        }
        this.update = (function(_this) {
          return function() {
            return Frame.setFrameAboveAndCentered(el, _this.el);
          };
        })(this);
        this.update();
        return Frame.show(this.el);
      };

      Frame.prototype.showAround = function(el) {
        var _base;
        if ((_base = this.args).position == null) {
          _base.position = 'above';
        }
        this.showAbove(el);
        if (this.args.position === 'above') {
          if (this.el.offset().top < $(window).scrollTop()) {
            this.args.position = 'below';
            return this.showAbove(el);
          }
        }
      };

      Frame.prototype.show = function() {
        if (!this.shown()) {
          this.el.appendTo(document.body);
        }
        return Frame.show(this.el);
      };

      Frame.prototype.close = function(animate) {
        if (animate == null) {
          animate = true;
        }
        return Frame.close(this.el, animate);
      };

      return Frame;

    })();
  };
});

//# sourceMappingURL=Frame.map
