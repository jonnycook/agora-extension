// Generated by CoffeeScript 1.10.0
var indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['underscore', 'siteConfig'], function(_, siteConfig) {
  var Site;
  return Site = (function() {
    Site.productClasses = {};

    Site.sites = {};

    Site.siteForUrl = function(url) {
      var config, i, len, name, part, ref, ref1;
      url = (ref = url.match('^https?://(.*)$')) != null ? ref[1] : void 0;
      if (url) {
        for (name in siteConfig) {
          config = siteConfig[name];
          if (config.hosts) {
            ref1 = config.hosts;
            for (i = 0, len = ref1.length; i < len; i++) {
              part = ref1[i];
              if (url.substr(0, part.length) === part) {
                return this.site(name, part);
              }
            }
          }
        }
      }
      return null;
    };

    Site.site = function(name, host) {
      var config, matches;
      if (matches = name.match(/^General\/(.*)$/)) {
        return new Site('General', siteConfig.General, matches[1]);
      } else {
        if (this.sites[name + ";" + host]) {
          return this.sites[name + ";" + host];
        } else {
          config = siteConfig[name];
          if (config) {
            return this.sites[name + ";" + host] = new Site(name, config, host);
          } else {
            throw new Error("No site '" + name + "'");
          }
        }
      }
    };

    Site.productSid = function(background, url, cb) {
      var site;
      site = this.siteForUrl(url);
      return site.productSid(background, url, cb);
    };

    Site.siteById = function(id) {
      var host, name, ref, site;
      site = this.site(id);
      if (!site) {
        ref = id.split('/'), name = ref[0], host = ref[1];
        site = this.site(name, host);
      }
      return site;
    };

    Site.id = 0;

    function Site(name1, config1, host1) {
      var allFeatures, ref;
      this.name = name1;
      this.config = config1;
      this.host = host1;
      this.nid = Site.id++;
      ref = this.config, this.hosts = ref.hosts, this.icon = ref.icon;
      this.url = "http://agora.sh/site.php?name=" + this.name;
      allFeatures = ['offers', 'reviews', 'rating', 'priceWatch'];
      this.features = this.config.excludedFeatures ? _.difference(allFeatures, this.config.excludedFeatures) : allFeatures;
      this._productScraper = {};
    }

    Site.prototype.hasFeature = function(feature) {
      return indexOf.call(this.features, feature) >= 0;
    };

    Site.prototype.id = function() {
      if (this.name === 'General') {
        return this.name + "/" + this.host;
      } else {
        return this.name;
      }
    };

    Site.prototype.getSiteInjector = function(background, cb) {
      var siteInjectorName;
      siteInjectorName = this.name + "SiteInjector";
      return background.require(["sites/" + this.name + "/" + siteInjectorName], (function(_this) {
        return function(siteInjector) {
          return cb(siteInjector, _this);
        };
      })(this));
    };

    Site.prototype.getSiteScraper = function(background, cb) {
      var siteScraperName;
      siteScraperName = this.name + "SiteScraper";
      return background.require(["sites/" + this.name + "/" + siteScraperName], function(siteScraper) {
        return cb(siteScraper);
      });
    };

    Site.prototype.productScraperClass = function(background, cb) {
      var productScraperName;
      productScraperName = this.name + "ProductScraper";
      return background.require(["sites/" + this.name + "/" + productScraperName], function(productScraper) {
        return cb(productScraper);
      });
    };

    Site.prototype.productSid = function(background, url, cb, retrievalId) {
      return this.productScraperClass(background, (function(_this) {
        return function(productScraper) {
          return productScraper.productSid(background, url, cb, retrievalId);
        };
      })(this));
    };

    Site.prototype.productScraper = function(background, productSid, cb) {
      var ref, ref1;
      if ((ref = this._productScraper) != null ? ref[productSid] : void 0) {
        return cb((ref1 = this._productScraper) != null ? ref1[productSid] : void 0);
      } else {
        if (this.cbs == null) {
          this.cbs = {};
        }
        if (this.cbs[productSid]) {
          return this.cbs[productSid].push(cb);
        } else {
          this.cbs[productSid] = [cb];
          return this.productScraperClass(background, (function(_this) {
            return function(productScraper) {
              var i, len, ref2, scraper;
              _this._productScraper[productSid] = scraper = new productScraper(_this, productSid, background);
              ref2 = _this.cbs[productSid];
              for (i = 0, len = ref2.length; i < len; i++) {
                cb = ref2[i];
                cb(scraper);
              }
              return delete _this.cbs[productSid];
            };
          })(this));
        }
      }
    };

    Site.prototype.productUrl = function(sid) {
      return this.config.productUrl(sid);
    };

    Site.prototype.product = function(background, product, cb) {
      var productClassName, siteProduct;
      if (this.config.hasProductClass) {
        if (Site.productClasses[this.name]) {
          siteProduct = new Site.productClasses[this.name](product);
          siteProduct.site = this;
          return cb(siteProduct);
        } else {
          productClassName = this.name + "Product";
          return background.require(["sites/" + this.name + "/" + productClassName], (function(_this) {
            return function(productClass) {
              Site.productClasses[_this.name] = productClass;
              siteProduct = new productClass(product);
              siteProduct.site = _this;
              return cb(siteProduct);
            };
          })(this));
        }
      } else {
        return cb();
      }
    };

    return Site;

  })();
});

//# sourceMappingURL=Site.js.map
