// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'scraping/resourceScrapers/DeclarativeResourceScraper', 'util', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, DeclarativeResourceScraper, util, _) {
  var LandsEndProductScraper;
  return LandsEndProductScraper = (function(superClass) {
    extend(LandsEndProductScraper, superClass);

    function LandsEndProductScraper() {
      return LandsEndProductScraper.__super__.constructor.apply(this, arguments);
    }

    LandsEndProductScraper.prototype.version = 1;

    LandsEndProductScraper.prototype.parseSid = function(sid) {
      var id, ref, style;
      ref = sid.split('-'), id = ref[0], style = ref[1];
      return {
        id: id,
        style: style
      };
    };

    LandsEndProductScraper.productSid = function(background, url, cb, retrievalId) {
      return background.httpRequest(url, {
        cb: function(response) {
          var id, ref;
          id = (ref = response.match(/<span id="mobileItemNumber_(\d*)">/)) != null ? ref[1] : void 0;
          if (id) {
            return cb(id + "-" + retrievalId);
          } else {
            return cb();
          }
        }
      });
    };

    LandsEndProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return "http://www.landsend.com/pp/StylePage-" + this.productSid.style + "_AL.html";
        }
      },
      reviewData: {
        url: function() {
          return "http://landsend.ugc.bazaarvoice.com/2008-en_us/" + this.productSid.id + "/reviews.djs?format=embeddedhtml";
        }
      }
    };

    LandsEndProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var regExp, style;
          regExp = new RegExp("Style(\\d*)\.number = " + this.productSid.style);
          style = regExp.exec(this.resource)[1];
          regExp = new RegExp("Style" + style + ".longName = \"([^\"]*)\";");
          return this.value(regExp.exec(this.resource)[1]);
        })
      },
      price: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var matches;
          matches = /<span class='pp-was-price'>\$[^<]*<\/span>\s*<span>\s*NOW \$([^<]*)/.exec(this.resource);
          if (matches) {
            return this.value(matches[1]);
          } else {
            matches = /<p id="productPrice_\d*" class="pp-summary-price" >\s*<span>\$([^<]*)<\/span>\s*- \$([^<]*?)\s*<\/p>/.exec(this.resource);
            if (matches) {
              return this.value(matches[1] + " - $" + matches[2]);
            } else {
              matches = /<p id="productPrice_\d*" class="pp-summary-price"\s*>\s*\$([\d.]*)/.exec(this.resource);
              if (matches) {
                return this.value(matches[1]);
              }
            }
          }
        })
      },
      image: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'image')
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var __, color, colorMatch, colorMatches, colors, i, id, image, imageId, imageMap, imageMatch, imageMatches, images, j, k, l, len, len1, len2, len3, len4, m, mainImages, more, n, name, order, properties, propertyMatch, propertyMatches, ref, ref1, valueMatches;
          more = this.declarativeScraper('scraper', 'more');
          more.sizes = _.unique(this.matchAll(this.resource, /<a href="#" id="sizeId_\d*_\d*_([^"]*)/, 1));
          colorMatches = this.matchAll(this.resource, /<a id="colorId_\d*_\d*_([^"]*)"[^>]*>\s*<span>([^<]*)/);
          colors = {};
          for (j = 0, len = colorMatches.length; j < len; j++) {
            colorMatch = colorMatches[j];
            colors[colorMatch[1]] = colorMatch[2];
          }
          more.colors = (function() {
            var results;
            results = [];
            for (id in colors) {
              name = colors[id];
              results.push({
                name: name,
                id: id
              });
            }
            return results;
          })();
          propertyMatches = this.matchAll(this.resource, /id="featureWrapper_([\S\s]*?)End of pp-sel/, 1);
          properties = {};
          for (k = 0, len1 = propertyMatches.length; k < len1; k++) {
            propertyMatch = propertyMatches[k];
            name = propertyMatch.match(/<h3 class="pp-selector-label">\s*([^<]*)/)[1].trim();
            if (properties[name] == null) {
              properties[name] = [];
            }
            valueMatches = this.matchAll(propertyMatch, /<span class="pp-accessibility-text"><\/span>\s*([\S\s]*?)\s*<\/a>/, 1);
            properties[name] = _.unique(properties[name].concat(valueMatches));
          }
          mainImages = _.unique(this.matchAll(this.resource, /<img class="default" src="([^?]*)/, 1));
          order = [];
          for (i = l = 0, len2 = mainImages.length; l < len2; i = ++l) {
            image = mainImages[i];
            order.push(image.match(/_([^_]*)_[^_]*$/)[1]);
          }
          order = _.unique(order);
          imageMatches = _.unique(this.matchAll(this.resource, /ProductImage\d*\.fileName = "(\d*_[^_]*_[^_]*_([^"]*))"/, 1));
          imageMap = {};
          for (m = 0, len3 = imageMatches.length; m < len3; m++) {
            imageMatch = imageMatches[m];
            ref = imageMatch.match(/_([^_]*)_([^_]*)$/), __ = ref[0], id = ref[1], color = ref[2];
            if (imageMap[color] == null) {
              imageMap[color] = {};
            }
            imageMap[color][id] = imageMatch;
          }
          images = {};
          ref1 = more.colors;
          for (n = 0, len4 = ref1.length; n < len4; n++) {
            color = ref1[n];
            images[color.id] = (function() {
              var len5, o, results;
              results = [];
              for (o = 0, len5 = order.length; o < len5; o++) {
                imageId = order[o];
                results.push("http://s7.landsend.com/is/image/LandsEnd/" + imageMap[color.id][imageId]);
              }
              return results;
            })();
          }
          more.images = images;
          more.properties = properties;
          return this.value(more);
        })
      },
      rating: {
        resource: 'reviewData',
        scraper: PatternResourceScraper([
          [
            /Write the first review<\\\/a>/, 0, function() {
              return 0;
            }
          ], [/alt=\\"(.*?) \/ 5\\"/, 1]
        ])
      },
      ratingCount: {
        resource: 'reviewData',
        scraper: PatternResourceScraper([
          [
            /Write the first review<\\\/a>/, 0, function() {
              return 0;
            }
          ], [/<span class=\\"BVRRNumber\\">(\d+)/, 1]
        ])
      },
      reviews: {
        resource: 'reviewData',
        scraper: ScriptedResourceScraper(function() {
          var authorMatches, contentMatches, dateMatches, i, ratingsMatches, ref, reviews, reviewsText, titleMatch, titleMatches;
          reviewsText = (ref = this.resource.match(/BVRRDisplayContentBodyID([\S\s]*)/)) != null ? ref[1] : void 0;
          if (reviewsText) {
            titleMatches = this.matchAll(reviewsText, /<span class=\\"BVRRValue BVRRReviewTitle\\">([\S\s]*?)<\\\/span>/, 1);
            contentMatches = this.matchAll(reviewsText, /<span class=\\"BVRRReviewText\\">([\S\s]*?)<\\\/span>/, 1);
            ratingsMatches = this.matchAll(reviewsText, /title=\\"(\d+) \/ 5\\"/, 1);
            authorMatches = this.matchAll(reviewsText, /<span class=\\"BVRRNickname\\">([^<]*?) <\\\/span>/, 1);
            dateMatches = this.matchAll(reviewsText, /<span class=\\"BVRRValue BVRRReviewDate\\">([^<]*)<\\\/span>/, 1);
            reviews = (function() {
              var j, len, results;
              results = [];
              for (i = j = 0, len = titleMatches.length; j < len; i = ++j) {
                titleMatch = titleMatches[i];
                results.push({
                  title: titleMatch,
                  content: contentMatches[i],
                  rating: ratingsMatches[i],
                  author: authorMatches[i],
                  date: dateMatches[i]
                });
              }
              return results;
            })();
            return this.value(reviews);
          } else {
            return this.value([]);
          }
        })
      }
    };

    return LandsEndProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=LandsEndProductScraper.js.map
