// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'scraping/resourceScrapers/DeclarativeResourceScraper', 'underscore', 'util'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, DeclarativeResourceScraper, _, util) {
  var NordstromProductScraper;
  return NordstromProductScraper = (function(superClass) {
    extend(NordstromProductScraper, superClass);

    function NordstromProductScraper() {
      return NordstromProductScraper.__super__.constructor.apply(this, arguments);
    }

    NordstromProductScraper.prototype.parseSid = function(sid) {
      var color, id, ref;
      ref = sid.split('-'), id = ref[0], color = ref[1];
      return {
        id: id,
        color: color
      };
    };

    NordstromProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          var url;
          url = "http://shop.nordstrom.com/s/" + this.productSid.id;
          if (this.productSid.color) {
            url += "?fashionColor=" + this.productSid.color;
          }
          return url;
        }
      },
      reviewData: {
        url: function() {
          return "http://nordstrom.ugc.bazaarvoice.com/4094redes/" + this.productSid.id + "/reviews.djs?format=embeddedhtml";
        }
      }
    };

    NordstromProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'title')
      },
      price: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'price')
      },
      image: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'image')
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var color, colorImages, colorMap, j, k, len, len1, match, matches, more, ref;
          more = this.declarativeScraper('scraper', 'more');
          match = /window.PageParameters=(\{[\S\s]*?\});/.exec(this.resource)[1];
          colorMap = {};
          ref = more.colors;
          for (j = 0, len = ref.length; j < len; j++) {
            color = ref[j];
            colorMap[color.id] = color.name;
          }
          matches = _.unique(this.matchAll(match, /"colorId":"([^"]*)","thumbnail":"([^"]*)"/, 0));
          colorImages = {};
          for (k = 0, len1 = matches.length; k < len1; k++) {
            match = matches[k];
            match = match.match(/"colorId":"([^"]*)","thumbnail":"([^"]*)"/);
            if (colorMap[match[1]]) {
              color = util.ucfirst(colorMap[match[1]]);
              colorImages[color] = match[2];
            }
          }
          more.colorImages = colorImages;
          return this.value(more);
        })
      },
      rating: {
        resource: 'reviewData',
        scraper: PatternResourceScraper([
          [
            /BVRRRatingSummaryLinkWriteFirstID/, 0, function() {
              return 0;
            }
          ], [/alt=\\"([\d.]*) out of 5\\"/, 1]
        ])
      },
      ratingCount: {
        resource: 'reviewData',
        scraper: PatternResourceScraper([
          [
            /BVRRRatingSummaryLinkWriteFirstID/, 0, function() {
              return 0;
            }
          ], [/<span class=\\"BVRRNumber\\">(\d+)/, 1]
        ])
      },
      reviews: {
        resource: 'reviewData',
        scraper: ScriptedResourceScraper(function() {
          var authorMatches, contentMatches, dateMatches, i, ratingsMatches, ref, reviews, reviewsText, titleMatch, titleMatches;
          reviewsText = (ref = this.resource.match(/BVRRDisplayContentBodyID([\S\s]*)/)) != null ? ref[1] : void 0;
          if (reviewsText) {
            titleMatches = this.matchAll(reviewsText, /<span class=\\"BVRRValue BVRRReviewTitle\\">([\S\s]*?)<\\\/span>/, 1);
            contentMatches = this.matchAll(reviewsText, /<span class=\\"BVRRReviewText\\">([\S\s]*?)<\\\/span>/, 1);
            ratingsMatches = this.matchAll(reviewsText, /title=\\"(\d+) out of 5\\"/, 1);
            authorMatches = this.matchAll(reviewsText, /<span class=\\"BVRRNickname\\">([^<]*?) <\\\/span>/, 1);
            dateMatches = this.matchAll(reviewsText, /<span class=\\"BVRRValue BVRRReviewDate\\">([^<]*)<\\\/span>/, 1);
            reviews = (function() {
              var j, len, results;
              results = [];
              for (i = j = 0, len = titleMatches.length; j < len; i = ++j) {
                titleMatch = titleMatches[i];
                results.push({
                  title: titleMatch,
                  content: contentMatches[i],
                  rating: ratingsMatches[i],
                  author: authorMatches[i],
                  date: dateMatches[i]
                });
              }
              return results;
            })();
            return this.value(reviews);
          } else {
            return this.value([]);
          }
        })
      }
    };

    return NordstromProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=NordstromProductScraper.js.map
