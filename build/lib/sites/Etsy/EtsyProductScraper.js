// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, _) {
  var EtsyProductScraper;
  return EtsyProductScraper = (function(superClass) {
    extend(EtsyProductScraper, superClass);

    function EtsyProductScraper() {
      return EtsyProductScraper.__super__.constructor.apply(this, arguments);
    }

    EtsyProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return "http://www.etsy.com/listing/" + this.productSid;
        }
      }
    };

    EtsyProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: PatternResourceScraper(/<span itemprop="name">([^<]*)<\/span>/, 1)
      },
      price: {
        resource: 'productPage',
        scraper: PatternResourceScraper(/<meta property="etsymarketplace:price_value" content="([^"]+)/, 1)
      },
      image: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var image, matches;
          matches = this.resource.match(/<li id="image-0"([\S\s]*?)<\/li>/);
          image = matches[1].match(/src='([^']*)'/);
          return this.value(image[1]);
        })
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var about, category, clean, combined, date, description, first, fullUrl, i, imageMatches, images, j, k, l, largeUrl, len, len1, len2, len3, len4, len5, m, match, matches, materialMatches, materials, n, occasion, optionName, optionNameMatches, options, rowMatches, seller, shipping, single, style, switches, tag, tagMatches, tags, to, toMatches, value, vari, variationMatches, variations, who;
          switches = {
            images: true,
            description: true,
            about: false,
            style: false,
            occasion: false,
            who: false,
            tags: true,
            materials: true,
            date: false,
            shipping: false,
            seller: false,
            options: true,
            category: false
          };
          value = {};
          if (switches.images) {
            images = [];
            matches = this.resource.match(/<div id="image-main">([\S\s]*?)<\/div>/);
            imageMatches = matches[1].match(/<li ([^>]*)>/g);
            for (i = 0, len = imageMatches.length; i < len; i++) {
              match = imageMatches[i];
              fullUrl = match.match(/data-full-image-href="([^"]*)"/)[1];
              largeUrl = match.match(/data-large-image-href="([^"]*)"/)[1];
              images.push({
                fullUrl: fullUrl,
                largeUrl: largeUrl
              });
            }
            value.images = images;
          }
          if (switches.description) {
            description = this.resource.match(/<div id="description-text">([\S\s]*?)<\/div>/);
            value.description = description[1].replace(/\s+/g, " ").replace(/^\s+|\s+$/g, "");
          }
          if (switches.about) {
            about = this.resource.match(/<h3>About this item<\/h3>\s*<p>([\S\s]*?)<\/p>/);
            value.about = about[1].replace(/\s+/g, " ").replace(/^\s+|\s+$/g, "");
          }
          if (switches.style) {
            style = this.resource.match(/<h3>Style<\/h3>\s*<p>([\S\s]*?)<\/p>/);
            value.style = style[1];
          }
          if (switches.occasion) {
            occasion = this.resource.match(/<h3>Occasion<\/h3>\s*<p>([\S\s]*?)<\/p>/);
            value.occasion = occasion[1];
          }
          if (switches.who) {
            who = this.resource.match(/<h3>Who it\&\#8217\;s for<\/h3>\s*<p>([\S\s]*?)<\/p>/);
            value.who = who[1];
          }
          if (switches.tags) {
            tags = [];
            matches = this.resource.match(/<div id="tags"([\S\s]*?)<\/div>/);
            if (matches) {
              tagMatches = matches[1].match(/<a href="[^"]*">([^<]*)<\/a>/g);
              for (j = 0, len1 = tagMatches.length; j < len1; j++) {
                match = tagMatches[j];
                tag = match.match(/<a href="[^"]*">([^<]*)<\/a>/)[1];
                tags.push(tag);
              }
              value.tags = tags;
            }
          }
          if (switches.materials) {
            materials = [];
            matches = this.resource.match(/<div id="item-overview">([\S\s]*?)<\/div>/);
            materialMatches = matches[1].match(/<li>Materials: ([\S\s]*?)<\/li>/);
            if (materialMatches) {
              materialMatches = materialMatches[1].match(/<span[^>]*>([\S\s]*?)<\/span>/);
              value.materials = materialMatches[1].split(", ");
            }
          }
          if (switches.date) {
            date = this.resource.match(/<li>Listed on ([\S\s]*?)<\/li>/);
            value.date = date[1];
          }
          if (switches.shipping) {
            shipping = {
              from: this.resource.match(/<li>Ships [\S\s]*? from ([^<]*)<\/li>/)[1]
            };
            shipping.rates = {};
            matches = this.resource.match(/<div class="section" id="item-shipping">([\S\s]*?)<\/div>/);
            console.log(matches[1]);
            toMatches = matches[1].match(/<td class="ship-to">([^<]*)<\/td>\s*<td class="ship-cost">\s*<span class="currency-symbol">[^<]*<\/span><span class="currency-value">([^<]*)<\/span>\s*<span class="currency-code">[^<]*<\/span>\s*<\/td>\s*<td class="ship-with">\s*<span class="currency-symbol">[^<]*<\/span>\s*<span class="currency-value">([^<]*)<\/span>/g);
            for (k = 0, len2 = toMatches.length; k < len2; k++) {
              match = toMatches[k];
              rowMatches = match.match(/<td class="ship-to">([^<]*)<\/td>\s*<td class="ship-cost">\s*<span class="currency-symbol">[^<]*<\/span><span class="currency-value">([^<]*)<\/span>\s*<span class="currency-code">[^<]*<\/span>\s*<\/td>\s*<td class="ship-with">\s*<span class="currency-symbol">[^<]*<\/span>\s*<span class="currency-value">([^<]*)<\/span>/);
              to = match.match(/<td class="ship-to">([^<]*)<\/td>/)[1].replace(/\s+/g, " ").replace(/^\s+|\s+$/g, "");
              single = match.match(/<span class="currency-value">([^<]*)<\/span>/)[1];
              combined = rowMatches[3];
              shipping.rates[to] = {
                single: single,
                combined: combined
              };
            }
            value.shipping = shipping;
          }
          if (switches.seller) {
            seller = this.resource.match(/<input type="hidden" value="([^"]*)" name="shopname" \/>/);
            value.seller = seller[1];
          }
          if (switches.options) {
            options = {};
            matches = this.resource.match(/<div class="item-variation-options clear">([\S\s]*?)<div id="item-overview">/);
            optionNameMatches = matches[1].match(/<div class="item-variation-option clear">([\S\s]*?)<\/div>/g);
            if (optionNameMatches) {
              for (l = 0, len3 = optionNameMatches.length; l < len3; l++) {
                match = optionNameMatches[l];
                optionName = match.match(/<label class="[^"]*">([^<]*)<\/label>/);
                variationMatches = [];
                variations = match.match(/<option[\s]*value[^>]*>([^<]*)<\/option>/g);
                for (m = 0, len4 = variations.length; m < len4; m++) {
                  vari = variations[m];
                  clean = vari.match(/<option[\s]*value[^>]*>([^<]*)<\/option>/)[1].trim();
                  variationMatches.push(clean);
                }
                options[optionName[1]] = variationMatches;
              }
              value.options = options;
              console.log(options.Size);
              console.log(options.Color);
            }
          }
          if (switches.category) {
            first = this.resource.match(/<ul id="breadcrumbs" class="clear">([\S\s]*?)<\/ul>/);
            matches = first[1].match(/<a href="[^"]*">([\S\s]*?)<\/a>/g);
            for (n = 0, len5 = matches.length; n < len5; n++) {
              match = matches[n];
              category = match.match(/<a href="[^"]*">([\S\s]*?)<\/a>/);
            }
            value.category = category[1];
          }
          return this.value(value);
        })
      }
    };

    return EtsyProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=EtsyProductScraper.js.map
