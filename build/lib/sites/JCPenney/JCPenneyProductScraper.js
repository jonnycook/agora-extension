// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, _) {
  var JCPenneyProductScraper;
  return JCPenneyProductScraper = (function(_super) {
    __extends(JCPenneyProductScraper, _super);

    function JCPenneyProductScraper() {
      return JCPenneyProductScraper.__super__.constructor.apply(this, arguments);
    }

    JCPenneyProductScraper.testProducts = ['204617362'];

    JCPenneyProductScraper.prototype.parseSid = function(sid) {
      var color, id, _ref;
      _ref = sid.split('-'), id = _ref[0], color = _ref[1];
      return {
        id: id,
        color: color
      };
    };

    JCPenneyProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          var url;
          url = "http://www.jcpenney.com/prod.jump?ppId=" + this.productSid.id;
          if (this.productSid.color) {
            url += "&selectedSKUId=" + this.productSid.color;
          }
          return url;
        }
      }
    };

    JCPenneyProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<meta property="og:title" content="([^"]*)/), 1)
      },
      price: {
        resource: 'productPage',
        scraper: PatternResourceScraper([
          [new RegExp(/<span class='gallery_page_price[^>]+([\s\S]*?)<\/span>/), 1], [new RegExp(/jcpPRODUCTPRESENTATIONSjcp = 'pp5003810419@\$(\S*)@1';/), 1], [new RegExp(/<span class='[^']*' itemprop="price">\s*<a href="[^"]*" class="[^"]*" style='[^']*'>\s*\$(\S*)\s*sale/), 1], [new RegExp(/<span class='[^']*' style="[^"]*" itemprop="price">\s*\$(\S*)\s*sale/), 1], [
            new RegExp(/<span class='gallery_page_price flt_wdt comparisonPrice'[^>]*>\s*\$([\s\S]*?)\s*sale\s*<\/span>/), 1, function(value) {
              return value.split(/\s+/).join(' ');
            }
          ]
        ])
      },
      image: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<meta property="og:image" content="([^"]*)/), 1)
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var code, col, colorMatches, colors, content, image, imageMatches, images, liMatches, lists, match, matches, name, options, originalPrice, overview, overviewMatches, promo, rating, ratingID, ratingURL, reviewCount, size, sizeMatches, sizes, switches, text, title, ulMatch, ulMatches, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n;
          switches = {
            images: true,
            overview: true,
            rating: true,
            ratingCount: true,
            originalPrice: true,
            promo: true,
            options: true,
            shipping: false
          };
          value = {};
          if (switches.overview) {
            overview = [];
            matches = this.resource.match(/<div id="longCopyCont"([\S\s]*?)<\/div>[\S\s]*?<\/div>/)[1] + this.resource.match(/<div id="longCopyCont"[\S\s]*?<\/div>([\S\s]*?)<\/div>/)[1];
            overviewMatches = matches.match(/<p([\S\s]*?)<\/p>/g);
            for (_i = 0, _len = overviewMatches.length; _i < _len; _i++) {
              match = overviewMatches[_i];
              text = match.match(/<p[^>]*>([\S\s]*?)<\/p>/);
              overview.push(text[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " "));
            }
            lists = {};
            ulMatches = matches.match(/<ul([\S\s]*?)<\/ul>/g);
            if (ulMatches) {
              for (_j = 0, _len1 = ulMatches.length; _j < _len1; _j++) {
                ulMatch = ulMatches[_j];
                liMatches = ulMatch.match(/<li([\S\s]*?)<\/li>/g);
                for (_k = 0, _len2 = liMatches.length; _k < _len2; _k++) {
                  match = liMatches[_k];
                  col = match.match(/(:)/);
                  if (col) {
                    title = match.match(/<li>([^:]+)/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ");
                    content = match.match(/:([^<]+)/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ");
                    lists[title] = content;
                  } else {
                    title = match.match(/<li>([^<]+)/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ");
                    lists[title] = null;
                  }
                }
              }
              overview.push(lists);
            }
            value.overview = overview;
          }
          if (switches.options) {
            options = [];
            matches = this.resource.match(/<div class="sku_detail">([\S\s]*?)<\/fieldset>/);
            sizeMatches = matches[1].match(/<li id="size"([\S\s]*?)<\/li>/g);
            if (sizeMatches) {
              sizes = {};
              for (_l = 0, _len3 = sizeMatches.length; _l < _len3; _l++) {
                match = sizeMatches[_l];
                code = match.match(/<a id='([^']+)/)[1];
                size = match.match(/<a[^>]+>([\S\s]*?)<\/a>/)[1];
                sizes[size] = code;
              }
              options.push(sizes);
            }
            colorMatches = matches[1].match(/<a class="swatch"([\S\s]*?)<\/a>/g);
            if (colorMatches) {
              colors = {};
              for (_m = 0, _len4 = colorMatches.length; _m < _len4; _m++) {
                match = colorMatches[_m];
                code = {};
                name = match.match(/alt="([^"]*)/)[1];
                code["image"] = "http://s7d9.scene7.com/is/image/JCPenney/" + match.match(/onmouseover="updateRender\('([^']*)/)[1] + "?wid=500&hei=500&fmt=jpg&op_usm=.4,.8,0,0&resmode=sharp2";
                code["swatch"] = match.match(/src="([^"]*)/)[1];
                code["number"] = match.match(/<a class="swatch" href='([^']*)/)[1];
                colors[name] = code;
              }
              options.push(colors);
            }
            value.options = options;
          }
          if (switches.rating) {
            rating = [];
            ratingID = this.resource.match(/reviewId:"([^"]*)/)[1];
            ratingURL = "http://jcpenney.ugc.bazaarvoice.com/1573-en_us/" + ratingID + "/reviews.djs?format=embeddedhtml";
            this.execBlock(function() {
              this.get(ratingURL, function(response) {
                match = response.match(/<span class=\\"BVRRNumber BVRRRatingNumber\\">([^<]*)/);
                if (match) {
                  rating.push(match[1]);
                }
                this.done(true);
                return this.value(value);
              });
              return null;
            });
            value.rating = rating;
          }
          if (switches.reviewCount) {
            reviewCount = [];
            ratingID = this.resource.match(/reviewId:"([^"]*)/)[1];
            ratingURL = "http://jcpenney.ugc.bazaarvoice.com/1573-en_us/" + ratingID + "/reviews.djs?format=embeddedhtml";
            this.execBlock(function() {
              this.get(ratingURL, function(response) {
                match = response.match(/<span class=\\"BVRRNumber\\">([^<]*)/);
                if (match) {
                  reviewCount.push(match[1]);
                }
                this.done(true);
                return this.value(value);
              });
              return null;
            });
            value.reviewCount = reviewCount;
          }
          if (switches.promo) {
            matches = this.resource.match(/<span id="promoDetails">([\S\s]*?)<\/span>/);
            if (matches) {
              promo = this.resource.match(/<span >([\S\s]*?)<\/span>|<span >([\S\s]*?)<\/span>/);
              value.promo = promo[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ");
            }
          }
          if (switches.originalPrice) {
            matches = this.resource.match(/var priceType='Sale';/);
            if (matches) {
              matches = this.resource.match(/<span class='pp_page_price([\S\s]*?)<\/span>/);
              originalPrice = matches[1].match(/\$([\S\s]*?)original/);
              value.originalPrice = originalPrice[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ");
            }
          }
          if (switches.images) {
            images = [];
            matches = this.resource.match(/var imageName = "([^"]*)/);
            imageMatches = matches[1].split(',');
            if (imageMatches) {
              for (_n = 0, _len5 = imageMatches.length; _n < _len5; _n++) {
                match = imageMatches[_n];
                image = "http://s7d9.scene7.com/is/image/JCPenney/" + match + "?wid=500&hei=500&fmt=jpg&op_usm=.4,.8,0,0&resmode=sharp2";
                images.push(image);
              }
              value.images = images;
            }
          }
          return this.value(value);
        })
      }
    };

    return JCPenneyProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=JCPenneyProductScraper.map
