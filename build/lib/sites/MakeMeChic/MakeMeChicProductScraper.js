// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'scraping/resourceScrapers/DeclarativeResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, DeclarativeResourceScraper, _) {
  var MakeMeChicProductScraper;
  return MakeMeChicProductScraper = (function(superClass) {
    extend(MakeMeChicProductScraper, superClass);

    function MakeMeChicProductScraper() {
      return MakeMeChicProductScraper.__super__.constructor.apply(this, arguments);
    }

    MakeMeChicProductScraper.prototype.parseSid = function(sid) {
      return {
        name: sid
      };
    };

    MakeMeChicProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return "http://www.makemechic.com/" + this.productSid.name + ".html";
        }
      }
    };

    MakeMeChicProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'title')
      },
      price: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'price')
      },
      image: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'image')
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var color, colorAbbreviation, colorId, fn, imageUrl, images, j, k, len, len1, match, more, obj, option, ref, ref1, ref2;
          more = this.declarativeScraper('scraper', 'more');
          imageUrl = /<meta property="og:image" content="([^"]*)/.exec(this.resource)[1];
          colorAbbreviation = imageUrl.match(/\/\w+-([a-z]+)[^\/]*\.jpg$/)[1];
          colorId = (ref = this.resource.match(new RegExp("<li class=\"color-swatch-85-(\\d*)\\s*\">\\s*<span[^>]*>[^<]*</span>\\s*<img class=\"image-base\" src=\"[^\"]*\/\\w+-" + colorAbbreviation + ".\\w+\""))) != null ? ref[1] : void 0;
          if (colorId) {
            ref1 = more.colors;
            for (j = 0, len = ref1.length; j < len; j++) {
              color = ref1[j];
              if (color.id === colorId) {
                more.color = color.name;
                break;
              }
            }
          }
          match = /var spConfig = new Product.Config\((.*?)\);/.exec(this.resource)[1];
          obj = JSON.parse(match);
          images = {};
          more.images = images;
          ref2 = obj.attributes[85].options;
          fn = (function(_this) {
            return function(option) {
              return _this.execBlock(function() {
                this.post("http://www.makemechic.com/cloudzoom/ajax/images/", _.map(option.products, function(i) {
                  return "products[]=" + i;
                }).join('&'), function(response) {
                  var imgs;
                  imgs = JSON.parse(response);
                  images[option.label] = _.map(imgs, function(img) {
                    return {
                      small: img.small,
                      big: img.big
                    };
                  });
                  this.value(more);
                  return this.done(true);
                });
                return null;
              });
            };
          })(this);
          for (k = 0, len1 = ref2.length; k < len1; k++) {
            option = ref2[k];
            fn(option);
          }
          return this.value(more);
        })
      }
    };

    return MakeMeChicProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=MakeMeChicProductScraper.js.map
