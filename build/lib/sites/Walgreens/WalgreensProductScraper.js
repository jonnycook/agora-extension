// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, _) {
  var WalgreensProductScraper;
  return WalgreensProductScraper = (function(superClass) {
    extend(WalgreensProductScraper, superClass);

    function WalgreensProductScraper() {
      return WalgreensProductScraper.__super__.constructor.apply(this, arguments);
    }

    WalgreensProductScraper.testProducts = ['6051381'];

    WalgreensProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return "http://www.walgreens.com/store/c/-/ID=prod" + this.productSid + "-product";
        }
      }
    };

    WalgreensProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<meta property="og:title" content='([^']*)/), 1)
      },
      price: {
        resource: 'productPage',
        scraper: PatternResourceScraper([[new RegExp(/<span id="vpdSinglePrice">\$([^<]*)/), 1], [new RegExp(/id='sale_amount' itemprop="price">\$([^<]*)/), 1], [new RegExp(/id='price_amount' itemprop="price">\$([^<]*)/), 1], [new RegExp(/id='sale_amount' itemprop="price">([^<]*)/), 1], [new RegExp(/id='sale_amount' itemprop="price">([^<]*)/), 1], [new RegExp(/id="txt24px">([^<]*)/), 1]])
      },
      image: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<meta property="og:image" content='http:\/\/www\.walgreens\.com\/\/pics\.drugstore\.com\/prodimg\/([^\/]*)/), 1).config({
          map: function(value) {
            return "http://pics.drugstore.com/prodimg/" + value + "/500.jpg";
          }
        })
      },
      rating: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var matches;
          matches = this.resource.match(/<span itemprop="ratingValue" style="display:none">([^<]*)/);
          if (matches) {
            return this.value(matches[1]);
          }
        })
      },
      ratingCount: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var matches;
          matches = this.resource.match(/<span itemprop="reviewCount"[^>]*>([^<]*)/);
          if (matches) {
            return this.value(matches[1]);
          }
        })
      },
      reviews: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var ratUrl, revs;
          ratUrl = "http://reviews.walgreens.com/2001/prod" + this.productSid + "/-/reviews.htm";
          revs = [];
          this.execBlock(function() {
            this.get(ratUrl, function(response) {
              var entry, i, isReview, len, rating, revHash, reviews;
              reviews = response.match(/<div id="BVRRDisplayContentReviewID([\S\s]*?)BVRRSSeparatorContentBodyBottom/g);
              if (reviews) {
                for (i = 0, len = reviews.length; i < len; i++) {
                  entry = reviews[i];
                  isReview = entry.match(/class="BVRRValue BVRRReviewTitle">([^<]*)/);
                  if (isReview) {
                    if (isReview[1].length !== 0) {
                      revHash = {};
                      revHash["author"] = entry.match(/class="BVRRNickname">([^<]+)/)[1];
                      revHash["title"] = entry.match(/class="BVRRValue BVRRReviewTitle">([^<]+)/)[1];
                      revHash["review"] = entry.match(/class="BVRRReviewText">([\S\s]*?)<\/span>/)[1];
                      rating = entry.match(/BVRRRatingNumber">([\S\s]*?)<\/span>/);
                      if (rating) {
                        if (rating[1].length !== 0) {
                          revHash["rating"] = rating[1];
                        }
                      }
                      revHash["time"] = entry.match(/BVRRReviewDate">([\S\s]*?)<\/span>/)[1];
                      revs.push(revHash);
                    }
                  }
                }
              }
              this.value(revs);
              return this.done(true);
            });
            return null;
          });
          return this.value(revs);
        })
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var altDescCheck, altDescUrl, author, authorBio, authorMatches, authorNames, bioMatch, bioMatches, content, count, desc, description, editorialReviews, erMatches, from, i, image, imageMatches, images, ingredients, isbn, item, j, k, l, len, len1, len2, len3, match, matches, name, overview, par, switches, uses, value, warnings;
          switches = {
            images: true,
            overview: true,
            description: true,
            ingredients: true,
            uses: true,
            warnings: true,
            originalPrice: true,
            shipping: false
          };
          value = {};
          if (switches.overview) {
            overview = [];
            matches = this.resource.match(/<strong>Overview:<\/strong>([\S\s]*?)<\/div>/);
            value.overview = matches[1];
          }
          if (switches.description) {
            description = [];
            altDescCheck = this.resource.match(/(<script type="text\/javascript" src="http:\/\/content.webcollage.net\/walgreens\/smart-button">)/);
            if (altDescCheck) {
              altDescUrl = "http://content.webcollage.net/walgreens/smart-button?ird=true&channel-product-id=prod" + this.productSid;
              this.execBlock(function() {
                this.get(altDescUrl, function(response) {
                  matches = response.match(/html: "([\S\s]*?)};/);
                  description.push(matches[1].replace(/\}+$/gm, '').replace(/\"+$/gm, '').replace(/\\"+/gm, '"').replace(/\\\/+/gm, '/'));
                  this.done(true);
                  return this.value(value);
                });
                return null;
              });
              value.description = description[0];
            } else {
              desc = this.resource.match(/<div class="description-list[^>]*>([\S\s]*?)<!-- EO-10598 description tab content ends here -->/);
              if (desc) {
                description.push("<div><div>" + desc[1]);
                value.description = description[0];
              }
            }
          }
          if (switches.ingredients) {
            ingredients = this.resource.match(/<div id="ingredients-content" class="tabContainer">([\S\s]*?)<\/noscript>/);
            if (ingredients) {
              value.ingredients = ingredients[1];
            }
          }
          if (switches.warnings) {
            warnings = this.resource.match(/<div id="warnings-content" class="tabContainer">([\S\s]*?)<div id="tab-ingredients"/);
            if (warnings) {
              value.warnings = warnings[1];
            }
          }
          if (switches.uses) {
            uses = this.resource.match(/<div id="uses-content" class="tabContainer">([\S\s]*?)<div id="shipping-content"/);
            if (uses) {
              value.uses = uses[1];
            }
          }
          if (switches.isbn) {
            matches = this.resource.match(/<div class="product-details([\S\s]*?)<\/section>/);
            isbn = matches[1].match(/<span>ISBN-13:<\/span>([\S\s]*?)<\/li>/);
            value.isbn = isbn[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ");
          }
          if (switches.author) {
            author = {};
            authorNames = [];
            matches = this.resource.match(/<ul class="contributors([\S\s]*?)<\/ul>/);
            authorMatches = matches[1].match(/<li([\S\s]*?)<\/li>/g);
            count = 0;
            for (i = 0, len = authorMatches.length; i < len; i++) {
              item = authorMatches[i];
              if (count > 0) {
                name = item.match(/<li([\S\s]*?)<\/li>/)[1];
                authorNames.push(name.replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " "));
              }
              count++;
            }
            author["names"] = authorNames;
            authorBio = [];
            bioMatch = this.resource.match(/<div class="basic-info([\S\s]*?)<\/section>/);
            bioMatches = bioMatch[1].match(/<p>([\S\s]*?)<\/p>/g);
            for (j = 0, len1 = bioMatches.length; j < len1; j++) {
              match = bioMatches[j];
              par = match.match(/<p>([\S\s]*?)<\/p>/)[1];
              authorBio.push(par);
            }
            author["bio"] = authorBio;
            value.author = author;
          }
          if (switches.editorialReviews) {
            editorialReviews = {};
            matches = this.resource.safeMatch(/<h3>Editorial Reviews<\/h3>([\S\s]*?)<\/div>/);
            erMatches = matches[1].match(/<article class="simple-html">([\S\s]*?)<\/article>/g);
            for (k = 0, len2 = erMatches.length; k < len2; k++) {
              match = erMatches[k];
              from = match.match(/<h5>([\S\s]*?)<\/h5>/)[1];
              content = match.match(/<\/h5>([\S\s]*?)<\/article>/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ").replace(/^<br \/>+|<br \/>+$/gm, '');
              editorialReviews[from] = content;
            }
            value.editorialReviews = editorialReviews;
          }
          if (switches.originalPrice) {
            matches = this.resource.match(/class="strike_thru[^>]+>\$([^<]+)/);
            if (matches) {
              value.originalPrice = matches[1];
            }
          }
          if (switches.images) {
            images = [];
            matches = this.resource.match(/<div class="view_thumb_image"([\S\s]*?)<\/div>/);
            imageMatches = matches[1].match(/href="javascript:changeImage\('([^']+)/g);
            for (l = 0, len3 = imageMatches.length; l < len3; l++) {
              match = imageMatches[l];
              image = match.match(/href="javascript:changeImage\('([^']+)/);
              images.push("http:" + image[1]);
            }
            value.images = images;
          }
          return this.value(value);
        })
      }
    };

    return WalgreensProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=WalgreensProductScraper.js.map
