// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, _) {
  var ReiProductScraper;
  return ReiProductScraper = (function(_super) {
    __extends(ReiProductScraper, _super);

    function ReiProductScraper() {
      return ReiProductScraper.__super__.constructor.apply(this, arguments);
    }

    ReiProductScraper.testProducts = ['868539'];

    ReiProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return "http://www.rei.com/product/" + this.productSid;
        }
      }
    };

    ReiProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<meta name="name" content="([^"]*)/), 1)
      },
      price: {
        resource: 'productPage',
        scraper: PatternResourceScraper([[new RegExp(/<li class="price" itemprop="price">[\s]*\$([^<]*)/), 1], [new RegExp(/<li class="salePrice price" itemprop="price">[\s]*\$([^<]*)/), 1]])
      },
      image: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<meta property="og:image" content="([^"]*)/), 1)
      },
      rating: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var matches;
          matches = this.resource.match(/recommendation_ratings="([^"]+)/);
          if (matches) {
            return this.value(matches[1]);
          }
        })
      },
      ratingCount: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var matches;
          matches = this.resource.match(/recommendation_count="([^"]+)/);
          if (matches) {
            return this.value(matches[1]);
          }
        })
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var content, editorialReviews, erMatches, from, image, imageMatches, images, match, matches, switches, value, _i, _j, _len, _len1;
          switches = {
            images: true,
            overview: true,
            details: true,
            specifications: true,
            rating: true,
            ratingCount: true,
            originalPrice: true,
            shipping: false
          };
          value = {};
          if (switches.overview) {
            matches = this.resource.match(/<h2 class="primaryProductDescription">([\S\s]*?)<\/h2>/);
            value.overview = matches[1];
          }
          if (switches.details) {
            matches = this.resource.match(/<div class="tabArea1">([\S\s]*?)<\/div>/);
            value.details = matches[1];
          }
          if (switches.specifications) {
            matches = this.resource.match(/<table id="spec_table"([\S\s]*?)<\/table>/);
            value.specifications = "<table" + matches[1] + "</table>";
          }
          if (switches.editorialReviews) {
            editorialReviews = {};
            matches = this.resource.safeMatch(/<h3>Editorial Reviews<\/h3>([\S\s]*?)<\/div>/);
            erMatches = matches[1].match(/<article class="simple-html">([\S\s]*?)<\/article>/g);
            for (_i = 0, _len = erMatches.length; _i < _len; _i++) {
              match = erMatches[_i];
              from = match.match(/<h5>([\S\s]*?)<\/h5>/)[1];
              content = match.match(/<\/h5>([\S\s]*?)<\/article>/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ").replace(/^<br \/>+|<br \/>+$/gm, '');
              editorialReviews[from] = content;
            }
            value.editorialReviews = editorialReviews;
          }
          if (switches.originalPrice) {
            matches = this.resource.match(/class="originalPrice">([\S\s]*?)<\//);
            if (matches) {
              matches = matches[1].match(/\$([\S\s]*)/);
              value.originalPrice = matches[1];
            }
          }
          if (switches.images) {
            images = [];
            imageMatches = this.resource.match(/hiresimg="([^"]+)/g);
            for (_j = 0, _len1 = imageMatches.length; _j < _len1; _j++) {
              match = imageMatches[_j];
              image = match.match(/hiresimg="([^"]+)/);
              images.push("http://www.rei.com" + image[1]);
            }
            value.images = images;
          }
          return this.value(value);
        })
      }
    };

    return ReiProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=ReiProductScraper.map
