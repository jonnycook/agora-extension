// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, _) {
  var FancyProductScraper;
  return FancyProductScraper = (function(superClass) {
    extend(FancyProductScraper, superClass);

    function FancyProductScraper() {
      return FancyProductScraper.__super__.constructor.apply(this, arguments);
    }

    FancyProductScraper.testProducts = ['405991157672181989'];

    FancyProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return "http://fancy.com/things/" + this.productSid;
        }
      }
    };

    FancyProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<meta property="fancy:name" content="([^"]*)/), 1)
      },
      price: {
        resource: 'productPage',
        scraper: PatternResourceScraper([[new RegExp(/<meta property="fancy:price" content="\$([^"]*)/), 1], [new RegExp(/<span id="itemprice" style="display:none">\$([^<]*)/), 1]])
      },
      image: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<meta property="og:image" content="([^"]*)/), 1)
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var content, i, image, imageMatches, images, j, k, len, len1, len2, match, matches, name, num, overviewMatches, quantity, select, switches, value;
          switches = {
            images: true,
            description: true,
            reacts: true,
            select: true,
            quantity: true,
            shipping: false
          };
          value = {};
          if (switches.description) {
            matches = this.resource.match(/<meta property="og:description" content="([^"]*)/);
            value.description = matches[1];
          }
          if (switches.select) {
            select = {};
            matches = this.resource.match(/<select name="option_id" id="option_id">([\S\s]*?)<\/select>/);
            overviewMatches = matches[1].match(/<option[^>]*>([^<]*)<\/option>/g);
            for (i = 0, len = overviewMatches.length; i < len; i++) {
              match = overviewMatches[i];
              name = match.match(/<option[^>]*>([^<]*)<\/option>/)[1];
              content = match.match(/value="([^"]*)/)[1];
              select[name] = content;
            }
            value.select = select;
          }
          if (switches.quantity) {
            quantity = {};
            matches = this.resource.match(/<select name="quantity" id="quantity">([\S\s]*?)<\/select>/);
            overviewMatches = matches[1].match(/<option[^>]*>([^<]*)<\/option>/g);
            for (j = 0, len1 = overviewMatches.length; j < len1; j++) {
              match = overviewMatches[j];
              name = match.match(/<option[^>]*>([^<]*)<\/option>/)[1];
              content = match.match(/value="([^"]*)/)[1];
              quantity[name] = content;
            }
            value.quantity = quantity;
          }
          if (switches.reacts) {
            matches = this.resource.match(/reacts="([^"]+)/);
            if (matches) {
              num = parseInt(matches[1], 10);
              value.reacts = num + 1;
            }
          }
          if (switches.images) {
            images = [];
            matches = this.resource.match(/<ul class="big">([\S\s]*?)<\/ul>/);
            imageMatches = matches[1].match(/background-image:url\(([^\)]+)/g);
            for (k = 0, len2 = imageMatches.length; k < len2; k++) {
              match = imageMatches[k];
              image = match.match(/background-image:url\(([^\)]+)/);
              images.push(image[1]);
            }
            value.images = images;
          }
          return this.value(value);
        })
      }
    };

    return FancyProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=FancyProductScraper.js.map
