// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['scraping/SiteProduct', 'ext/AmazonProductWidgets'], function(SiteProduct, AmazonProductWidgets) {
  var AmazonProduct;
  return AmazonProduct = (function(_super) {
    __extends(AmazonProduct, _super);

    function AmazonProduct() {
      return AmazonProduct.__super__.constructor.apply(this, arguments);
    }

    AmazonProduct.prototype.matchFeature = function(cb, predicate) {
      return this.product["with"]('more', (function(_this) {
        return function(more) {
          var feature, value, _i, _len, _ref;
          if (more.features) {
            _ref = more.features;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              feature = _ref[_i];
              value = predicate(feature);
              if (value) {
                cb(value);
                return;
              }
            }
          }
          return cb();
        };
      })(this));
    };

    AmazonProduct.prototype.widgets = AmazonProductWidgets;

    AmazonProduct.prototype.images = function(cb) {
      return this.product["with"]('more', (function(_this) {
        return function(more) {
          var color, colorImages, image, images, _i, _len, _ref, _ref1;
          images = {};
          _ref = more.images;
          for (color in _ref) {
            colorImages = _ref[color];
            images[color] = [];
            for (_i = 0, _len = colorImages.length; _i < _len; _i++) {
              image = colorImages[_i];
              images[color].push({
                small: image.large.match('^(.*?)\.jpg$')[1] + '._SL100_.jpg',
                medium: image.large,
                large: (_ref1 = image.hiRes) != null ? _ref1 : image.large,
                larger: image.hiRes ? image.hiRes.replace(/(\.[^.]*)(\.jpg)$/, '._SL1000_$2') : image.large,
                full: image.hiRes ? image.hiRes.replace(/(\.[^.]*)(\.jpg)$/, '$2') : image.large
              });
            }
          }
          return cb(images, more.currentStyle);
        };
      })(this));
    };

    AmazonProduct.prototype.reviews = function(cb) {
      return this.product["with"]('reviews', cb);
    };

    AmazonProduct.prototype.type = function(cb) {
      var map;
      map = {
        'Nursing & Maternity Bras': 'brassiere'
      };
      return this.product["with"]('more', (function(_this) {
        return function(more) {
          return cb(map[more.category[more.category.length - 1]]);
        };
      })(this));
    };

    AmazonProduct.prototype.types = {
      garment: {
        'Wash Instructions': function(cb) {
          return this.product["with"]('more', (function(_this) {
            return function(more) {
              var feature, _i, _len, _ref;
              if (more.features) {
                _ref = more.features;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  feature = _ref[_i];
                  if (feature.toLowerCase().match('wash') || feature.toLowerCase().match('dry clean')) {
                    cb(feature);
                    return;
                  }
                }
              }
              return cb(void 0);
            };
          })(this));
        },
        'Origin': function(cb) {
          return this.product["with"]('more', (function(_this) {
            return function(more) {
              var feature, _i, _len, _ref, _ref1;
              if (more.features) {
                _ref = more.features;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  feature = _ref[_i];
                  if (feature.toLowerCase().match('china|made in|imported')) {
                    cb(feature);
                    return;
                  }
                }
              }
              return cb((_ref1 = more.details) != null ? _ref1.Origin : void 0);
            };
          })(this));
        },
        'Materials': function(cb) {
          return this.product["with"]('more', (function(_this) {
            return function(more) {
              var highest, highestIndex, i, item, matches, materialSample, _i, _len, _ref;
              materialSample = 'polyester|cotton|polyamide|elastane|nylon|spandex|rayon|Lycra&reg;|spandex|viscose|recycled|polyester|linen|Tactel&reg;|nylon|acrylic|down|feather|polyurethane|cashmere|corduroy|denim|angora|wool|satin|taffeta|leather|twill|acetate|lycra|lyocell|tweed|canvas|ripstop|sheepskin|silk|velvet|chiffon|jersey|suede|velour|vinyl|tricot|fleece|modal|microfiber|mesh';
              highest = 0;
              highestIndex = -1;
              if (more.features) {
                _ref = more.features;
                for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
                  item = _ref[i];
                  matches = item.toLowerCase().match(materialSample, 'g');
                  if (matches) {
                    if (matches.length > highest) {
                      highestIndex = i;
                      highest = matches.index;
                    }
                  }
                }
                if (highestIndex !== -1) {
                  return cb(more.features[highestIndex]);
                } else {
                  return cb(void 0);
                }
              } else {
                return cb(void 0);
              }
            };
          })(this));
        }
      },
      trousers: {
        'Closure': function(cb) {
          return this.product["with"]('more', (function(_this) {
            return function(more) {
              var feature, _i, _len, _ref;
              if (more.features) {
                _ref = more.features;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  feature = _ref[_i];
                  if (feature.toLowerCase().match('closure')) {
                    cb(feature);
                    return;
                  }
                }
              }
              return cb();
            };
          })(this));
        }
      },
      brassiere: {
        'Closure': function(cb) {
          return this.product["with"]('more', (function(_this) {
            return function(more) {
              var feature, _i, _len, _ref;
              if (more.feature) {
                _ref = more.features;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  feature = _ref[_i];
                  if (feature.toLowerCase().match('closure')) {
                    cb(feature);
                    return;
                  }
                }
              }
              return cb();
            };
          })(this));
        },
        'Straps': function(cb) {
          return this.product["with"]('more', (function(_this) {
            return function(more) {
              var feature, _i, _len, _ref;
              if (more.features) {
                _ref = more.features;
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  feature = _ref[_i];
                  if (feature.toLowerCase().match('straps')) {
                    cb(feature);
                    return;
                  }
                }
              }
              return cb();
            };
          })(this));
        }
      },
      'video card': {
        'Core Clock': function(cb) {
          return this.matchFeature(cb, function(feature) {
            var _ref;
            return (_ref = feature.match(/^Core Clock: (.*)$/)) != null ? _ref[1] : void 0;
          });
        },
        'Boost Clock': function(cb) {
          return this.matchFeature(cb, function(feature) {
            var _ref;
            return (_ref = feature.match(/^Boost Clock: (.*)$/)) != null ? _ref[1] : void 0;
          });
        },
        'GPU': function(cb) {
          return this.matchFeature(cb, function(feature) {
            var _ref;
            return (_ref = feature.match(/^Chipset: (.*)$/)) != null ? _ref[1] : void 0;
          });
        },
        'Interface': function(cb) {
          return this.matchFeature(cb, function(feature) {
            if (feature.toLowerCase().match('pci express')) {
              return feature;
            }
          });
        }
      }
    };

    return AmazonProduct;

  })(SiteProduct);
});

//# sourceMappingURL=AmazonProduct.map
