// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/DeclarativeResourceScraper', 'underscore', 'ext/AmazonProductScraper'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, DeclarativeResourceScraper, _, AmazonProductScraperExt) {
  var AmazonProductScraper;
  return AmazonProductScraper = (function(superClass) {
    extend(AmazonProductScraper, superClass);

    function AmazonProductScraper() {
      return AmazonProductScraper.__super__.constructor.apply(this, arguments);
    }

    AmazonProductScraper.productSid = function(url, cb) {};

    AmazonProductScraper.testProducts = ['B00C66C950', 'B00EIRFYS4', 'B00GK9HH4C'];

    AmazonProductScraper.testing = {
      skipTest: ['more.reviews']
    };

    AmazonProductScraper.prototype.version = 5;

    AmazonProductScraper.prototype.resources = {
      offerListing: {
        url: function() {
          return "http://www.amazon.com/gp/offer-listing/" + this.productSid + "/ref=olp_sort_p?ie=UTF8&shipPromoFilter=0&sort=price&me=&seller=&condition=new";
        }
      },
      offerListingPricePlusShipping: {
        url: function() {
          return "http://www.amazon.com/gp/offer-listing/" + this.productSid + "/ref=olp_sort_p?ie=UTF8&shipPromoFilter=0&sort=sip&me=&seller=&condition=new";
        }
      },
      productPage: {
        url: function() {
          return "http://www.amazon.com/gp/product/" + this.productSid + "/?psc=1";
        }
      }
    };

    AmazonProductScraper.prototype.properties = {
      rating: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'rating')
      },
      ratingCount: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'ratingCount')
      },
      title: {
        resource: 'offerListing',
        scraper: ScriptedResourceScraper(function() {
          return this["try"]({
            1: function() {
              var matches;
              matches = this.resource.match(/<span id="btAsinTitle">([^<]*)<\/span>/);
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            2: function() {
              var matches;
              matches = this.resource.match(/<h1 class="producttitle\s*">\s*([\s\S]*?)\s*?<\/h1>/);
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            3: function() {
              var matches;
              matches = this.resource.match(/<h1 class='a-spacing-none'>\s*([^<]*?)<\h1/);
              if (matches) {
                this.value(matches[1].trim().replace(/\s+/g, ' '));
                return true;
              } else {
                return false;
              }
            },
            4: function() {
              var matches;
              matches = this.resource.match(/New offers for\s*<\/span>\s*<\/div>\s*(.*?)<\/h1>/);
              if (matches) {
                this.value(matches[1].trim().replace(/\s+/g, ' '));
                return true;
              } else {
                return false;
              }
            }
          });
        })
      },
      price: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          return this["try"]({
            buyNewPrice: function() {
              var matches;
              matches = this.resource.match(/<span class="bb_price">\s*\$([^<])\s*</);
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            priceLarge: function() {
              var matches;
              matches = this.resource.match(/class="priceLarge">\$([^<]*)</);
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            wirelessPriceFromPrice: function() {
              var matches;
              matches = this.resource.match(/id="wirelessPriceFromPrice"[^>]*>\$([^<]*)</);
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            1: function() {
              var matches;
              matches = this.resource.match('<span class="a-color-price a-size-large">\\$([^<]*)</span>');
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            2: function() {
              var matches;
              matches = this.resource.match('<span id="priceblock_ourprice" class="a-size-medium a-color-price">\\$([^<]*)</span>');
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            3: function() {
              var matches;
              matches = this.resource.match('<span class="a-size-medium a-color-price offer-price a-text-normal">\\$([^<]*)</span>');
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            4: function() {
              var matches;
              matches = this.resource.match('<span id="current-price" style="display: inline">&#36;([^<]*)</span>');
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            5: function() {
              var matches;
              matches = this.resource.match(/<span id="priceblock_saleprice" class="a-size-medium a-color-price">\$([^<]*)<\/span>/);
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            6: function() {
              var matches;
              matches = this.resource.safeMatch(/<span id="actualPriceValue"><b class="priceLarge">\$([^<]*)<\/b>/);
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            }
          });
        })
      },
      image: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          return this["try"]({
            1: function() {
              var image, matches;
              matches = this.resource.match(/thumb_0_inner[\S\s]*?(http:\/\/ecx.images-amazon.com\/.*?\.jpg)/);
              if (matches) {
                image = matches[1];
                image = image.substr(0, image.length - 5) + '0_.jpg';
                this.value(image);
                return true;
              } else {
                return false;
              }
            },
            2: function() {
              var matches;
              matches = this.resource.match('<img.*?(http[^"]+)" id="prodImage"');
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            3: function() {
              var matches;
              matches = this.resource.match('id="main-image" src="http([^"]*)"');
              if (matches) {
                this.value('http' + matches[1]);
                return true;
              } else {
                return false;
              }
            },
            4: function() {
              var matches;
              matches = this.resource.match('src="([^"]+)"\\s*id="original-main-image"');
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            5: function() {
              var matches;
              matches = this.resource.match('var imageHashMain = \\["([^"]*)"');
              if (matches) {
                this.value(matches[1]);
                return true;
              } else {
                return false;
              }
            },
            6: function() {
              var image, matches;
              matches = this.resource.match('src="([^"]+)" id="prodImage"');
              if (matches) {
                image = matches[1];
                image = image.replace(/\d+(_\.\w+)^/, '300$1');
                this.value(image);
                return true;
              } else {
                return false;
              }
            },
            7: function() {
              var image, matches;
              matches = this.resource.match('class="imgTagWrapper">\\s*<img src=\'([^\']*)');
              if (matches) {
                image = matches[1];
                this.value(image);
                return true;
              } else {
                return false;
              }
            },
            8: function() {
              var image, matches;
              matches = this.resource.match('<img alt="" src="[^"]*" data-old-hires="([^"]+)"');
              if (matches) {
                image = matches[1].replace(/^(http:\/\/ecx\.images-amazon\.com\/images\/.\/[^.]*\._)[^_]*(_\.jpg)$/, '$1UX500$2');
                this.value(image);
                return true;
              } else {
                return false;
              }
            },
            9: function() {
              var image, matches;
              matches = this.resource.match(/data-a-dynamic-image="\{&quot;([^&]*)/);
              if (matches) {
                image = matches[1];
                this.value(image);
                return true;
              } else {
                return false;
              }
            },
            10: function() {
              var image, matches;
              matches = this.resource.match('<img id="imgBlkFront" src="(http://ecx\.images-amazon\.com/images/I/[^.]*)');
              if (matches) {
                image = matches[1] + '.jpg';
                this.value(image);
                return true;
              } else {
                return false;
              }
            },
            11: function() {
              var image, matches;
              matches = this.resource.match(/<div id="imgTagWrapperId" class="imgTagWrapper">\s*<img alt="" src="([^"]*)/);
              if (matches) {
                image = matches[1] + '.jpg';
                this.value(image);
                return true;
              } else {
                return false;
              }
            },
            12: function() {
              var image, matches;
              matches = this.resource.match(/<td id="fbt_x_img">\s*<img src="(http:\/\/ecx\.images-amazon\.com\/images\/I\/[^.]*)/);
              if (matches) {
                image = matches[1] + '.jpg';
                this.value(image);
                return true;
              } else {
                return false;
              }
            }
          });
        })
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var detailMatches, features, i, j, len, len1, match, matches, more, ref, ref1, ref2, ref3, selectedVarations, switches, variationsMatch;
          switches = {
            images: true,
            features: true,
            details: true,
            description: true,
            category: true
          };
          more = {};
          if (switches.images) {
            matches = this.resource.match(/data\["colorImages"\] = ([^;]*);/);
            if (matches) {
              if (matches[1] === '{}') {
                matches = this.resource.match(/var data = \{\s*'colorImages': \{ 'initial': ([\S\s]*?)\},\s*'colorToAsin':/);
                more.images = {
                  initial: JSON.parse(matches[1])
                };
                more.currentStyle = 'initial';
              } else {
                more.images = JSON.parse(matches[1]);
                more.currentStyle = this.resource.safeMatch('data\\["landingAsinColor"\\] = \'([^\']*)\'')[1];
              }
            } else {
              matches = this.resource.match(/var def = colorImages \? colorImages\[data\.defaultColor\] : \[\];\s*colorImages = ([^;]*);/);
              if (matches) {
                more.images = JSON.parse(matches[1]);
                more.currentStyle = (ref = this.resource.match(/selected_variations\["color_name"\]='([^']*)';/)) != null ? ref[1] : void 0;
              }
            }
            if (!more.currentStyle) {
              variationsMatch = (ref1 = this.resource.match(/<table class="variations"([\S\s]*?)<\/table>/)) != null ? ref1[1] : void 0;
              if (variationsMatch) {
                selectedVarations = this.matchAll(variationsMatch, /<div id=\S* class="variationSelected">\s*<b class="variationDefault">[^<]*<\/b>\s*<b class="variationLabel">([^<]*)<\/b>/, 1);
                more.currentStyle = selectedVarations.join(' ');
              }
            }
          }
          if (switches.features) {
            matches = (ref2 = this.resource.match(/<div id="feature-bullets"[^>]*>([\S\s]*?)<\/div>\s*<\/div>/)) != null ? ref2[1] : void 0;
            if (matches) {
              matches = this.matchAll(matches, /<li><span[^>]*>([\S\s]*?)<\/span>/);
              features = [];
              for (i = 0, len = matches.length; i < len; i++) {
                match = matches[i];
                features.push(match[1]);
              }
              more.features = features;
            }
          }
          if (switches.details) {
            matches = this.resource.match(/<div id="detailBullets_feature_div">([\S\s]*?)<\/ul>/);
            if (matches) {
              matches = this.matchAll(matches[1], /<li><span class="a-list-item">([\S\s]*?)<\/span><\/li>/);
              more.details = {};
              for (j = 0, len1 = matches.length; j < len1; j++) {
                match = matches[j];
                detailMatches = match[1].safeMatch(/<span class="a-text-bold">([^:]*):\s*<\/span>\s*<span>([\S\s]*?)<\/span>/);
                more.details[detailMatches[1]] = detailMatches[2];
              }
            }
          }
          if (switches.description) {
            more.description = (ref3 = this.resource.match(/<div id="productDescription" class="a-section a-spacing-small">\s*([\S\s]*?)\s*<\/div>/)) != null ? ref3[1] : void 0;
          }
          if (switches.category) {
            matches = this.resource.match(/<h2 class="a-spacing-mini">Look for Similar Items by Category<\/h2>\s*<p>([\S\s]*?)<\/p>/);
            if (matches) {
              matches = this.matchAll(matches[1], /<a class="a-link-normal" href="[^"]*">([^<]*)<\/a>/);
              more.category = _.map(matches, function(o) {
                return o[1];
              });
            }
          }
          AmazonProductScraperExt.more.call(this, switches, more);
          return this.value(more);
        })
      },
      reviews: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var __, amazonVerifiedPurchase, authorName, authorUrl, badgeMatch, badgeMatches, badges, commentsCount, commentsUrl, count, helpfulCount, helpfulTotal, i, j, k, len, len1, len2, matches, rating, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, review, reviewMatch, reviewMatches, reviews, reviewsUrl, time, title, url;
          reviews = [];
          reviewsUrl = null;
          count = 0;
          matches = this.resource.match(/<div id='revMHRL' class='mb30'>([\S\s]*?)<div id="revF" style="margin: 0 0 30px 25px;">/);
          if (matches) {
            reviewMatches = this.matchAll(matches[1], /<div id="rev-[^-]*-[^>]*>([\S\s]*?)<\/div>  <\/div><\/div>/);
            for (i = 0, len = reviewMatches.length; i < len; i++) {
              ref = reviewMatches[i], __ = ref[0], reviewMatch = ref[1];
              rating = parseInt(reviewMatch.match(/<span>(.*?) out of 5 stars<\/span>/)[1]);
              time = reviewMatch.match(/<span class="inlineblock txtsmall">([^<]*)/)[1];
              ref1 = reviewMatch.match(/<a href="([^"]*)" class="txtlarge gl3 gr4 reviewTitle valignMiddle"><strong>([^<]*)/), __ = ref1[0], url = ref1[1], title = ref1[2];
              review = reviewMatch.match(/<div class="drkgry">\s*([\S\s]*?)<\/div>/)[1].trim();
              review = review.replace('display:none', '');
              ref2 = reviewMatch.match(/<a href="([^"]*?)" class="noTextDecoration">(?:(\d+) )?Comments?<\/a>/), __ = ref2[0], commentsUrl = ref2[1], commentsCount = ref2[2];
              ref4 = (ref3 = reviewMatch.match(/<div class="gry txtsmall hlp">(\d+) of (\d+) people found the following review helpful<\/div>/)) != null ? ref3 : [], __ = ref4[0], helpfulCount = ref4[1], helpfulTotal = ref4[2];
              amazonVerifiedPurchase = reviewMatch.match(/<span class="orange strong avp">Amazon Verified Purchase<\/span>/) ? true : false;
              ref5 = reviewMatch.match(/<span class="gry">By<\/span>\s*<a href="([^"]*)" class="noTextDecoration">([^<]*)/), __ = ref5[0], authorUrl = ref5[1], authorName = ref5[2];
              badgeMatches = this.matchAll(reviewMatch, /<span class='c7yBadge[^']*'>([^<]*)<\/span>/);
              badges = [];
              for (j = 0, len1 = badgeMatches.length; j < len1; j++) {
                badgeMatch = badgeMatches[j];
                badges.push(badgeMatch[1]);
              }
              reviews.push({
                rating: rating,
                url: url,
                title: title,
                time: time,
                review: review,
                author: {
                  url: "http://www.amazon.com" + authorUrl,
                  name: authorName,
                  badges: badges
                },
                helpfulCount: helpfulCount,
                helpfulTotal: helpfulTotal,
                amazonVerifiedPurchase: amazonVerifiedPurchase,
                comments: {
                  url: commentsUrl,
                  count: commentsCount != null ? commentsCount : 0
                }
              });
            }
            ref6 = this.resource.match(/<a id="seeAllReviewsUrl" href="([^"]*)" class="txtlarge noTextDecoration">\s*<strong>\s*See all ([\d,]+) customer reviews \(newest first\)/), __ = ref6[0], reviewsUrl = ref6[1], count = ref6[2];
          } else {
            matches = this.resource.match(/<div id="revMHRL" class="a-section">([\S\s]*?)<div id="revF" class="a-section">/);
            if (matches) {
              reviewMatches = this.matchAll(matches[1], /<div id="rev-[^-]*-[^>]*>([\S\s]*?)Was this review helpful to you?/);
              for (k = 0, len2 = reviewMatches.length; k < len2; k++) {
                ref7 = reviewMatches[k], __ = ref7[0], reviewMatch = ref7[1];
                rating = parseInt(reviewMatch.match(/title="(.*?) out of 5 stars"/)[1]);
                matches = reviewMatch.match(/<span class="a-color-secondary"> on ([^<]*)/);
                time = matches ? matches[1] : reviewMatch.match(/<\/span>\s*on\s*([^<]*)<\/span>/)[1];
                ref8 = reviewMatch.match(/<a class="a-link-normal a-text-normal a-color-base" href="([^"]*)"><span class="a-size-base a-text-bold">([^<]*)/), __ = ref8[0], url = ref8[1], title = ref8[2];
                review = reviewMatch.match(/<div class="a-section">([\S\s]*?)<\/div>/)[1].trim();
                ref9 = reviewMatch.match(/<a class="a-link-normal comment-link" title="(\d*)" href="([^"]*)">/), __ = ref9[0], commentsCount = ref9[1], commentsUrl = ref9[2];
                ref11 = (ref10 = reviewMatch.match(/<span class="a-size-small a-color-secondary">(\d*) of (\d*) people found the following review helpful<\/span>/)) != null ? ref10 : [], __ = ref11[0], helpfulCount = ref11[1], helpfulTotal = ref11[2];
                amazonVerifiedPurchase = reviewMatch.match(/<span class="a-size-mini a-color-state a-text-bold">\s*Amazon Verified Purchase\s*<\/span>/) ? true : false;
                authorUrl = authorName = null;
                matches = reviewMatch.match(/<span class="a-color-secondary">\s*By\s*<\/span>\s*<a href="([^"]*)" class="noTextDecoration">([^<]*)<\/a>/);
                if (matches) {
                  __ = matches[0], authorUrl = matches[1], authorName = matches[2];
                } else {
                  authorName = 'A Customer';
                }
                reviews.push({
                  rating: rating,
                  url: url,
                  title: title,
                  time: time,
                  review: review,
                  author: {
                    url: authorUrl ? "http://www.amazon.com" + authorUrl : void 0,
                    name: authorName
                  },
                  helpfulCount: helpfulCount,
                  helpfulTotal: helpfulTotal,
                  amazonVerifiedPurchase: amazonVerifiedPurchase,
                  comments: {
                    url: commentsUrl,
                    count: commentsCount != null ? commentsCount : 0
                  }
                });
              }
              matches = this.resource.match(/<a href="([^"]*)">([\d,]*) customer reviews<\/a>/);
              if (matches) {
                reviewsUrl = matches[1];
                count = matches[2];
              } else {
                matches = this.resource.match(/<a class="a-link-emphasis a-text-bold" href="([^"]*)">\s*See all ([\d,]*) customer reviews \(newest first\)\s*<\/a>/);
                if (matches) {
                  reviewsUrl = matches[1];
                  count = matches[2];
                } else {
                  matches = this.resource.match(/<a class="a-link-emphasis a-nowrap" href="([^"]*)">See the customer review<\/a>/);
                  if (matches) {
                    count = 1;
                    reviewsUrl = matches[1];
                  } else {
                    matches = this.resource.match(/<a class="a-link-emphasis a-nowrap" href="([^"]*)">See both customer reviews \(newest first\)<\/a>/);
                    if (matches) {
                      count = 2;
                      reviewsUrl = matches[1];
                    }
                  }
                }
              }
            }
          }
          return this.value({
            reviews: reviews,
            url: reviewsUrl,
            count: count
          });
        })
      }
    };

    return AmazonProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=AmazonProductScraper.js.map
