// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'scraping/resourceScrapers/DeclarativeResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, DeclarativeResourceScraper, _) {
  var SixPMProductScraper;
  return SixPMProductScraper = (function(_super) {
    __extends(SixPMProductScraper, _super);

    function SixPMProductScraper() {
      return SixPMProductScraper.__super__.constructor.apply(this, arguments);
    }

    SixPMProductScraper.productSid = function(background, url, cb) {
      return background.httpRequest(url, {
        cb: function(response) {
          var colorId, matches, sku;
          matches = /<span id="sku" class="sku id">SKU: #(\d*)<\/span>/.exec(response);
          if (matches) {
            sku = matches[1];
            matches = /<input type="hidden" id="color" value="(\d+)" name="colorId" \/>/.exec(response);
            if (matches) {
              colorId = matches[1];
            } else {
              matches = /<select id="color" name="colorId" class="btn secondary">([\S\s]+)<\/select>/.exec(response);
              matches = /<option value="(\d+)" selected="selected">[^<]+<\/option>/.exec(matches[1]);
              colorId = matches[1];
            }
            return cb("" + sku + "-" + colorId);
          } else {
            return cb();
          }
        }
      });
    };

    SixPMProductScraper.prototype.parseSid = function(sid) {
      var color, id, _ref;
      _ref = sid.split('-'), id = _ref[0], color = _ref[1];
      return {
        id: id,
        color: color
      };
    };

    SixPMProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return "http://www.6pm.com/viewProduct.do?productId=" + this.productSid.id + "&colorId=" + this.productSid.color;
        }
      }
    };

    SixPMProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'title')
      },
      price: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'price')
      },
      image: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'image')
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var colorId, colorName, colorToStyle, currentColorId, id, m, match, matches, more, style, styleId, styles, type, url, value, _base, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;
          more = this.declarativeScraper('scraper', 'more');
          value = more;
          styles = {};
          colorToStyle = {};
          currentColorId = (_ref = this.resource.match(/<option value="(\d*)" selected="selected">/)) != null ? _ref[1] : void 0;
          if (!currentColorId) {
            currentColorId = this.resource.match(/<input type="hidden" id="color" value="(\d*)" name="colorId/)[1];
          }
          matches = this.resource.match(/var styleIds = \{([^}]*)/);
          matches = matches[1].match(/'([^']*)':\s*(\d*)/g);
          for (_i = 0, _len = matches.length; _i < _len; _i++) {
            match = matches[_i];
            m = match.match(/'([^']*)':\s*(\d*)/);
            colorId = m[1];
            styleId = m[2];
            styles[styleId] = {
              id: styleId,
              color: {
                id: colorId
              },
              images: {}
            };
            colorToStyle[colorId] = styleId;
          }
          value.currentStyle = colorToStyle[currentColorId];
          matches = this.matchAll(this.resource, /<img src="([^"]*)" class="gae-click\*Product-Page\*PrImage\*Swatch" \/>/);
          for (_j = 0, _len1 = matches.length; _j < _len1; _j++) {
            match = matches[_j];
            url = match[1];
            styleId = /http:\/\/[^.]*.zassets.com\/images\/[a-z]*\/\d\/.*?\/(\d*)-[a-z]-\w*\.jpg/.exec(url)[1];
            styles[styleId].thumbUrl = url;
          }
          matches = this.resource.match(/var colorNames = \{([^}]*)/);
          matches = matches[1].match(/'([^']*)':"([^"]*)"/g);
          for (_k = 0, _len2 = matches.length; _k < _len2; _k++) {
            match = matches[_k];
            m = match.match(/'([^']*)':"([^"]*)"/);
            colorId = m[1];
            colorName = m[2];
            styleId = colorToStyle[colorId];
            styles[styleId].color.name = colorName;
          }
          matches = this.resource.match(/pImgs\[(\d+)\]\['([^']*)'\]\['([^']*)'\] = (?:'([^']*)'|\{ filename: '([^']*)', width: '\d*', height: '\d*' \};)/g);
          for (_l = 0, _len3 = matches.length; _l < _len3; _l++) {
            match = matches[_l];
            m = match.match(/pImgs\[(\d+)\]\['([^']*)'\]\['([^']*)'\] = (?:'([^']*)'|\{ filename: '([^']*)', width: '\d*', height: '\d*' \};)/);
            style = m[1];
            type = m[2];
            id = m[3];
            url = (_ref1 = m[4]) != null ? _ref1 : m[5];
            if ((_base = styles[style].images)[id] == null) {
              _base[id] = {};
            }
            styles[style].images[id][type] = url;
          }
          value.styles = styles;
          return this.value(more);
        })
      }
    };

    return SixPMProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=SixPMProductScraper.map
