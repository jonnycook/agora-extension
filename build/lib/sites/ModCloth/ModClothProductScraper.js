// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'scraping/resourceScrapers/DeclarativeResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, DeclarativeResourceScraper, _) {
  var ModClothProductScraper;
  return ModClothProductScraper = (function(superClass) {
    extend(ModClothProductScraper, superClass);

    function ModClothProductScraper() {
      return ModClothProductScraper.__super__.constructor.apply(this, arguments);
    }

    ModClothProductScraper.prototype.parseSid = function(sid) {
      var name, ref, sku;
      ref = sid.split(':'), sku = ref[0], name = ref[1];
      return {
        sku: sku,
        name: name
      };
    };

    ModClothProductScraper.prototype.resources = {
      mainProductPage: {
        url: function() {
          return "http://www.modcloth.com/shop/-/" + this.productSid.name;
        }
      },
      productPage: {
        url: function() {
          return "http://www.modcloth.com/storefront/products/" + this.productSid.sku + "/product_quickview";
        }
      },
      reviewsPage: {
        url: function() {
          return "http://www.modcloth.com/storefront/reviews/view_more/" + this.productSid.sku + "?place=0";
        }
      }
    };

    ModClothProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'title')
      },
      price: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'price')
      },
      image: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'image')
      },
      ratingCount: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'ratingCount')
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var more;
          more = this.declarativeScraper('scraper', 'more');
          this.execBlock(function() {
            this.getResource('mainProductPage', function(resource) {
              var images;
              images = this.declarativeScraper('images', 'images', resource);
              more.images = images;
              this.value(more);
              return this.done(true);
            });
            return null;
          });
          return this.value(more);
        })
      },
      rating: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var rating, ref;
          rating = (ref = this.resource.match(/<li class='current-rating' style='width:(\d*)px'>/)) != null ? ref[1] : void 0;
          if (rating != null) {
            return this.value(rating / 20);
          }
        })
      },
      reviews: {
        resource: 'reviewsPage',
        scraper: ScriptedResourceScraper(function() {
          var author, comment, date, html, rating, reviewMatch, reviewMatches, reviews;
          html = JSON.parse(this.resource).html;
          reviewMatches = this.matchAll(html, /<div class="review_wrapper user-review">([\S\s]*?<div class="review_datetime">[\S\s]*?<)/, 1);
          reviews = (function() {
            var i, len, results;
            results = [];
            for (i = 0, len = reviewMatches.length; i < len; i++) {
              reviewMatch = reviewMatches[i];
              comment = reviewMatch.match(/<div class="review_comment">\s*([\S\s]*?)\s*<\/div>/)[1];
              author = reviewMatch.match(/<div class="review_info_name">\s*([\S\s]*?)\s*</)[1];
              date = reviewMatch.match(/<div class="review_datetime">\s*([\S\s]*?)\s*</)[1];
              rating = reviewMatch.match(/<div class='is-(\d*)-star/)[1];
              results.push({
                comment: comment,
                author: author,
                date: date,
                rating: rating
              });
            }
            return results;
          })();
          return this.value(reviews);
        })
      }
    };

    return ModClothProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=ModClothProductScraper.js.map
