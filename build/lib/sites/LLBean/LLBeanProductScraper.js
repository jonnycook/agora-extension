// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'scraping/resourceScrapers/DeclarativeResourceScraper', 'util', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, DeclarativeResourceScraper, util, _) {
  var LLBeanProductScraper;
  return LLBeanProductScraper = (function(superClass) {
    extend(LLBeanProductScraper, superClass);

    function LLBeanProductScraper() {
      return LLBeanProductScraper.__super__.constructor.apply(this, arguments);
    }

    LLBeanProductScraper.prototype.parseSid = function(sid) {
      var color, id, ref;
      ref = sid.split('-'), id = ref[0], color = ref[1];
      return {
        id: id,
        color: color
      };
    };

    LLBeanProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          var url;
          url = "http://www.llbean.com/llb/shop/" + this.productSid.id;
          if (this.productSid.color) {
            url += "?attrValue_0=" + this.productSid.color;
          }
          return url;
        }
      },
      reviewData: {
        requires: 'productPage',
        url: function(resource) {
          var reviewId;
          reviewId = resource.match(/"reviewId" : "([^"]*)"/)[1];
          return "http://llbean.ugc.bazaarvoice.com/1138jspdp-en_us/" + reviewId + "/reviews.djs?format=embeddedhtml";
        }
      }
    };

    LLBeanProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'title')
      },
      price: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var max, min, prices;
          prices = this.matchAll(this.resource, /(?:toOrderItemPrice|toOrderItemSalePrice)[\S\s]*?\$([\d.]*)/, 1);
          if (prices.length > 1) {
            min = Math.min.apply(Math, prices);
            max = Math.max.apply(Math, prices);
            return this.value(min + " - $" + max);
          } else {
            return this.value(prices[0]);
          }
        })
      },
      image: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'image')
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var color, colorMatch, colorMatches, colors, i, imageMatches, images, imgs, j, k, l, len, len1, len2, len3, len4, m, match, matches, more, n, name, obj, properties, ref, values;
          more = this.declarativeScraper('scraper', 'more');
          matches = this.matchAll(this.resource, /"attributeArrays"[\S\s]*?"attributeDescriptions": \[[^\]]*\]/, 0);
          properties = {};
          for (j = 0, len = matches.length; j < len; j++) {
            match = matches[j];
            obj = JSON.parse("{" + match + "}");
            ref = obj.attributeArrays;
            for (i = k = 0, len1 = ref.length; k < len1; i = ++k) {
              values = ref[i];
              name = obj.attributeDescriptions[i];
              if (properties[name] == null) {
                properties[name] = [];
              }
              properties[name] = properties[name].concat(values);
            }
          }
          for (name in properties) {
            values = properties[name];
            properties[name] = _.unique(values);
          }
          if (properties.Size) {
            more.sizes = properties.Size;
            delete properties.Size;
          }
          if (properties['Color/Style']) {
            more.colors = properties['Color/Style'];
            delete properties['Color/Style'];
          }
          more.properties = properties;
          colorMatches = this.matchAll(this.resource, /"colorNames":(\[[^\]]*\]),/, 1);
          imageMatches = this.matchAll(this.resource, /"mainImagesZoomPath":(\[[^\]]*\]),/, 1);
          images = {};
          for (i = l = 0, len2 = colorMatches.length; l < len2; i = ++l) {
            colorMatch = colorMatches[i];
            colors = JSON.parse(colorMatch);
            imgs = JSON.parse(imageMatches[i]);
            for (i = m = 0, len3 = colors.length; m < len3; i = ++m) {
              color = colors[i];
              images[color] = imgs[i];
            }
          }
          more.colorImages = images;
          images = [];
          matches = this.matchAll(this.resource, /name="([^"]*)"\s*src="([^"]*)"/);
          for (n = 0, len4 = matches.length; n < len4; n++) {
            match = matches[n];
            if (match[1] !== 'main') {
              images.push("http:" + match[2]);
            }
          }
          more.images = images;
          return this.value(more);
        })
      },
      rating: {
        resource: 'reviewData',
        scraper: PatternResourceScraper([
          [
            /Write the first review<\\\/a>/, 0, function() {
              return 0;
            }
          ], [/alt=\\"(.*?) \/ 5\\"/, 1]
        ])
      },
      ratingCount: {
        resource: 'reviewData',
        scraper: PatternResourceScraper([
          [
            /Write the first review<\\\/a>/, 0, function() {
              return 0;
            }
          ], [/<span class=\\"BVRRNumber\\">(\d+)/, 1]
        ])
      },
      reviews: {
        resource: 'reviewData',
        scraper: ScriptedResourceScraper(function() {
          var authorMatches, contentMatches, dateMatches, i, ratingsMatches, ref, reviews, reviewsText, titleMatch, titleMatches;
          reviewsText = (ref = this.resource.match(/BVRRDisplayContentBodyID([\S\s]*)/)) != null ? ref[1] : void 0;
          if (reviewsText) {
            titleMatches = this.matchAll(reviewsText, /<span class=\\"BVRRValue BVRRReviewTitle\\">([\S\s]*?)<\\\/span>/, 1);
            contentMatches = this.matchAll(reviewsText, /<span class=\\"BVRRReviewText\\">([\S\s]*?)<\\\/span>/, 1);
            ratingsMatches = this.matchAll(reviewsText, /title=\\"(\d+) \/ 5\\"/, 1);
            authorMatches = this.matchAll(reviewsText, /<span class=\\"BVRRNickname\\">([^<]*?) <\\\/span>/, 1);
            dateMatches = this.matchAll(reviewsText, /<span class=\\"BVRRValue BVRRReviewDate\\">([^<]*)<\\\/span>/, 1);
            reviews = (function() {
              var j, len, results;
              results = [];
              for (i = j = 0, len = titleMatches.length; j < len; i = ++j) {
                titleMatch = titleMatches[i];
                results.push({
                  title: titleMatch,
                  content: contentMatches[i],
                  rating: ratingsMatches[i],
                  author: authorMatches[i],
                  date: dateMatches[i]
                });
              }
              return results;
            })();
            return this.value(reviews);
          } else {
            return this.value([]);
          }
        })
      }
    };

    return LLBeanProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=LLBeanProductScraper.js.map
