// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/SiteProduct', 'util', 'underscore'], function(SiteProduct, util, _) {
  var LLBeanProduct;
  return LLBeanProduct = (function(superClass) {
    extend(LLBeanProduct, superClass);

    function LLBeanProduct() {
      return LLBeanProduct.__super__.constructor.apply(this, arguments);
    }

    LLBeanProduct.prototype.images = function(cb) {
      return this.product["with"]('more', (function(_this) {
        return function(more) {
          var color, image, images, otherImages, ref;
          otherImages = (function() {
            var i, len, ref, results;
            ref = more.images;
            results = [];
            for (i = 0, len = ref.length; i < len; i++) {
              image = ref[i];
              results.push({
                small: image,
                medium: image,
                large: image,
                larger: image,
                full: image
              });
            }
            return results;
          })();
          images = {};
          ref = more.colorImages;
          for (color in ref) {
            image = ref[color];
            images[color] = [
              {
                small: 'http://cdni.llbean.com/is/image/' + image,
                medium: 'http://cdni.llbean.com/is/image/' + image,
                large: 'http://cdni.llbean.com/is/image/' + image,
                larger: 'http://cdni.llbean.com/is/image/' + image,
                full: 'http://cdni.llbean.com/is/image/' + image
              }
            ].concat(otherImages);
          }
          return cb(images);
        };
      })(this));
    };

    LLBeanProduct.prototype.widgets = function(cb) {
      return this.product["with"]('more', 'reviews', (function(_this) {
        return function(more, reviews) {
          var defs, name, ref, values, widgets;
          defs = {
            description: 'Description',
            details: 'Details',
            sizes: 'Sizes'
          };
          ref = more.properties;
          for (name in ref) {
            values = ref[name];
            defs[name] = {
              obj: values,
              title: name
            };
          }
          _.merge(defs, {
            colors: 'Colors',
            reviews: {
              obj: reviews,
              map: {
                review: 'content'
              }
            }
          });
          widgets = _this.genWidgets(more, defs);
          return cb(widgets);
        };
      })(this));
    };

    return LLBeanProduct;

  })(SiteProduct);
});

//# sourceMappingURL=LLBeanProduct.js.map
