// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'scraping/resourceScrapers/DeclarativeResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, DeclarativeResourceScraper, _) {
  var JCrewProductScraper;
  return JCrewProductScraper = (function(superClass) {
    extend(JCrewProductScraper, superClass);

    function JCrewProductScraper() {
      return JCrewProductScraper.__super__.constructor.apply(this, arguments);
    }

    JCrewProductScraper.prototype.version = 2;

    JCrewProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return "https://www.jcrew.com/browse/single_product_detail.jsp?prd_id=" + this.productSid;
        }
      },
      productDetails: {
        url: function() {
          return "https://www.jcrew.com/browse2/ajax/product_details_ajax.jsp?prodCode=" + this.productSid + "&color_name=";
        }
      },
      reviewData: {
        url: function() {
          return "https://jcrew.ugc.bazaarvoice.com/1706-en_us/" + this.productSid + "/reviews.djs?format=embeddedhtml";
        }
      }
    };

    JCrewProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'title')
      },
      price: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'price')
      },
      image: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'image')
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var more;
          more = this.declarativeScraper('scraper', 'more');
          this.execBlock(function() {
            this.getResource('productDetails', function(resource) {
              var colorImages, colorMappings, colorMappingsMatch, colors, j, k, len, len1, match, matches, ref, sizes;
              colorMappingsMatch = this.matchAll(resource, /"color":"([^"]*)","fullydomqty":false,"colordisplayname":"([^"]*)"/);
              colorMappings = {};
              for (j = 0, len = colorMappingsMatch.length; j < len; j++) {
                match = colorMappingsMatch[j];
                colorMappings[match[1]] = match[2];
              }
              more = {};
              match = /<section id="color1" class="color-row last-row">([\S\s]*?)<\/section>/.exec(resource)[1];
              matches = this.matchAll(match, /<a id="([^"]*)">\s*<img data-imgurl="([^"]*)" src="([^"]*)" class="product-detail-images" data-productcode="[^"]*" data-index="" \/>/);
              colorImages = {};
              colors = [];
              for (k = 0, len1 = matches.length; k < len1; k++) {
                match = matches[k];
                colorImages[colorMappings[match[1]]] = match[2];
                colors.push({
                  id: match[1],
                  swatch: match[3],
                  name: colorMappings[match[1]]
                });
              }
              match = /<section id="sizes" class="sizes">([\S\s]*?)<\/section>/.exec(resource)[1];
              sizes = this.matchAll(match, /<span>([^<]*)<\/span>/, 1);
              more.colors = colors;
              more.colorImages = colorImages;
              more.sizes = sizes;
              more.color = (ref = /<span class="color-name">\s*(.*?)\s*<\/span>/.exec(resource)) != null ? ref[1] : void 0;
              this.value(more);
              return this.done(true);
            });
            return null;
          });
          return this.value(more);
        })
      },
      rating: {
        resource: 'reviewData',
        scraper: PatternResourceScraper([
          [
            /NoReviewText\\">There are no reviews for this product/, 0, function() {
              return 0;
            }
          ], [/alt=\\"(.*?) \/ 5\\"/, 1]
        ])
      },
      ratingCount: {
        resource: 'reviewData',
        scraper: PatternResourceScraper([
          [
            /NoReviewText\\">There are no reviews for this product/, 0, function() {
              return 0;
            }
          ], [/BVRRBuyAgainPrefix\\">Based on (\d*)/, 1]
        ])
      },
      reviews: {
        resource: 'reviewData',
        scraper: ScriptedResourceScraper(function() {
          var authorMatches, contentMatches, dateMatches, i, ratingsMatches, ref, reviews, reviewsText, titleMatch, titleMatches;
          reviewsText = (ref = this.resource.match(/BVRRDisplayContentBodyID([\S\s]*)/)) != null ? ref[1] : void 0;
          if (reviewsText) {
            titleMatches = this.matchAll(reviewsText, /<span class=\\"BVRRValue BVRRReviewTitle\\">([\S\s]*?)<\\\/span>/, 1);
            contentMatches = this.matchAll(reviewsText, /<span class=\\"BVRRReviewText\\">([\S\s]*?)<\\\/span>/, 1);
            ratingsMatches = this.matchAll(reviewsText, /title=\\"(\d+) \/ 5\\"/, 1);
            authorMatches = this.matchAll(reviewsText, /<span class=\\"BVRRNickname\\">([^<]*?) <\\\/span>/, 1);
            dateMatches = this.matchAll(reviewsText, /<span class=\\"BVRRValue BVRRReviewDate\\">([^<]*)<\\\/span>/, 1);
            reviews = (function() {
              var j, len, results;
              results = [];
              for (i = j = 0, len = titleMatches.length; j < len; i = ++j) {
                titleMatch = titleMatches[i];
                results.push({
                  title: titleMatch,
                  content: contentMatches[i],
                  rating: ratingsMatches[i],
                  author: authorMatches[i],
                  date: dateMatches[i]
                });
              }
              return results;
            })();
            return this.value(reviews);
          } else {
            return this.value([]);
          }
        })
      }
    };

    return JCrewProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=JCrewProductScraper.js.map
