// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/SiteProduct', 'underscore'], function(SiteProduct, _) {
  var FabProduct;
  return FabProduct = (function(superClass) {
    extend(FabProduct, superClass);

    function FabProduct() {
      return FabProduct.__super__.constructor.apply(this, arguments);
    }

    FabProduct.prototype.images = function(cb) {
      return this.product["with"]('more', (function(_this) {
        return function(more) {
          var i, image, len, otherImages, ref, urlFirst, urlLast;
          otherImages = [];
          ref = more.images;
          for (i = 0, len = ref.length; i < len; i++) {
            image = ref[i];
            urlFirst = image.match(/([^-]*)/)[1];
            urlLast = image.match(/([^-]*)-([^-]*)-(.*)/)[3];
            otherImages.push({
              small: urlFirst + "-70x70-" + urlLast,
              medium: urlFirst + "-90x90-" + urlLast,
              large: urlFirst + "-300x300-" + urlLast,
              larger: urlFirst + "-610x610-" + urlLast,
              full: urlFirst + "-original-" + urlLast
            });
          }
          return cb({
            '': otherImages
          }, '');
        };
      })(this));
    };

    FabProduct.prototype.widgets = function(cb) {
      return this.product["with"]('more', (function(_this) {
        return function(more) {
          var widgets;
          widgets = _this.genWidgets(more, {
            overview: 'Overview',
            details: 'Details'
          });
          return cb(widgets);
        };
      })(this));
    };

    return FabProduct;

  })(SiteProduct);
});

//# sourceMappingURL=FabProduct.js.map
