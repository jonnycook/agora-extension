// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, _) {
  var FabProductScraper;
  return FabProductScraper = (function(superClass) {
    extend(FabProductScraper, superClass);

    function FabProductScraper() {
      return FabProductScraper.__super__.constructor.apply(this, arguments);
    }

    FabProductScraper.testProducts = ['452728'];

    FabProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return "http://fab.com/product/" + this.productSid;
        }
      }
    };

    FabProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<h1 id="productTitle" itemprop="name">([^<]*)/), 1)
      },
      price: {
        resource: 'productPage',
        scraper: PatternResourceScraper([[new RegExp(/<span[\s]+itemprop="price">[\s]*\$([^<]*)/), 1]])
      },
      image: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<meta property="og:image" content="([^"]*)/), 1)
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var author, authorBio, authorMatches, authorNames, bioMatch, bioMatches, content, count, details, entry, first, firstList, firstListMatches, i, image, imageMatches, images, item, j, k, l, last, len, len1, len2, len3, len4, len5, len6, len7, m, match, matches, middle, n, name, newMatches, o, overview, overviewMatches, p, par, parMatches, paras, ratUrl, revs, secondList, secondListMatches, shipping, shippingMatches, switches, text, title, value;
          switches = {
            images: true,
            overview: true,
            details: true,
            rating: true,
            ratingCount: true,
            originalPrice: true,
            reviews: false,
            shipping: false
          };
          value = {};
          if (switches.reviews) {
            ratUrl = "http://fab.com/product-review/get-top-reviews/" + this.productSid + "/";
            revs = [];
            this.execBlock(function() {
              this.get(ratUrl, function(response) {
                var reviews;
                value.reviews = response;
                reviews = JSON.parse(response);
                this.done(true);
                return this.value(value);
              });
              return null;
            });
          }
          if (switches.overview) {
            overview = [];
            matches = this.resource.match(/itemprop="description">([\S\s]*?)<\/div>/);
            overviewMatches = matches[1].match(/<p>([\S\s]*?)<\/p>/g);
            for (i = 0, len = overviewMatches.length; i < len; i++) {
              match = overviewMatches[i];
              text = match.match(/<p>([\S\s]*?)<\/p>/);
              overview.push(text[1]);
            }
            value.overview = overview;
          }
          if (switches.details) {
            details = [];
            matches = this.resource.match(/<div class="desc">([\S\s]*?)<\/div>/);
            parMatches = matches[1].match(/<p>([\S\s]*?)<\/p>/g);
            if (parMatches) {
              paras = [];
              for (j = 0, len1 = parMatches.length; j < len1; j++) {
                match = parMatches[j];
                par = match.match(/<p>([\S\s]*?)<\/p>/)[1];
                paras.push(par);
              }
              details.push(paras);
            }
            firstListMatches = matches[1].match(/<li>([\S\s]*?)<\/li>/g);
            if (firstListMatches) {
              firstList = [];
              for (k = 0, len2 = firstListMatches.length; k < len2; k++) {
                match = firstListMatches[k];
                entry = match.match(/<li><span[^<]+>([\S\s]*?)<\/span>/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ").replace(/^<br\/>+|<br\/>+$/gm, '').replace(/^<br \/>+|<br \/>+$/gm, '');
                firstList.push(entry);
              }
              details.push(firstList);
            }
            newMatches = this.resource.match(/<ul class="tblList" id="tblListTgl">([\S\s]*?)<\/ul>/);
            if (newMatches) {
              secondListMatches = newMatches[1].match(/<div class="productAttr">[^<]+<\/div>[\s]*?<div[^>]+>([^<]+)<\/div>/g);
              secondList = {};
              for (l = 0, len3 = secondListMatches.length; l < len3; l++) {
                match = secondListMatches[l];
                title = match.match(/<div class="productAttr">([^<]+)/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ");
                content = match.match(/<div class="productAttr">[^<]+<\/div>[\s]*?<div[^>]+>([^<]+)<\/div>/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ").replace(/^<br\/>+|<br\/>+$/gm, '');
                secondList[title] = content;
              }
              details.push(secondList);
            }
            value.details = details;
          }
          if (switches.author) {
            author = {};
            authorNames = [];
            matches = this.resource.match(/<ul class="contributors([\S\s]*?)<\/ul>/);
            authorMatches = matches[1].match(/<li([\S\s]*?)<\/li>/g);
            count = 0;
            for (m = 0, len4 = authorMatches.length; m < len4; m++) {
              item = authorMatches[m];
              if (count > 0) {
                name = item.match(/<li([\S\s]*?)<\/li>/)[1];
                authorNames.push(name.replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " "));
              }
              count++;
            }
            author["names"] = authorNames;
            authorBio = [];
            bioMatch = this.resource.match(/<div class="basic-info([\S\s]*?)<\/section>/);
            bioMatches = bioMatch[1].match(/<p>([\S\s]*?)<\/p>/g);
            for (n = 0, len5 = bioMatches.length; n < len5; n++) {
              match = bioMatches[n];
              par = match.match(/<p>([\S\s]*?)<\/p>/)[1];
              authorBio.push(par);
            }
            author["bio"] = authorBio;
            value.author = author;
          }
          if (switches.rating) {
            matches = this.resource.match(/<meta itemprop="rating" content="([^"]+)/);
            if (matches) {
              value.rating = matches[1];
            }
          }
          if (switches.reviewCount) {
            matches = this.resource.match(/<meta itemprop="votes" content="([^"]+)/);
            if (matches) {
              value.reviewCount = matches[1];
            }
          }
          if (switches.originalPrice) {
            matches = this.resource.match(/"original_price":"([\S\s]*?)",/);
            if (matches) {
              value.originalPrice = matches[1];
            }
          }
          if (switches.images) {
            images = [];
            matches = this.resource.match(/<ul id="moreIndvProdImages"([\S\s]*?)<\/ul>/);
            imageMatches = matches[1].match(/src="([^"]+)/g);
            for (o = 0, len6 = imageMatches.length; o < len6; o++) {
              match = imageMatches[o];
              image = match.match(/src="([^"]+)/);
              first = image[1].match(/\/\/(.*?)70x70/)[1];
              last = image[1].match(/70x70(.*)/)[1];
              middle = "610x610";
              image = first + middle + last;
              images.push("http://" + image);
            }
            value.images = images;
          }
          if (switches.shipping) {
            shipping = {};
            matches = this.resource.match(/<ul class="tblList" id="shippingDetails"([\S\s]*?)<\/ul>/);
            shippingMatches = matches[1].match(/<label>[^<]+<\/label>[\s]*?<span[^>]+>([\S\s]*?)<\/span>/g);
            for (p = 0, len7 = shippingMatches.length; p < len7; p++) {
              match = shippingMatches[p];
              title = match.match(/<label>([^<]+)/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ");
              content = match.match(/<label>[^<]+<\/label>[\s]*?<span[^>]+>([\S\s]*?)<\/span>/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ").replace(/^<br\/>+|<br\/>+$/gm, '');
              shipping[title] = content;
            }
            value.shipping = shipping;
          }
          return this.value(value);
        })
      }
    };

    return FabProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=FabProductScraper.js.map
