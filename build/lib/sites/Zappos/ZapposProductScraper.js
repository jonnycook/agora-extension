// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/DeclarativeResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, DeclarativeResourceScraper, _) {
  var ZapposProductScraper, matchAll;
  matchAll = function(string, pattern) {
    var match, matches, _i, _len, _results;
    matches = string.match(new RegExp((_.isString(pattern) ? pattern : pattern.source), 'g'));
    if (matches) {
      _results = [];
      for (_i = 0, _len = matches.length; _i < _len; _i++) {
        match = matches[_i];
        _results.push(match.match(pattern));
      }
      return _results;
    } else {
      return [];
    }
  };
  return ZapposProductScraper = (function(_super) {
    __extends(ZapposProductScraper, _super);

    function ZapposProductScraper() {
      return ZapposProductScraper.__super__.constructor.apply(this, arguments);
    }

    ZapposProductScraper.productSid = function(background, url, cb) {
      return background.httpRequest(url, {
        cb: function(response) {
          var colorId, matches, sku;
          matches = /<span id="sku" itemprop="sku">SKU (\d+)<\/span>/.exec(response);
          if (matches) {
            sku = matches[1];
            matches = /<input type="hidden" id="color" value="(\d+)" name="colorId" \/>/.exec(response);
            if (matches) {
              colorId = matches[1];
            } else {
              matches = /<select id="color" name="colorId" class="btn secondary">([\S\s]+)<\/select>/.exec(response);
              matches = /<option value="(\d+)" selected="selected">[^<]+<\/option>/.exec(matches[1]);
              colorId = matches[1];
            }
            return cb("" + sku + "-" + colorId);
          } else {
            return cb();
          }
        }
      });
    };

    ZapposProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return this.site.productUrl(this.productSid);
        }
      }
    };

    ZapposProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'title')
      },
      price: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'price')
      },
      image: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'image')
      },
      rating: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'rating')
      },
      ratingCount: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'ratingCount')
      },
      reviews: {
        resource: 'productPage',
        scraper: DeclarativeResourceScraper('scraper', 'reviews')
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var colorId, colorName, colorToStyle, currentColorId, id, m, match, matches, style, styleId, styles, switches, type, url, value, _base, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref;
          switches = {
            styles: true
          };
          value = this.declarativeScraper('scraper');
          if (switches.styles) {
            styles = {};
            colorToStyle = {};
            currentColorId = this.resource.match(/<option value="(\d*)" selected="selected">/)[1];
            matches = this.resource.match(/var styleIds = \{([^}]*)/);
            matches = matches[1].match(/'([^']*)':\s*(\d*)/g);
            for (_i = 0, _len = matches.length; _i < _len; _i++) {
              match = matches[_i];
              m = match.match(/'([^']*)':\s*(\d*)/);
              colorId = m[1];
              styleId = m[2];
              styles[styleId] = {
                id: styleId,
                color: {
                  id: colorId
                },
                images: {}
              };
              colorToStyle[colorId] = styleId;
            }
            value.currentStyle = colorToStyle[currentColorId];
            matches = this.matchAll(this.resource, /<img src="([^"]*)" class="gae-click\*Product-Page\*PrImage\*Swatch" \/>/);
            for (_j = 0, _len1 = matches.length; _j < _len1; _j++) {
              match = matches[_j];
              url = match[1];
              styleId = /http:\/\/[^.]*.zassets.com\/images\/[a-z]*\/\d\/.*?\/(\d*)-[a-z]-\w*\.jpg/.exec(url)[1];
              styles[styleId].thumbUrl = url;
            }
            matches = this.resource.match(/var colorNames = \{([^}]*)/);
            matches = matches[1].match(/'([^']*)':"([^"]*)"/g);
            for (_k = 0, _len2 = matches.length; _k < _len2; _k++) {
              match = matches[_k];
              m = match.match(/'([^']*)':"([^"]*)"/);
              colorId = m[1];
              colorName = m[2];
              styleId = colorToStyle[colorId];
              styles[styleId].color.name = colorName;
            }
            matches = this.resource.match(/pImgs\[(\d+)\]\['([^']*)'\]\['([^']*)'\] = (?:'([^']*)'|\{ filename: '([^']*)', width: '\d*', height: '\d*' \};)/g);
            for (_l = 0, _len3 = matches.length; _l < _len3; _l++) {
              match = matches[_l];
              m = match.match(/pImgs\[(\d+)\]\['([^']*)'\]\['([^']*)'\] = (?:'([^']*)'|\{ filename: '([^']*)', width: '\d*', height: '\d*' \};)/);
              style = m[1];
              type = m[2];
              id = m[3];
              url = (_ref = m[4]) != null ? _ref : m[5];
              if ((_base = styles[style].images)[id] == null) {
                _base[id] = {};
              }
              styles[style].images[id][type] = url;
            }
            value.styles = styles;
          }
          return this.value(value);
        })
      }
    };

    return ZapposProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=ZapposProductScraper.map
