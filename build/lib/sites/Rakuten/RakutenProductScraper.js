// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, _) {
  var RakutenProductScraper;
  return RakutenProductScraper = (function(superClass) {
    extend(RakutenProductScraper, superClass);

    function RakutenProductScraper() {
      return RakutenProductScraper.__super__.constructor.apply(this, arguments);
    }

    RakutenProductScraper.testProducts = ['263019782'];

    RakutenProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return "http://www.rakuten.com/prod/-/" + this.productSid + ".html";
        }
      },
      altProductPage: {
        url: function() {
          return "http://www.rakuten.com/pr/product.aspx?sku=" + this.productSid;
        }
      }
    };

    RakutenProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<meta property="og:title" content="([^"]*)/), 1)
      },
      price: {
        resource: 'productPage',
        scraper: PatternResourceScraper([[new RegExp(/<span id="spanMainTotalPrice" class="pr-pricing-total-price" itemprop="price">\$([^<]*)/), 1]])
      },
      image: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<meta property="og:image" content="([^"]*)/), 1)
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var author, authorBio, authorMatches, authorNames, bioMatch, bioMatches, content, count, detailMatches, details, editorialReviews, erMatches, from, i, image, imageMatches, images, isbn, item, j, k, l, len, len1, len2, len3, len4, len5, m, match, matches, n, name, overview, overviewMatches, par, switches, text, title, value;
          switches = {
            images: true,
            overview: true,
            details: true,
            rating: true,
            ratingCount: true,
            originalPrice: true,
            shipping: false
          };
          value = {};
          if (switches.overview) {
            overview = [];
            matches = this.resource.match(/<div id="product-commentary-overview-1"([\S\s]*?)<\/section>/);
            overviewMatches = matches[1].match(/<p([\S\s]*?)<\/p>/g);
            for (i = 0, len = overviewMatches.length; i < len; i++) {
              match = overviewMatches[i];
              text = match.match(/<p([\S\s]*?)<\/p>/);
              overview.push(text[1]);
            }
            value.overview = overview;
          }
          if (switches.details) {
            details = [];
            matches = this.resource.match(/<div class="product-details([\S\s]*?)<\/section>/);
            detailMatches = matches[1].match(/<li([\S\s]*?)<\/li>/g);
            for (j = 0, len1 = detailMatches.length; j < len1; j++) {
              match = detailMatches[j];
              title = match.match(/<span>([\S\s]*?)<\/span>/)[1];
              content = match.match(/<\/span>([\S\s]*?)<\/li>/)[1];
              text = title + content;
              details.push(text.replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " "));
            }
            value.details = details;
          }
          if (switches.isbn) {
            matches = this.resource.match(/<div class="product-details([\S\s]*?)<\/section>/);
            isbn = matches[1].match(/<span>ISBN-13:<\/span>([\S\s]*?)<\/li>/);
            value.isbn = isbn[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ");
          }
          if (switches.author) {
            author = {};
            authorNames = [];
            matches = this.resource.match(/<ul class="contributors([\S\s]*?)<\/ul>/);
            authorMatches = matches[1].match(/<li([\S\s]*?)<\/li>/g);
            count = 0;
            for (k = 0, len2 = authorMatches.length; k < len2; k++) {
              item = authorMatches[k];
              if (count > 0) {
                name = item.match(/<li([\S\s]*?)<\/li>/)[1];
                authorNames.push(name.replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " "));
              }
              count++;
            }
            author["names"] = authorNames;
            authorBio = [];
            bioMatch = this.resource.match(/<div class="basic-info([\S\s]*?)<\/section>/);
            bioMatches = bioMatch[1].match(/<p>([\S\s]*?)<\/p>/g);
            for (l = 0, len3 = bioMatches.length; l < len3; l++) {
              match = bioMatches[l];
              par = match.match(/<p>([\S\s]*?)<\/p>/)[1];
              authorBio.push(par);
            }
            author["bio"] = authorBio;
            value.author = author;
          }
          if (switches.rating) {
            matches = this.resource.match(/"customerAvgStarRating" : ([\S\s]*?),/);
            if (matches) {
              value.rating = matches[1];
            }
          }
          if (switches.reviewCount) {
            matches = this.resource.match(/"customerRatingCount" : ([\S\s]*?),/);
            if (matches) {
              value.reviewCount = matches[1];
            }
          }
          if (switches.editorialReviews) {
            editorialReviews = {};
            matches = this.resource.safeMatch(/<h3>Editorial Reviews<\/h3>([\S\s]*?)<\/div>/);
            erMatches = matches[1].match(/<article class="simple-html">([\S\s]*?)<\/article>/g);
            for (m = 0, len4 = erMatches.length; m < len4; m++) {
              match = erMatches[m];
              from = match.match(/<h5>([\S\s]*?)<\/h5>/)[1];
              content = match.match(/<\/h5>([\S\s]*?)<\/article>/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ").replace(/^<br \/>+|<br \/>+$/gm, '');
              editorialReviews[from] = content;
            }
            value.editorialReviews = editorialReviews;
          }
          if (switches.originalPrice) {
            matches = this.resource.match(/"listPrice" : ([\S\s]*?),/);
            if (matches) {
              value.originalPrice = matches[1];
            }
          }
          if (switches.images) {
            images = [];
            matches = this.resource.match(/<div id="product-image-smaller-1-viewer"([\S\s]*?)<div id="product-promos-aside-1"/);
            imageMatches = matches[1].match(/data-bn-src-url="([^"]+)/g);
            for (n = 0, len5 = imageMatches.length; n < len5; n++) {
              match = imageMatches[n];
              image = match.match(/data-bn-src-url="([^"]+)/);
              images.push(image[1]);
            }
            value.images = images;
          }
          return this.value(value);
        })
      }
    };

    return RakutenProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=RakutenProductScraper.js.map
