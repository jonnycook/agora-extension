// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['scraping/ProductScraper', 'scraping/resourceScrapers/PatternResourceScraper', 'scraping/resourceScrapers/ScriptedResourceScraper', 'scraping/resourceScrapers/JsonResourceScraper', 'underscore'], function(ProductScraper, PatternResourceScraper, ScriptedResourceScraper, JsonResourceScraper, _) {
  var CostcoProductScraper;
  return CostcoProductScraper = (function(superClass) {
    extend(CostcoProductScraper, superClass);

    function CostcoProductScraper() {
      return CostcoProductScraper.__super__.constructor.apply(this, arguments);
    }

    CostcoProductScraper.testProducts = ['11625662'];

    CostcoProductScraper.prototype.resources = {
      productPage: {
        url: function() {
          return "http://www.costco.com/-.product." + this.productSid + ".html";
        }
      }
    };

    CostcoProductScraper.prototype.properties = {
      title: {
        resource: 'productPage',
        scraper: PatternResourceScraper(/<title>([^<]*)/, 1)
      },
      price: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var i, len, match, matches, max, min, multiprice, multipriceMatches, price, prices;
          matches = this.resource.match(/<input type="hidden" name="price"[\s]*value="\$([^"]*)/);
          if (matches[1] !== '0.00') {
            return this.value(matches[1]);
          } else {
            multiprice = this.resource.match(/<head>([\S\s]*?)<\/head>/);
            multipriceMatches = multiprice[1].match(/"price" : process\("([^"]+)/g);
            prices = [];
            for (i = 0, len = multipriceMatches.length; i < len; i++) {
              match = multipriceMatches[i];
              price = match.match(/"price" : process\("([^"]+)/);
              prices.push(parseFloat(atob(price[1])));
            }
            max = Math.max.apply(Math, prices);
            min = Math.min.apply(Math, prices);
            return this.value(min + " - $" + max);
          }
        })
      },
      image: {
        resource: 'productPage',
        scraper: PatternResourceScraper(new RegExp(/<img id="Image1" src="([^"]*)/), 1)
      },
      more: {
        resource: 'productPage',
        scraper: ScriptedResourceScraper(function() {
          var content, i, images, len, match, matches, price, specMatches, specifications, switches, title, value, xmtUrl;
          switches = {
            images: true,
            features: true,
            details: true,
            specifications: true,
            shipping: true,
            rating: true,
            ratingCount: true,
            originalPrice: true
          };
          value = {};
          if (switches.rating) {
            matches = this.resource.match(/<meta itemprop="ratingValue" content="([^"]+)/);
            if (matches) {
              value.rating = matches[1];
            }
          }
          if (switches.reviewCount) {
            matches = this.resource.match(/<meta itemprop="reviewCount" content="([^"]+)/);
            if (matches) {
              value.reviewCount = matches[1];
            }
          }
          if (switches.features) {
            matches = this.resource.match(/<div class="features">([\S\s]*?)<\/div>/);
            value.features = matches[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ");
          }
          if (switches.details) {
            matches = this.resource.match(/<div id="product-tab1"([\S\s]*?)<div id="product-tab2"/);
            value.details = "<div id=\"product-tab1\"" + matches[1];
          }
          if (switches.images) {
            images = [];
            xmtUrl = this.resource.match(/src="(http:\/\/images\.costco\.com\/image\/media\/[\S\s]*?\.xmt)"/)[1];
            this.execBlock(function() {
              this.get(xmtUrl, function(response) {
                var i, len, match, num;
                matches = response.match(/image: '([^']*)/g);
                for (i = 0, len = matches.length; i < len; i++) {
                  match = matches[i];
                  num = match.match(/image: '([^']*)/);
                  images.push("http://images.costco.com/image/media/350-" + num[1] + ".jpg");
                }
                this.done(true);
                return this.value(value);
              });
              return null;
            });
            value.images = images;
          }
          if (switches.specifications) {
            specifications = {};
            matches = this.resource.match(/<div id="product-tab2"([\S\s]*?)<div id="product-tab3"/);
            specMatches = matches[1].match(/<li([\S\s]*?)<\/li>/g);
            for (i = 0, len = specMatches.length; i < len; i++) {
              match = specMatches[i];
              title = match.match(/<span class="bold">([\S\s]*?):<\/span>/)[1].replace(/^\s+|\s+$/gm, '').replace(/\n\r/g, " ");
              content = match.match(/<\/span>([\S\s]*?)<\/li>/)[1].replace(/^<br\/>+|<br\/>+$/gm, '').replace(/\n\r/g, " ").replace(/^\s+|\s+$/gm, '');
              specifications[title] = content;
            }
            value.specifications = specifications;
          }
          if (switches.shipping) {
            matches = this.resource.match(/<div id="product-tab3"([\S\s]*?)<div id="product-tab4"/);
            value.shipping = "<div id=\"product-tab3\"" + matches[1];
          }
          if (switches.originalPrice) {
            matches = this.resource.match(/<div class="online-price">([\S\s]*?)<\/div>/);
            if (matches) {
              price = matches[1].match(/<span class="currency">\$([\S\s]*?)<\/span>/);
              value.originalPrice = price[1];
            }
          }
          return this.value(value);
        })
      }
    };

    return CostcoProductScraper;

  })(ProductScraper);
});

//# sourceMappingURL=CostcoProductScraper.js.map
