// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

define(['model/Model', 'Site', 'model/ModelInstance', 'model/ObservableValue'], function(Model, Site, ModelInstance, ObservableValue) {
  var ProductVariant, ProductVariantInstance;
  ProductVariantInstance = (function(_super) {
    __extends(ProductVariantInstance, _super);

    function ProductVariantInstance() {
      return ProductVariantInstance.__super__.constructor.apply(this, arguments);
    }

    ProductVariantInstance.prototype.instanceMethods = ['update', 'displayValue', 'getDisplayValue', 'productId'];

    ProductVariantInstance.prototype.productId = function() {
      return this._product().get('id');
    };

    ProductVariantInstance.prototype._product = function() {
      var _ref;
      return (_ref = this._relationships) != null ? _ref.product : void 0;
    };

    ProductVariantInstance.prototype.displayValue = function(property) {
      if (property === 'image') {
        return (function(_this) {
          return function() {
            return _this.field('image').get();
          };
        })(this);
      } else {
        return this._product().displayValue(property);
      }
    };

    ProductVariantInstance.prototype.getDisplayValue = function(property) {
      if (property === 'image') {
        return this.field('image').get();
      } else {
        return this._product().getDisplayValue(property);
      }
    };

    ProductVariantInstance.prototype.retrieve = function() {
      var args, _ref;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return (_ref = this._product()).retrieve.apply(_ref, args);
    };

    ProductVariantInstance.prototype.update = function() {
      return this._product().update();
    };

    ProductVariantInstance.prototype._get = function(field) {
      if (field === 'id' || field === 'product_id' || field === 'feelings' || field === 'data' || field === 'variant') {
        return ProductVariantInstance.__super__._get.apply(this, arguments);
      } else {
        return this._product()._get(field);
      }
    };

    ProductVariantInstance.prototype.get = function(field) {
      if (field === 'id' || field === 'product_id' || field === 'feelings' || field === 'data' || field === 'variant') {
        return ProductVariantInstance.__super__.get.apply(this, arguments);
      } else if (field === 'image') {
        return this.field('image').get();
      } else {
        return this._product().get(field);
      }
    };

    ProductVariantInstance.prototype.field = function(name) {
      if (name === 'id' || name === 'product_id' || name === 'feelings' || name === 'data' || name === 'variant') {
        return ProductVariantInstance.__super__.field.apply(this, arguments);
      } else if (name === 'image') {
        if (!this._image) {
          this._image = new ObservableValue;
          this._product().model.siteProduct(this._product(), (function(_this) {
            return function(siteProduct) {
              if (siteProduct) {
                return siteProduct.variantImage(_this.get('variant'), function(image) {
                  if (image) {
                    return _this._image.set(image);
                  } else {
                    return _this._image.set(_this._product().getDisplayValue('image'));
                  }
                });
              }
            };
          })(this));
        }
        return this._image;
      } else {
        return this._product().field(name);
      }
    };

    ProductVariantInstance.prototype.set = function(field, value) {
      if (field !== 'product_id') {
        throw new Error('variants are read only');
      }
      return ProductVariantInstance.__super__.set.apply(this, arguments);
    };

    ProductVariantInstance.prototype.isA = function(type) {
      return type === 'Product' || type === 'ProductVariant';
    };

    return ProductVariantInstance;

  })(ModelInstance);
  return ProductVariant = (function(_super) {
    __extends(ProductVariant, _super);

    function ProductVariant() {
      ProductVariant.__super__.constructor.apply(this, arguments);
      this.ModelInstance = ProductVariantInstance;
    }

    return ProductVariant;

  })(Model);
});

//# sourceMappingURL=ProductVariant.map
