// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['View', 'Site', 'Formatter', 'util', 'underscore', 'model/ObservableArray', 'model/ObservableValue'], function(View, Site, Formatter, util, _, ObservableArray, ObservableValue) {
  var CollaborateView, filteredArray;
  filteredArray = function(ctx, subject, output, test, reversed) {
    var add;
    if (reversed == null) {
      reversed = false;
    }
    add = reversed ? function(obj) {
      return output.unshift(obj);
    } : function(obj) {
      return output.push(obj);
    };
    subject.each((function(_this) {
      return function(record) {
        if (test(record)) {
          return add(record);
        }
      };
    })(this));
    return ctx.observeObject(subject, (function(_this) {
      return function(mutation) {
        if (mutation.type === 'insertion') {
          if (test(mutation.value)) {
            return add(mutation.value);
          }
        } else if (mutation.type === 'deletion') {
          if (test(mutation.value)) {
            return output.remove(mutation.value);
          }
        }
      };
    })(this));
  };
  return CollaborateView = (function(superClass) {
    extend(CollaborateView, superClass);

    function CollaborateView() {
      return CollaborateView.__super__.constructor.apply(this, arguments);
    }

    CollaborateView.nextId = 0;

    CollaborateView.id = function(args) {
      if (args === 'ShoppingBar') {
        return args;
      } else {
        return ++this.nextId;
      }
    };

    CollaborateView.prototype.doInit = function(obj) {
      var _nameMap, _next, getObject, id, nameMap, object, objectData, objectText, ref, ref1, table, userId;
      if (!this.agora.user) {
        return;
      }
      getObject = (function(_this) {
        return function(modelName, id) {
          var model, ref, ref1, ref2;
          model = _this.agora.modelManager.getModel(modelName);
          id = (ref = (ref1 = _this.agora.db.globalToLocalMapping) != null ? (ref2 = ref1[model._table.name]) != null ? ref2[id] : void 0 : void 0) != null ? ref : id;
          return model.withId(id, false);
        };
      })(this);
      this.obj = obj;
      this.stateCtx.clear();
      userId = null;
      object = null;
      this.object = _.isString(obj) ? ((ref = obj.split('.'), table = ref[0], id = ref[1], ref), object = this.agora.modelManager.instanceForRecord(this.agora.db.table(table).bySaneId(id)), object ? (userId = parseInt(object.record.storeId), obj) : void 0) : obj.isA('Decision') ? (object = obj, userId = parseInt(obj.record.storeId), "decisions." + (obj.record.globalId().substr(1))) : obj.isA('Belt') ? (object = obj, userId = parseInt(obj.record.storeId), "belts." + (obj.record.globalId().substr(1))) : obj.isA('ObjectReference') ? (userId = obj.get('object_user_id'), obj.get('object') === '/' ? object = this.agora.modelManager.getInstance('User', "G" + userId) : ((ref1 = obj.get('object').split('.'), table = ref1[0], id = ref1[1], ref1), object = this.agora.modelManager.instanceForRecord(this.agora.db.table(table).bySaneId(id))), obj.get('object')) : void 0;
      if (!this.object) {
        return;
      }
      this.collaborators = new ObservableArray;
      filteredArray(this.stateCtx, this.agora.db.tables.collaborators.records, this.collaborators, (function(_this) {
        return function(record) {
          return record.get('object_user_id') == userId && record.get('object') === _this.object;
        };
      })(this));
      _nameMap = {};
      _next = {};
      nameMap = function(model, id) {
        var key;
        key = model + "." + id;
        if (_nameMap[key]) {
          return _nameMap[key];
        } else {
          if (_next[model] == null) {
            _next[model] = 0;
          }
          return _nameMap[key] = model + " " + (String.fromCharCode(65 + _next[model]++));
        }
      };
      this.activity = new ObservableArray;
      filteredArray(this.stateCtx, this.agora.db.tables.activity.records, this.activity, ((function(_this) {
        return function(record) {
          var curObj, parent;
          curObj = getObject(record.get('object_type'), record.get('object_id'));
          while (curObj) {
            if (curObj.isA(object.modelName) && curObj.get('id') === object.get('id')) {
              return true;
            }
            parent = curObj.record.owner();
            if (parent) {
              curObj = agora.modelManager.instanceForRecord(parent);
            } else {
              return false;
            }
          }
          return false;
        };
      })(this)), true);
      objectText = (function(_this) {
        return function(inObject) {};
      })(this);
      objectData = function(inObject) {
        var model, text;
        text = null;
        model = null;
        id = null;
        if (_.isString(inObject.model)) {
          obj = getObject(inObject.model, inObject.id);
          if (obj) {
            return objectData(obj);
          } else {
            text = nameMap(inObject.model, inObject.id);
          }
        } else {
          model = inObject.modelName;
          id = inObject.get('id');
          if (inObject.isA('Product')) {
            text = inObject.get('title') ? inObject.get('title').substr(0, 10) + '...' : nameMap(inObject.modelName, inObject.get('id'));
          } else if (inObject.isA('Decision') && inObject.equals(object) && inObject.get('share_title')) {
            text = inObject.get('share_title');
          } else if (inObject.isA('Belt') && inObject.equals(object) && inObject.get('title')) {
            text = inObject.get('title');
          } else {
            text = nameMap(inObject.modelName, inObject.get('id'));
          }
        }
        return {
          text: text,
          model: model,
          id: id
        };
      };
      return this.data.set({
        owner: this.agora.user.get('id') === 'G' + userId,
        collaborators: this.clientArray(this.stateCtx, this.collaborators, (function(_this) {
          return function(obj, onRemove, ctx) {
            var abbreviation, updateAbbreviation, userWrapper;
            if (obj.get('pending')) {
              return {
                name: obj.get('email'),
                pending: true,
                id: obj.get('invitation')
              };
            } else {
              userWrapper = util.userWrapper(obj.get('user_id'));
              ctx().onDestruct = function() {
                return userWrapper.destruct();
              };
              abbreviation = ctx().clientValue();
              updateAbbreviation = function() {
                if (userWrapper.empty) {
                  return abbreviation.set(obj.get('user_id'));
                } else {
                  return abbreviation.set(userWrapper.get('name')[0]);
                }
              };
              updateAbbreviation();
              ctx().observe(userWrapper.field('name'), updateAbbreviation);
              return {
                name: ctx().clientValue(userWrapper.field('name')),
                owner: obj.get('user_id') == userId,
                id: obj.get('user_id'),
                abbreviation: abbreviation,
                color: util.colorForUser(_this.agora.user, userWrapper)
              };
            }
          };
        })(this)),
        activity: this.clientArray(this.stateCtx, this.activity, (function(_this) {
          return function(entry, onRemove, ctx) {
            var arg, date, i, images, j, num, numberForPreview, pertainingObject, product, ref2, text, user, userString;
            pertainingObject = getObject(entry.get('object_type'), entry.get('object_id'));
            user = _this.agora.modelManager.getInstance('User', entry.get('generator_id'), false);
            userString = user ? user.get('name') : "User " + (entry.get('generator_id')[0] === 'G' ? entry.get('generator_id').substr(1) : entry.get('generator_id'));
            images = [];
            numberForPreview = entry.get('type') === 'convert' ? -1 : 0;
            num = entry.get('args').length + numberForPreview;
            for (i = j = 0, ref2 = num; 0 <= ref2 ? j < ref2 : j > ref2; i = 0 <= ref2 ? ++j : --j) {
              arg = entry.get('args')[i];
              if (arg.model === 'Product') {
                product = getObject(arg.model, arg.id);
                if (product) {
                  images.push(ctx().clientValue(product.field('image')));
                }
              } else if (arg.model === 'Decision') {
                images.push('decision');
              } else if (arg.model === 'Belt') {
                images.push('belt');
              } else if (arg.model === 'Bundle') {
                images.push('bundle');
              }
            }
            text = (function() {
              switch (entry.get('type')) {
                case 'add':
                  return [objectData(entry.get('args')[0]), 'was added to', objectData(pertainingObject)];
                case 'remove':
                  return [objectData(entry.get('args')[0]), 'was removed from', objectData(pertainingObject)];
                case 'decision.select':
                  return [objectData(entry.get('args')[0]), 'was selected in', objectData(pertainingObject)];
                case 'decision.deselect':
                  return [objectData(entry.get('args')[0]), 'was deselected in', objectData(pertainingObject)];
                case 'convert':
                  return [objectData(entry.get('args')[0]), 'and', objectData(entry.get('args')[1]), 'was converted to', objectData(entry.get('args')[2]), 'in', objectData(pertainingObject)];
                case 'decision.setDescriptor':
                  return [objectData(pertainingObject), 'was edited'];
                default:
                  return ['Something was done'];
              }
            })();
            if (userString) {
              id = entry.get('generator_id')[0] === 'G' ? entry.get('generator_id').substr(1) : entry.get('generator_id');
              text = text.concat([
                'by', {
                  text: userString,
                  type: 'user',
                  color: util.colorForUser(_this.agora.user, id)
                }
              ]);
            }
            date = new Date(entry.get('timestamp') * 1000);
            return {
              type: entry.get('type'),
              text: text,
              images: images.slice(0, 4),
              timestamp: date.toLocaleString()
            };
          };
        })(this))
      });
    };

    CollaborateView.prototype.initAsync = function(args1, done) {
      var init;
      this.args = args1;
      this.data = this.clientValue();
      this.stateCtx = this.context();
      init = (function(_this) {
        return function(obj) {
          _this.doInit(obj);
          return done();
        };
      })(this);
      if (this.args) {
        if (this.args === 'ShoppingBar') {
          if (this.agora.View.views.ShoppingBar["null"].shareObject.get()) {
            init(this.agora.View.views.ShoppingBar["null"].shareObject.get().object);
          }
          return this.agora.View.views.ShoppingBar["null"].shareObject.observe((function(_this) {
            return function(mutation) {
              if (_this.obj !== mutation.value.object) {
                return init(mutation.value.object);
              }
            };
          })(this));
        } else {
          return this.resolveObject(this.args, (function(_this) {
            return function(obj) {
              return init(obj);
            };
          })(this));
        }
      } else {
        return init(this.agora.View.views.ShoppingBar["null"].currentState().shareObject());
      }
    };

    CollaborateView.prototype.update = function() {
      return this.doInit(this.agora.View.views.ShoppingBar["null"].shareObject.get().object);
    };

    CollaborateView.prototype.methods = {
      "delete": function(view, id) {
        var params, shareObject;
        shareObject = this.agora.db.tables.shared_objects.selectFirst({
          object: this.object,
          with_user_id: 'G' + id
        });
        params = {
          id: shareObject.globalId().substr(1)
        };
        return this.agora.updater.transport.messageStream.sendMessage('message', this.agora.user.saneId(), 'share/delete', JSON.stringify(params));
      },
      deletePending: function(view, id) {
        var params;
        params = {
          invitation: id
        };
        return this.agora.updater.transport.messageStream.sendMessage('message', this.agora.user.saneId(), 'share/delete', JSON.stringify(params));
      }
    };

    return CollaborateView;

  })(View);
});

//# sourceMappingURL=CollaborateView.js.map
