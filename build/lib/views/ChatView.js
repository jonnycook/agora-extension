// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util', 'underscore'], function(View, Site, Formatter, util, _) {
  var ChatView;
  return ChatView = (function(_super) {
    __extends(ChatView, _super);

    function ChatView() {
      return ChatView.__super__.constructor.apply(this, arguments);
    }

    ChatView.prototype.newMessage = function() {
      this.background.clearTimeout(this.notifyNewMessageTimerId);
      this.background.clearTimeout(this.notifyNewUnreadMessagesTimerId);
      this.newMessages++;
      return this.notifyNewMessageTimerId = this.background.setTimeout(((function(_this) {
        return function() {
          _this.data.newMessages.set(_this.newMessages);
          _this.background.clearTimeout(_this.notifyNewUnreadMessagesTimerId);
          return _this.notifyNewUnreadMessagesTimerId = _this.background.setTimeout((function() {
            return _this.data.newUnreadMessages.set(_this.newMessages);
          }), 50);
        };
      })(this)), 50);
    };

    ChatView.prototype.init = function() {
      var messages;
      this.newMessages = this.agora.chat.newMessages ? 1 : 0;
      this.agora.chat.messages.observe((function(_this) {
        return function(mutation) {
          if (mutation.type === 'insertion') {
            return _this.newMessage();
          }
        };
      })(this));
      messages = this.clientArray(this.ctx, this.agora.chat.messages, function(obj) {
        return obj;
      });
      return this.data = {
        newMessages: this.clientValue(this.newMessages),
        newUnreadMessages: this.clientValue(this.newMessages),
        messages: messages,
        online: this.clientValue(this.agora.chat.online),
        writingReply: this.clientValue(this.agora.chat.writingReply)
      };
    };

    ChatView.prototype.methods = {
      readNewMessages: function() {
        this.newMessages = 0;
        this.data.newMessages.set(this.newMessages);
        this.data.newUnreadMessages.set(this.newMessages);
        this.background.clearTimeout(this.notifyNewUnreadMessagesTimerId);
        return this.agora.chat.readMessages();
      },
      sendMessage: function(view, message) {
        return this.agora.chat.sendMessage(message);
      },
      writingMessage: function(view, message) {
        return this.agora.chat.setPendingMessage(message);
      }
    };

    return ChatView;

  })(View);
});

//# sourceMappingURL=ChatView.map
