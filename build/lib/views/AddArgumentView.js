// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util', 'underscore'], function(View, Site, Formatter, util, _) {
  var AddArgumentsView;
  return AddArgumentsView = (function(_super) {
    __extends(AddArgumentsView, _super);

    function AddArgumentsView() {
      return AddArgumentsView.__super__.constructor.apply(this, arguments);
    }

    AddArgumentsView.nextId = 0;

    AddArgumentsView.id = function(args) {
      return ++this.nextId;
    };

    AddArgumentsView.prototype.initAsync = function(args, done) {
      return this.resolveObject(args, (function(_this) {
        return function(obj, element) {
          _this.obj = obj;
          _this.element = element;
          _this.data = util["arguments"](_this.ctx, obj);
          return done();
        };
      })(this));
    };

    AddArgumentsView.prototype.methods = {
      add: function(view, pro, against, thought) {
        return this.agora.modelManager.getModel('Argument').create({
          element_type: this.obj.modelName,
          element_id: this.obj.get('id'),
          thought: thought,
          "for": pro,
          against: against,
          timestamp: new Date()
        });
      },
      "delete": function(view, id) {
        return this.agora.modelManager.getInstance('Argument', id)["delete"]();
      }
    };

    return AddArgumentsView;

  })(View);
});

//# sourceMappingURL=AddArgumentView.map
