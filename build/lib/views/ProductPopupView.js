// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['View', 'Site', 'Formatter', 'util', 'underscore'], function(View, Site, Formatter, util, _) {
  var ProductPopupView;
  return ProductPopupView = (function(superClass) {
    extend(ProductPopupView, superClass);

    function ProductPopupView() {
      return ProductPopupView.__super__.constructor.apply(this, arguments);
    }

    ProductPopupView.nextId = 0;

    ProductPopupView.id = function(args) {
      return ++this.nextId;
    };

    ProductPopupView.prototype.initAsync = function(args, done) {
      return this.resolveObject(args, (function(_this) {
        return function(product1, element) {
          var selected, site, updateSelected;
          _this.product = product1;
          _this.element = element;
          if (_this.product) {
            _this.product.update();
            site = Site.site(_this.product._get('siteName'));
            _this.data = {
              title: _this.clientValue(_this.product.field('title'), _this.product.displayValue('title')),
              site: {
                name: _this.product.get('siteName'),
                url: _this.product.get('siteUrl'),
                icon: site.icon
              },
              price: _this.clientValue(_this.product.field('price'), _this.product.displayValue('price')),
              image: _this.clientValue(_this.product.field('image'), _this.product.displayValue('image')),
              url: _this.product.get('url'),
              lastFeeling: util.lastFeeling(_this.ctx, _this.product),
              lastArgument: util.lastArgument(_this.ctx, _this.product)
            };
            if (site.hasFeature('rating')) {
              _.extend(_this.data, {
                rating: _this.clientValue(_this.product.field('rating'), _this.product.displayValue('rating')),
                ratingCount: _this.clientValue(_this.product.field('ratingCount'), _this.product.displayValue('ratingCount'))
              });
            }
            if (args.decisionId) {
              selected = _this.clientValueNamed('selected');
              _this.decision = _this.agora.modelManager.getInstance('Decision', args.decisionId);
              updateSelected = function() {
                return selected.set(_this.decision.get('selection').contains(_this.element));
              };
              updateSelected();
              _this.decision.get('selection').observe(updateSelected);
              _this.data.selected = selected;
            }
          }
          return done();
        };
      })(this));
    };

    ProductPopupView.prototype.methods = {
      remove: function() {
        var Bag, Product, bag, product;
        Bag = this.agora.modelManager.getModel('Bag');
        Product = this.agora.modelManager.getModel('Product');
        bag = Bag.withId(this.args.bagId);
        product = Product.getBySid(this.args.siteName, this.args.productSid);
        return this.agora.removeFromBag(product, bag);
      },
      setSelected: function(view, selected) {
        if (this.decision) {
          if (selected) {
            _activity('decision.select', this.decision, this.element.get('element'));
            return this.decision.get('selection').add(this.element);
          } else {
            this.decision.get('selection').remove(this.element);
            return _activity('decision.deselect', this.decision, this.element.get('element'));
          }
        }
      },
      dismiss: function() {
        if (this.decision) {
          return util.dismissDecisionElement(this.decision, this.element);
        }
      }
    };

    return ProductPopupView;

  })(View);
});

//# sourceMappingURL=ProductPopupView.js.map
