// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util'], function(View, Site, Formatter, util) {
  var ReviewsView;
  return ReviewsView = (function(_super) {
    __extends(ReviewsView, _super);

    function ReviewsView() {
      return ReviewsView.__super__.constructor.apply(this, arguments);
    }

    ReviewsView.nextId = 0;

    ReviewsView.id = function(args) {
      return ++this.nextId;
    };

    ReviewsView.prototype.initAsync = function(args, done) {
      return this.resolveObject(args, (function(_this) {
        return function(product) {
          _this.product = product;
          _this.data = _this.clientValue();
          return product["interface"](function(productIface) {
            var updateData;
            updateData = function() {
              return productIface.reviews(function(data) {
                var review, reviewContent, reviews, _i, _len, _ref, _ref1, _ref2;
                reviews = [];
                if (data) {
                  if (data.reviews) {
                    _ref = data.reviews;
                    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                      review = _ref[_i];
                      reviewContent = util.stripHtml((_ref1 = review.review) != null ? _ref1 : review.content, []);
                      if (reviewContent.length > 200) {
                        reviewContent = reviewContent.substr(0, 200) + '...';
                      }
                      reviews.push({
                        url: review.url ? util.url(review.url) : product.get('url'),
                        rating: parseInt(review.rating),
                        title: (_ref2 = review.title) != null ? _ref2 : '',
                        review: reviewContent
                      });
                    }
                  }
                }
                return _this.data.set({
                  reviews: reviews,
                  url: (data.url ? util.url(data.url) : product.get('url')),
                  count: data.count
                });
              });
            };
            product.field('reviews').observe(updateData);
            updateData();
            return done();
          });
        };
      })(this));
    };

    return ReviewsView;

  })(View);
});

//# sourceMappingURL=ReviewsView.map
