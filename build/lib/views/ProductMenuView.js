// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['View', 'Site', 'Formatter', 'util'], function(View, Site, Formatter, util) {
  var ProductMenuView;
  return ProductMenuView = (function(superClass) {
    extend(ProductMenuView, superClass);

    function ProductMenuView() {
      return ProductMenuView.__super__.constructor.apply(this, arguments);
    }

    ProductMenuView.nextId = 0;

    ProductMenuView.id = function(args) {
      return ++this.nextId;
    };

    ProductMenuView.prototype.initAsync = function(args, done) {
      return this.resolveObject(args, (function(_this) {
        return function(product) {
          var site;
          _this.product = product;
          site = Site.site(_this.product._get('siteName'));
          _this.data = {
            features: site.features,
            lastFeeling: util.lastFeeling(_this.ctx, _this.product),
            lastArgument: util.lastArgument(_this.ctx, _this.product)
          };
          return done();
        };
      })(this));
    };

    ProductMenuView.client = function() {
      return ProductMenuView = (function(superClass1) {
        extend(ProductMenuView, superClass1);

        function ProductMenuView() {
          return ProductMenuView.__super__.constructor.apply(this, arguments);
        }

        ProductMenuView.prototype.type = 'ProductMenu';

        ProductMenuView.prototype.init = function(el, opts) {
          var html, makePopup, num;
          if (opts == null) {
            opts = {};
          }
          this["public"] = opts["public"];
          this.el = el;
          html = '<!--<div class="item priceComparison"><a href="#">See more prices</a></div>--> <!--<div class="item coupons"><a href="#">See coupons and deals</a></div>--> <div class="item reviews"><a href="#">Reviews</a></div> <!--<div class="item watch"><a href="#">Watch</a></div>-->';
          if (!this["public"]) {
            html += '<div class="item feelings"><a href="#">Feelings</a></div> <!--<div class="item arguments"><a href="#">Arguments</a></div>--> <div class="item attachments"><a href="#">Clipped content</a></div>';
          }
          this.el.html(html);
          this.el.addClass('v-productMenu');
          this.orientation = opts.orientation;
          if (opts.orientation === 'horizontal') {
            this.el.addClass('horizontal');
          }
          el = this.el;
          makePopup = opts.orientation === 'horizontal' ? (num = 0, (function(_this) {
            return function(triggerEl, viewName, popupOpts) {
              if (popupOpts == null) {
                popupOpts = {};
              }
              return util.popupTrigger(triggerEl, {
                createPopup: function(cb, close) {
                  var view;
                  view = _this.createView(viewName);
                  view.represent(_this.args, function() {
                    var frame, position, updateFrame;
                    view.close = function(esc) {
                      close();
                      console.debug('poop');
                      return typeof opts.removeEl === "function" ? opts.removeEl(frame.el) : void 0;
                    };
                    position = triggerEl.offset().top - $(window).scrollTop() < ($(window).height()) / 3 ? 'below' : 'above';
                    updateFrame = function() {
                      var adjust, height, pos;
                      adjust = util.isFixed(triggerEl) ? $(window).scrollTop() : 0;
                      if (position === 'above') {
                        if (frame.el.offset().top < $(window).scrollTop()) {
                          pos = frame.el.offset().top + frame.el.height();
                          height = pos - ($(window).scrollTop() + 40);
                          frame.el.find('.cont').css({
                            height: height
                          });
                          return frame.el.css({
                            top: pos - frame.el.height() - adjust
                          });
                        }
                      } else if (position === 'below') {
                        if (frame.el.offset().top + frame.el.height() > $(window).scrollTop() + $(window).height()) {
                          height = $(window).scrollTop() + $(window).height() - frame.el.offset().top - 40;
                          return frame.el.find('.cont').css({
                            height: height
                          });
                        }
                      }
                    };
                    frame = Frame.frameAbove(triggerEl, view.el, {
                      type: 'balloon',
                      color: 'dark',
                      position: position,
                      onClose: function() {
                        view.destruct();
                        return view = null;
                      }
                    });
                    updateFrame();
                    view.sizeChanged = function() {
                      frame.update();
                      return updateFrame();
                    };
                    if (typeof opts.addEl === "function") {
                      opts.addEl(frame.el);
                    }
                    cb(frame.el);
                    tracking.page(view.path());
                    return view.shown();
                  });
                  if (typeof opts.pinSidebar === "function") {
                    opts.pinSidebar();
                  }
                  triggerEl.addClass('active');
                  num++;
                  return null;
                },
                onClose: function(el) {
                  var ref;
                  if (typeof opts.removeEl === "function") {
                    opts.removeEl(el);
                  }
                  if (!--num) {
                    if (typeof opts.unpinSidebar === "function") {
                      opts.unpinSidebar();
                    }
                  }
                  console.debug('closed', (ref = el.data('frame')) != null ? typeof ref.close === "function" ? ref.close() : void 0 : void 0);
                  return triggerEl.removeClass('active');
                }
              });
            };
          })(this)) : (num = 0, (function(_this) {
            return function(triggerEl, viewName, popupOpts) {
              if (popupOpts == null) {
                popupOpts = {};
              }
              return util.popoutTrigger(triggerEl, {
                side: 'left',
                anchor: popupOpts.anchor,
                el: function(cb, funcs) {
                  var view;
                  ++num;
                  view = _this.createView(viewName);
                  view.el.addClass('dark');
                  return view.represent(_this.args, function() {
                    var close, ref, updatePos;
                    view.close = function(esc) {
                      if (esc) {
                        funcs.unpin();
                        --num;
                        if (!num) {
                          if (typeof opts.unpinSidebar === "function") {
                            opts.unpinSidebar();
                          }
                        }
                        return close();
                      }
                    };
                    tracking.page(view.path());
                    view.shown();
                    ref = cb(view.el, function() {
                      return view.destruct();
                    }), updatePos = ref[0], close = ref[1];
                    return view.sizeChanged = updatePos;
                  });
                }
              });
            };
          })(this));
          makePopup(this.el.find('.reviews'), 'ReviewsView', {
            anchor: 'top'
          });
          makePopup(this.el.find('.feelings'), 'AddFeelingView');
          makePopup(this.el.find('.arguments'), 'AddArgumentView');
          return makePopup(this.el.find('.attachments'), 'DataView');
        };

        ProductMenuView.prototype.shown = function() {
          return setTimeout(((function(_this) {
            return function() {
              var el, i, len, margin, ref, results, size, w;
              size = _this.el.width() / _this.el.find('.item').length;
              if (_this.orientation === 'horizontal') {
                w = 0;
                ref = _this.el.find('.item');
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  el = ref[i];
                  margin = (size - $(el).width()) / 2;
                  w += margin * 2 + $(el).width();
                  results.push($(el).css({
                    marginLeft: margin,
                    marginRight: margin
                  }));
                }
                return results;
              }
            };
          })(this)), 0);
        };

        ProductMenuView.prototype.onData = function(data) {
          var lastArgument, lastEmotion, updateForLastArgument, updateForLastFeeling;
          if (!_.contains(data.features, 'offers')) {
            this.el.find('.priceComparison').remove();
          }
          if (!_.contains(data.features, 'deals')) {
            this.el.find('.coupons').remove();
          }
          if (!_.contains(data.features, 'reviews')) {
            this.el.find('.reviews').remove();
          }
          if (!_.contains(data.features, 'priceWatch')) {
            this.el.find('.watch').remove();
          }
          setTimeout(((function(_this) {
            return function() {
              var el, i, len, margin, ref, results, size, w;
              size = _this.el.width() / _this.el.find('.item').length;
              if (_this.orientation === 'horizontal') {
                w = 0;
                ref = _this.el.find('.item');
                results = [];
                for (i = 0, len = ref.length; i < len; i++) {
                  el = ref[i];
                  margin = (size - $(el).width()) / 2;
                  w += margin * 2 + $(el).width();
                  results.push($(el).css({
                    marginLeft: margin,
                    marginRight: margin
                  }));
                }
                return results;
              }
            };
          })(this)), 0);
          lastEmotion = null;
          updateForLastFeeling = (function(_this) {
            return function() {
              var emotionClass;
              if (lastEmotion) {
                _this.el.find('.feelings').removeClass(lastEmotion);
              }
              if (data.lastFeeling.get()) {
                emotionClass = util.emotionClass(data.lastFeeling.get().positive, data.lastFeeling.get().negative);
                _this.el.find('.feelings').addClass(emotionClass);
                return lastEmotion = emotionClass;
              } else {
                return lastEmotion = null;
              }
            };
          })(this);
          data.lastFeeling.observe(updateForLastFeeling);
          updateForLastFeeling();
          lastArgument = null;
          updateForLastArgument = (function(_this) {
            return function() {
              var positionClass;
              if (lastArgument) {
                _this.el.find('.arguments').removeClass(lastArgument);
              }
              if (data.lastArgument.get()) {
                positionClass = util.positionClass(data.lastArgument.get()["for"], data.lastArgument.get().against);
                _this.el.find('.arguments').addClass(positionClass);
                return lastArgument = positionClass;
              } else {
                return lastArgument = null;
              }
            };
          })(this);
          data.lastArgument.observe(updateForLastArgument);
          return updateForLastArgument();
        };

        return ProductMenuView;

      })(View);
    };

    return ProductMenuView;

  })(View);
});

//# sourceMappingURL=ProductMenuView.js.map
