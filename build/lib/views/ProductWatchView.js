// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util', 'underscore'], function(View, Site, Formatter, util, _) {
  var ProductPopupView;
  return ProductPopupView = (function(_super) {
    __extends(ProductPopupView, _super);

    function ProductPopupView() {
      return ProductPopupView.__super__.constructor.apply(this, arguments);
    }

    ProductPopupView.nextId = 0;

    ProductPopupView.id = function(args) {
      return ++this.nextId;
    };

    ProductPopupView.prototype.initAsync = function(args, done) {
      return this.resolveObject(args, (function(_this) {
        return function(product, element) {
          _this.product = product;
          _this.element = element;
          if (_this.product) {
            _this.productWatch = _this.agora.modelManager.getModel('ProductWatch').find({
              product_id: _this.product.productId()
            });
            _this.data = _this.productWatch ? {
              conditionOption: _this.product.get('siteName') === 'Amazon',
              enableThreshold: _this.productWatch.get('enable_threshold'),
              enableIncrement: _this.productWatch.get('enable_increment'),
              enableStock: _this.productWatch.get('enable_stock'),
              condition: (function() {
                switch (this.productWatch.get('watch_condition')) {
                  case 0:
                    return 'listing';
                  case 1:
                    return 'new';
                  case 2:
                    return 'refurbished';
                  case 3:
                    return 'used';
                }
              }).call(_this),
              threshold: _this.productWatch.get('watch_threshold'),
              increment: _this.productWatch.get('watch_increment')
            } : {
              conditionOption: _this.product.get('siteName') === 'Amazon',
              enableThreshold: false,
              enableIncrement: false,
              enableStock: false,
              condition: 'listing',
              threshold: '',
              increment: ''
            };
          }
          return done();
        };
      })(this));
    };

    ProductPopupView.prototype.methods = {
      submit: function(view, data) {
        if (!this.productWatch) {
          this.productWatch = this.agora.modelManager.getModel('ProductWatch').create({
            product_id: this.product.productId()
          });
        }
        this.productWatch.set('watch_condition', (function() {
          switch (data.condition) {
            case 'listing':
              return 0;
            case 'new':
              return 1;
            case 'refurbished':
              return 2;
            case 'used':
              return 3;
          }
        })());
        this.productWatch.set('enable_stock', data.enableStock);
        this.productWatch.set('enable_threshold', data.enableThreshold);
        this.productWatch.set('enable_increment', data.enableIncrement);
        this.productWatch.set('watch_increment', data.increment);
        return this.productWatch.set('watch_threshold', data.threshold);
      }
    };

    return ProductPopupView;

  })(View);
});

//# sourceMappingURL=ProductWatchView.map
