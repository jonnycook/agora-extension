// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util', 'underscore', './BarItem'], function(View, Site, Formatter, util, _, BarItem) {
  var BeltBarItem;
  return BeltBarItem = (function(_super) {
    __extends(BeltBarItem, _super);

    function BeltBarItem() {
      return BeltBarItem.__super__.constructor.apply(this, arguments);
    }

    BeltBarItem.prototype.init = function() {
      var count, updateCount;
      count = this.itemView.clientValue();
      updateCount = (function(_this) {
        return function() {
          return count.set(_this.obj.get('elements').length());
        };
      })(this);
      this.observe(this.obj.get('elements'), updateCount);
      updateCount();
      return this.data = {
        type: 'Belt',
        barItemData: {
          shared: this.ctx.clientValue(this.obj.field('shared')),
          preview: util.listPreview(this.ctx, this.obj.get('elements')),
          count: count
        }
      };
    };

    BeltBarItem.prototype.dropped = function(obj) {
      obj = util.resolveObject(obj);
      this.obj.get('contents').add(obj);
      return _activity('add', this.obj, obj);
    };

    BeltBarItem.prototype.methods = {
      click: function() {
        return util.shoppingBar.pushBeltState(this.obj);
      }
    };

    return BeltBarItem;

  })(BarItem);
});

//# sourceMappingURL=BeltBarItem.map
