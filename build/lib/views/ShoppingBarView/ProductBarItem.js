// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['View', 'Site', 'Formatter', 'util', 'underscore', './BarItem'], function(View, Site, Formatter, util, _, BarItem) {
  var ProductBarItem;
  return ProductBarItem = (function(superClass) {
    extend(ProductBarItem, superClass);

    function ProductBarItem() {
      return ProductBarItem.__super__.constructor.apply(this, arguments);
    }

    ProductBarItem.prototype.init = function() {
      var product;
      if (this.obj) {
        product = this.obj;
        return this.data = {
          type: 'Product',
          barItemData: {
            id: product.get('id'),
            title: this.ctx.clientValueNamed('ProductBarItem.title', product.field('title'), product.displayValue('title')),
            site: {
              name: product.get('siteName'),
              url: product.get('siteUrl')
            },
            price: this.ctx.clientValueNamed('ProductBarItem.price', product.field('price'), product.displayValue('price')),
            image: this.ctx.clientValueNamed('ProductBarItem.image', product.field('image'), product.displayValue('image')),
            url: product.get('url'),
            sid: product.get('productSid'),
            lastFeeling: util.lastFeeling(this.ctx, product),
            status: this.ctx.clientValue(product.field('status')),
            purchased: this.ctx.clientValue(product.field('purchased'))
          }
        };
      }
    };

    ProductBarItem.prototype.dropped = function(obj) {
      var decision, list;
      tracking.event('ShoppingBar', 'createDecision');
      obj = util.resolveObject(obj);
      list = this.itemView.agora.modelManager.getModel('List').create();
      list.get('contents').add(this.obj);
      list.get('contents').add(obj);
      if (this.itemView.descriptor) {
        list.set('descriptor', this.itemView.descriptor.get('descriptor'));
      }
      decision = this.itemView.agora.modelManager.getModel('Decision').create({
        list_id: list.get('id')
      });
      _activity('convert', this.itemView.element, this.obj, obj, decision);
      return decision;
    };

    ProductBarItem.prototype.methods = {
      click: function() {}
    };

    return ProductBarItem;

  })(BarItem);
});

//# sourceMappingURL=ProductBarItem.js.map
