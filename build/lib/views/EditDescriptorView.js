// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['View', 'Site', 'Formatter', 'util', 'underscore'], function(View, Site, Formatter, util, _) {
  var EditDescriptorView;
  return EditDescriptorView = (function(superClass) {
    extend(EditDescriptorView, superClass);

    function EditDescriptorView() {
      return EditDescriptorView.__super__.constructor.apply(this, arguments);
    }

    EditDescriptorView.nextId = 0;

    EditDescriptorView.id = function(args) {
      return ++this.nextId;
    };

    EditDescriptorView.prototype.initAsync = function(args, done) {
      var init;
      init = (function(_this) {
        return function() {
          var descriptor, ref;
          descriptor = (ref = _this.decision.get('list').get('descriptor')) != null ? ref : {};
          descriptor.version = 0;
          _this.data = _this.clientValue(descriptor);
          _this.version = 0;
          _this.parsing = 0;
          return done();
        };
      })(this);
      if (!_.isPlainObject(args)) {
        this.decision = this.agora.modelManager.getInstance('Decision', this.args);
        return init();
      } else {
        return this.resolveObject(args, (function(_this) {
          return function(decision) {
            _this.decision = decision;
            return init();
          };
        })(this));
      }
    };

    EditDescriptorView.prototype.methods = {
      parse: function(view, descriptor1, update) {
        this.descriptor = descriptor1;
        this.parsing++;
        return this.agora.background.httpRequest(this.agora.background.apiRoot + "parse.php", {
          data: {
            descriptor: descriptor
          },
          cb: (function(_this) {
            return function(response) {
              --_this.parsing;
              if (_this.shouldUpdate || update) {
                response.descriptor = _this.descriptor;
                _this.decision.get('list').set('descriptor', response);
                return _activity('decision.setDescriptor', _this.decision, response);
              } else {
                _this.lastDescriptor = response;
                response.version = _this.version++;
                return _this.data.set(response);
              }
            };
          })(this)
        });
      },
      updateDescriptor: function(view, descriptor) {
        if (descriptor.version === this.version && !this.parsing) {
          delete descriptor.version;
          this.decision.get('list').set('descriptor', descriptor);
          return _activity('decision.setDescriptor', this.decision, descriptor);
        } else {
          if (this.parsing) {
            return this.shouldUpdate = true;
          } else {
            delete this.lastDescriptor.version;
            this.lastDescriptor.descriptor = this.descriptor;
            this.decision.get('list').set('descriptor', this.lastDescriptor);
            return _activity('decision.setDescriptor', this.decision, this.lastDescriptor);
          }
        }
      }
    };

    return EditDescriptorView;

  })(View);
});

//# sourceMappingURL=EditDescriptorView.js.map
