// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util', 'underscore', 'model/ObservableValue'], function(View, Site, Formatter, util, _, ObservableValue) {
  var ShoppingBarView;
  return ShoppingBarView = (function(_super) {
    __extends(ShoppingBarView, _super);

    function ShoppingBarView() {
      window.shoppingBarView = this;
      ShoppingBarView.__super__.constructor.apply(this, arguments);
    }

    ShoppingBarView.prototype.setUser = function(user) {
      if (this.unseenSharedObjectsCount) {
        this.unseenSharedObjectsCount.destruct();
      }
      this.user = user;
      if (user) {
        this.unseenSharedObjectsCount = this.clientValue(this.agora.user.get('unseenSharedWithMe').length());
        this.agora.user.get('unseenSharedWithMe').observe((function(_this) {
          return function(mutation) {
            return _this.unseenSharedObjectsCount.set(mutation.length);
          };
        })(this));
        this.clearState();
        return util.shoppingBar.pushRootState(this.user);
      }
    };

    ShoppingBarView.prototype.init = function() {
      this.shareObject = new ObservableValue();
      this.path = [];
      this.ctx = this.context();
      this.data = {};
      this.updaterStatus = this.clientValue(this.agora.updater.status);
      this.updaterMessage = this.clientValue(this.agora.updater.message);
      this.barContentsData = this.clientValue();
      this.isShared = this.ctx.clientValue(this.shareObject, function(value) {
        return value && value.isShared;
      });
      this.setUser(this.agora.user);
      return this.data = {
        updaterStatus: this.updaterStatus,
        updaterMessage: this.updaterMessage,
        barContents: this.barContentsData,
        unseenSharedObjectsCount: this.unseenSharedObjectsCount
      };
    };

    ShoppingBarView.prototype.currentState = function() {
      return this.path[this.path.length - 1];
    };

    ShoppingBarView.prototype.updateShareObject = function() {
      var i, isShared, object, shareObject, _i, _ref;
      object = null;
      for (i = _i = _ref = this.path.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        if (this.path[i].isShared()) {
          object = this.path[i].shareObject();
          break;
        }
      }
      isShared = null;
      if (object) {
        isShared = true;
      } else {
        isShared = false;
        object = this.currentState().shareObject();
      }
      shareObject = {
        isShared: isShared,
        object: object
      };
      if (!_.isEqual(this.shareObject.get(), shareObject)) {
        return this.shareObject.set(shareObject);
      }
    };

    ShoppingBarView.prototype.initState = function(state) {
      var clientContents, _ref, _ref1;
      if (this.stateCtx) {
        this.stateCtx.destruct();
      }
      this.stateCtx = this.ctx.context();
      clientContents = this.clientArray(this.stateCtx, state.contents(), state.contentMap);
      this.updateShareObject();
      if (this.displaying) {
        util.unsync(this.displaying);
      }
      this.displaying = clientContents;
      return this.barContentsData.set({
        moveUp: (_ref = state.moveUp) != null ? _ref : this.path.length > 1,
        contents: clientContents,
        state: state.state,
        args: state.args,
        direction: (_ref1 = state.direction) != null ? _ref1 : 'ltr',
        shared: this.isShared
      });
    };

    ShoppingBarView.prototype.pushState = function(state) {
      if (!state.state && this.state) {
        state.state = this.state;
      }
      state.shared().observeWithTag(state, (function(_this) {
        return function() {
          return _this.updateShareObject();
        };
      })(this));
      this.path.push(state);
      return this.initState(state);
    };

    ShoppingBarView.prototype.popState = function() {
      this.currentState().shared().stopObservingWithTag(this.currentState());
      this.path.pop();
      return this.initState(this.currentState());
    };

    ShoppingBarView.prototype.clearState = function() {
      return this.path = [];
    };

    ShoppingBarView.prototype.ripped = function(data) {
      return this.currentState().ripped(data);
    };

    ShoppingBarView.prototype.dropped = function(data) {
      return this.currentState().dropped(data);
    };

    ShoppingBarView.prototype.methods = {
      up: function(view) {
        return this.popState();
      },
      move: function(view, elementData, toData, dropAction) {
        var elementView, toView;
        elementView = this.agora.View.clientViews[elementData.view].view;
        elementView["delete"]();
        if (toData === 'up') {
          return this.path[this.path.length - 2].dropped(elementView, dropAction);
        } else {
          toView = this.agora.View.clientViews[toData.view].view;
          return toView.dropped(elementView, dropAction);
        }
      },
      drop: function(view, elementData, onData, dropAction) {
        if (onData === 'up') {
          return this.resolveElements(elementData, (function(_this) {
            return function(element) {
              _this.path[_this.path.length - 2].dropped(element, dropAction);
              if (element.isA('Product') || element.isA('ProductVariant')) {
                return view.callMethod('productAdded', [
                  {
                    modelName: element.modelName,
                    instanceId: element.get('id')
                  }
                ]);
              }
            };
          })(this));
        } else {
          return this.resolveElements(elementData, onData, (function(_this) {
            return function(element, onView) {
              onView.dropped(element, dropAction);
              if (element.isA('Product') || element.isA('ProductVariant')) {
                return view.callMethod('productAdded', [
                  {
                    modelName: element.modelName,
                    instanceId: element.get('id')
                  }
                ]);
              }
            };
          })(this));
        }
      },
      reorder: function(view, fromIndex, toIndex) {
        return util.reorder(this.currentState().contents(), fromIndex, toIndex);
      },
      remove: function(view, elementData, fromData) {
        var elementView, fromView;
        fromView = this.agora.View.clientViews[fromData.view].view;
        elementView = this.agora.View.clientViews[elementData.view].view;
        return fromView.ripped(elementView);
      },
      web: function() {
        var obj;
        obj = this.agora.modelManager.instance('Decision', this.currentState().args.decisionId);
        return chrome.tabs.create({
          url: "http://agora.sh/Agora/webapp.php?decisionId=" + (obj.record.globalId())
        });
      },
      wrap: function(view, type, selection) {
        var cont, element, obj, parent, viewId, _i, _len;
        cont = obj = null;
        if (type === 'decision') {
          cont = this.agora.modelManager.getModel('List').create();
          obj = this.agora.modelManager.getModel('Decision').create({
            list_id: cont.get('id')
          });
        } else {
          obj = cont = (function() {
            switch (type) {
              case 'bundle':
                return this.agora.modelManager.getModel('Bundle').create();
              case 'session':
                return this.agora.modelManager.getModel('Session').create({
                  title: 'New Session'
                });
            }
          }).call(this);
        }
        parent = type === 'session' ? null : false;
        for (_i = 0, _len = selection.length; _i < _len; _i++) {
          viewId = selection[_i];
          view = this.agora.View.clientViews[viewId].view;
          cont.get('contents').add(view.obj);
          element = view.element;
          if (parent === false || parent !== null) {
            if (element.modelName === 'RootElement') {
              parent = null;
            } else {
              if (parent) {
                if (!element.get('parent').equals(parent)) {
                  parent = null;
                }
              } else {
                parent = element.get('parent');
              }
            }
          }
          view.element["delete"]();
        }
        if (parent === null) {
          return this.dropped(obj);
        } else {
          return parent.get('contents').add(obj);
        }
      },
      "delete": function(view, selection) {
        var viewId, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = selection.length; _i < _len; _i++) {
          viewId = selection[_i];
          _results.push(this.agora.View.clientViews[viewId].view.element["delete"]());
        }
        return _results;
      },
      extract: function(view, selection) {
        var viewId, _i, _len, _results;
        if (this.path.length > 1) {
          _results = [];
          for (_i = 0, _len = selection.length; _i < _len; _i++) {
            viewId = selection[_i];
            view = this.agora.View.clientViews[viewId].view;
            this.path[this.path.length - 2].dropped(view.obj);
            _results.push(view.element["delete"]());
          }
          return _results;
        }
      },
      split: function(view, selection) {
        var cont, decision, viewId, _i, _len;
        if (this.path.length > 1) {
          cont = this.agora.modelManager.getModel('List').create();
          decision = this.agora.modelManager.getModel('Decision').create({
            list_id: cont.get('id')
          });
          for (_i = 0, _len = selection.length; _i < _len; _i++) {
            viewId = selection[_i];
            view = this.agora.View.clientViews[viewId].view;
            cont.get('contents').add(view.obj);
            view.element["delete"]();
          }
          return this.path[this.path.length - 2].dropped(decision);
        }
      }
    };

    return ShoppingBarView;

  })(View);
});

//# sourceMappingURL=ShoppingBarView.map
