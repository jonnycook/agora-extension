// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter'], function(View, Site, Formatter) {
  var OffersView;
  return OffersView = (function(_super) {
    __extends(OffersView, _super);

    function OffersView() {
      return OffersView.__super__.constructor.apply(this, arguments);
    }

    OffersView.nextId = 0;

    OffersView.id = function(args) {
      return ++this.nextId;
    };

    OffersView.prototype.initAsync = function(args, done) {
      return this.resolveObject(args, (function(_this) {
        return function(product) {
          var offers, selectedOffer, updateOffers, updateSelectedOffer;
          _this.product = product;
          product.retrieve('offers');
          updateOffers = function() {
            var cheapest, condition, heading, i, o, offer, productOffers, theseOffers, viewOffers, _i, _j, _len, _len1, _ref, _ref1;
            if (product.get('offers')) {
              productOffers = product.get('offers');
              viewOffers = [];
              _ref = ['new', 'used', 'refurbished'];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                condition = _ref[_i];
                if (productOffers[condition]) {
                  theseOffers = productOffers[condition];
                  cheapest = theseOffers[0];
                  heading = condition.substr(0, 1).toUpperCase() + condition.substr(1);
                  heading += " (" + (Formatter.price(cheapest.price)) + ")";
                  o = {
                    heading: heading,
                    offers: []
                  };
                  for (i = _j = 0, _len1 = theseOffers.length; _j < _len1; i = ++_j) {
                    offer = theseOffers[i];
                    o.offers.push({
                      id: "" + condition + "." + i,
                      data: offer,
                      price: Formatter.price(offer.price),
                      site: offer.site,
                      url: offer.url,
                      title: offer.title,
                      image: offer != null ? (_ref1 = offer.images) != null ? _ref1[0] : void 0 : void 0,
                      api: offer.api
                    });
                  }
                  viewOffers.push(o);
                }
              }
              offers.set(viewOffers);
              return updateSelectedOffer();
            }
          };
          updateSelectedOffer = function() {
            var condition, i, offer, productOffers, theseOffers, _i, _j, _len, _len1, _ref;
            if (product.get('offers') && product.get('offer')) {
              productOffers = product.get('offers');
              _ref = ['new', 'used', 'refurbished'];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                condition = _ref[_i];
                if (productOffers[condition]) {
                  theseOffers = productOffers[condition];
                  for (i = _j = 0, _len1 = theseOffers.length; _j < _len1; i = ++_j) {
                    offer = theseOffers[i];
                    if (offer.url === product.get('offer').url && offer.price === product.get('offer').price) {
                      selectedOffer.set("" + condition + "." + i);
                      return;
                    }
                  }
                }
              }
            }
            return selectedOffer.set(null);
          };
          offers = _this.clientValue();
          selectedOffer = _this.clientValue();
          product.field('offers').observe(updateOffers);
          updateOffers();
          product.field('offer').observe(updateSelectedOffer);
          _this.data = {
            offers: offers,
            selectedOffer: selectedOffer
          };
          return done();
        };
      })(this));
    };

    OffersView.prototype.methods = {
      setOffer: function(view, offer) {
        return this.product.set('offer', {
          site: offer.site,
          url: offer.url,
          price: offer.price
        });
      }
    };

    return OffersView;

  })(View);
});

//# sourceMappingURL=OffersView.map
