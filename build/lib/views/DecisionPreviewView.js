// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util', 'underscore', 'taxonomy'], function(View, Site, Formatter, util, _, taxonomy) {
  var DecisionPreviewView;
  return DecisionPreviewView = (function(_super) {
    __extends(DecisionPreviewView, _super);

    function DecisionPreviewView() {
      return DecisionPreviewView.__super__.constructor.apply(this, arguments);
    }

    DecisionPreviewView.nextId = 0;

    DecisionPreviewView.id = function(args) {
      return ++this.nextId;
    };

    DecisionPreviewView.prototype.initAsync = function(args, done) {
      return this.resolveObject(args, (function(_this) {
        return function(decision) {
          var descriptor, listSize, selection, selectionSize, updateListSize, updateSelectionSize;
          _this.decision = decision;
          listSize = _this.clientValueNamed('listSize');
          updateListSize = function() {
            return listSize.set(decision.get('list').get('contents').length());
          };
          _this.observeObject(decision.get('list').get('contents'), updateListSize);
          updateListSize();
          selectionSize = _this.clientValueNamed('selectionSize');
          updateSelectionSize = function() {
            return selectionSize.set(decision.get('selection').length());
          };
          _this.observeObject(decision.get('selection'), updateSelectionSize);
          updateSelectionSize();
          selection = _this.clientArrayNamed("" + decision.modelName + ".selection");
          util.syncArrays(_this.ctx, decision.get('selection'), selection, function(element, onRemove, i) {
            return {
              elementType: element.modelName,
              elementId: element.get('id')
            };
          });
          descriptor = decision.get('list').field('descriptor');
          _this.data = {
            listSize: listSize,
            selectionSize: selectionSize,
            selection: selection,
            preview: util.listPreview(_this.ctx.context(), decision.get('list').get('elements')),
            descriptor: _this.clientValue(descriptor),
            icon: _this.clientValue(descriptor, function() {
              var _ref, _ref1;
              return taxonomy.icon((_ref = descriptor.get()) != null ? (_ref1 = _ref.product) != null ? _ref1.type : void 0 : void 0);
            }),
            shared: _this.ctx.clientValue(decision.field('shared'))
          };
          return done();
        };
      })(this));
    };

    return DecisionPreviewView;

  })(View);
});

//# sourceMappingURL=DecisionPreviewView.map
