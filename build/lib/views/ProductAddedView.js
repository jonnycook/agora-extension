// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['View', 'Site', 'Formatter'], function(View, Site, Formatter) {
  var ProductAddedView;
  return ProductAddedView = (function(superClass) {
    extend(ProductAddedView, superClass);

    function ProductAddedView() {
      return ProductAddedView.__super__.constructor.apply(this, arguments);
    }

    ProductAddedView.id = function(productId) {
      return "Product\#" + productId;
    };

    ProductAddedView.prototype.init = function(productId) {
      var Product, displayPrice, image, price, product, title;
      Product = this.agora.modelManager.getModel('Product');
      this.product = product = Product.withId(productId);
      title = this.clientValue(product.get('title'));
      product.field('title').observe(function(mutation) {
        return title.set(mutation.value);
      });
      price = this.clientValue(product.get('price'));
      product.field('price').observe(function(mutation) {
        return price.set(mutation.value);
      });
      displayPrice = this.clientValue(product.get('displayPrice'));
      product.field('price').observe(function(mutation) {
        return displayPrice.set(product.get('displayPrice'));
      });
      image = this.clientValue(product.get('image'));
      product.field('image').observe(function(mutation) {
        return image.set(mutation.value);
      });
      return this.data = {
        title: title,
        site: {
          name: product.get('siteName'),
          url: product.get('siteUrl')
        },
        price: price,
        displayPrice: displayPrice,
        image: image,
        url: product.get('url')
      };
    };

    ProductAddedView.prototype.getData = function(cb) {
      return cb(View.serializeObject(this.data));
    };

    ProductAddedView.prototype.methods = {
      set: function(view, args) {
        var property, results, value;
        results = [];
        for (property in args) {
          value = args[property];
          results.push(this.product.set(property, value));
        }
        return results;
      }
    };

    return ProductAddedView;

  })(View);
});

//# sourceMappingURL=ProductAddedView.js.map
