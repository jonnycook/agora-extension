// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['View', 'Site', 'Formatter', 'util'], function(View, Site, Formatter, util) {
  var ProductPriceView;
  return ProductPriceView = (function(_super) {
    __extends(ProductPriceView, _super);

    function ProductPriceView() {
      return ProductPriceView.__super__.constructor.apply(this, arguments);
    }

    ProductPriceView.nextId = 0;

    ProductPriceView.id = function(args) {
      return ++this.nextId;
    };

    ProductPriceView.prototype.initAsync = function(args, done) {
      return this.resolveObject(args, (function(_this) {
        return function(product) {
          var currentPrice, offerData, site, update;
          _this.product = product;
          site = Site.site(product._get('siteName'));
          offerData = {};
          offerData.alternative = _this.ctx.clientValue();
          offerData.current = _this.ctx.clientValue();
          currentPrice = null;
          update = null;
          if (__indexOf.call(site.features, 'offers') >= 0) {
            product.retrieve('offers');
            update = function() {
              if (product.get('offer')) {
                currentPrice = product.get('offer').price;
                offerData.current.set({
                  price: product.get('displayUserPrice'),
                  siteName: product.get('offer').site,
                  siteIcon: product.get('offer').url.match('(^https?://[^/]*)')[0] + '/favicon.ico',
                  url: util.url(product.get('offer').url),
                  clear: true
                });
              } else {
                currentPrice = product.get('price');
                offerData.current.set({
                  price: product.get('displayPrice'),
                  siteName: site.name,
                  siteIcon: site.icon,
                  url: product.get('url')
                });
              }
              return product.field('offers')["with"]((function(_this) {
                return function(offers) {
                  var icon, match;
                  if ((offers != null ? offers["new"] : void 0) && parseFloat(offers["new"][0].price) !== parseFloat(currentPrice)) {
                    match = offers["new"][0].url.match('(^https?://[^/]*)');
                    if (!match) {
                      console.log(offers["new"][0].url);
                    }
                    icon = match ? match[0] + '/favicon.ico' : null;
                    return offerData.alternative.set({
                      cheaper: true,
                      price: '$' + util.numberWithCommas(parseFloat(offers["new"][0].price).toFixed(2)),
                      siteName: offers["new"][0].site,
                      siteIcon: icon,
                      url: util.url(offers["new"][0].url)
                    });
                  } else {
                    offerData.current.get().cheaper = true;
                    offerData.current.trigger();
                    return offerData.alternative.set(null);
                  }
                };
              })(this));
            };
          } else {
            update = function() {
              currentPrice = product.get('price');
              return offerData.current.set({
                price: product.get('displayPrice'),
                siteName: site.name,
                siteIcon: site.icon,
                url: product.get('url'),
                cheaper: true
              });
            };
          }
          update();
          if (__indexOf.call(site.features, 'offers') >= 0) {
            _this.ctx.observe(product.field('offer'), update);
          }
          _this.ctx.observe(product.field('price'), update);
          _this.data = offerData;
          return done();
        };
      })(this));
    };

    ProductPriceView.prototype.methods = {
      chooseAlternative: function(view) {
        return this.product.field('offers')["with"]((function(_this) {
          return function(offers) {
            return _this.product.set('offer', {
              url: util.url(offers["new"][0].url),
              site: offers["new"][0].site,
              price: offers["new"][0].price
            });
          };
        })(this));
      },
      clear: function() {
        return this.product.set('offer', null);
      }
    };

    ProductPriceView.client = function() {
      return ProductPriceView = (function(_super1) {
        __extends(ProductPriceView, _super1);

        function ProductPriceView() {
          return ProductPriceView.__super__.constructor.apply(this, arguments);
        }

        ProductPriceView.prototype.type = 'ProductPrice';

        ProductPriceView.prototype.init = function(el) {
          this.useEl(el);
          this.el.addClass('v-productPrice');
          this.el.html('<span class="current offer"><a target="_blank" class="icon" /> <span class="price" /> <span class="clear" /></span>');
          return this.el.find('.clear').click((function(_this) {
            return function() {
              _this.event('clear');
              return _this.callBackgroundMethod('clear');
            };
          })(this));
        };

        ProductPriceView.prototype.onData = function(data) {
          var offers, updateAlternative, updateCurrent;
          offers = data;
          updateCurrent = (function(_this) {
            return function() {
              var current;
              current = offers.current.get();
              util.tooltip(_this.el.find('.current .icon').css('backgroundImage', "url(" + current.siteIcon + ")"), current.siteName);
              _this.el.find('.current .price').html(current.price);
              _this.el.find('.current .icon').attr('href', current.url);
              if (current.cheaper) {
                _this.el.find('.current').addClass('cheaper');
              } else {
                _this.el.find('.current').removeClass('cheaper');
              }
              if (current.clear) {
                return _this.el.find('.current .clear').css({
                  display: ''
                });
              } else {
                return _this.el.find('.current .clear').css({
                  display: 'none'
                });
              }
            };
          })(this);
          updateAlternative = (function(_this) {
            return function() {
              var alternative;
              alternative = offers.alternative.get();
              _this.el.find('.alternative').remove();
              if (alternative) {
                _this.el.append('<span class="alternative offer"><a target="_blank" class="icon" /><span class="price" /></span>');
                if (alternative.cheaper) {
                  _this.el.find('.alternative').addClass('cheaper');
                }
                util.tooltip(_this.el.find('.alternative .icon').css('backgroundImage', "url(" + alternative.siteIcon + ")"), alternative.siteName);
                _this.el.find('.alternative .price').html(alternative.price);
                _this.el.find('.alternative .icon').attr('href', alternative.url);
                return _this.el.find('.alternative .price').click(function() {
                  _this.event('chooseAlternative');
                  return _this.callBackgroundMethod('chooseAlternative');
                });
              }
            };
          })(this);
          updateCurrent();
          offers.current.observe(updateCurrent);
          updateAlternative();
          return offers.alternative.observe(updateAlternative);
        };

        return ProductPriceView;

      })(View);
    };

    return ProductPriceView;

  })(View);
});

//# sourceMappingURL=ProductPriceView.map
