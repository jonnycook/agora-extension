// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['View', 'Site', 'Formatter', 'util', 'underscore'], function(View, Site, Formatter, util, _) {
  var ShareView;
  return ShareView = (function(superClass) {
    extend(ShareView, superClass);

    function ShareView() {
      return ShareView.__super__.constructor.apply(this, arguments);
    }

    ShareView.nextId = 0;

    ShareView.id = function(args) {
      return ++this.nextId;
    };

    ShareView.prototype.udpateEntries = function() {
      var entries;
      entries = [];
      this.agora.db.tables.shared_objects.records.each((function(_this) {
        return function(record) {
          if (record.get('user_id') === _this.agora.user.get('id') && record.get('object') === _this.object) {
            return entries.push(_.extend(_.clone(record._values), {
              id: record.globalId()
            }));
          }
        };
      })(this));
      return this.entries.set(entries);
    };

    ShareView.prototype.initAsync = function(args, done) {
      var getObject, init;
      getObject = (function(_this) {
        return function(tableName, id) {
          var ref, ref1, ref2, table;
          table = _this.agora.db.table(tableName);
          id = (ref = (ref1 = _this.agora.db.globalToLocalMapping) != null ? (ref2 = ref1[tableName]) != null ? ref2[id] : void 0 : void 0) != null ? ref : id;
          return table.byId(id);
        };
      })(this);
      init = (function(_this) {
        return function() {
          var belt, decision, id, message, ref, table, title;
          _this.entries = _this.clientValue();
          title = '';
          if (_this.object === '/') {

          } else {
            ref = _this.object.split('.'), table = ref[0], id = ref[1];
            if (table === 'decisions') {
              decision = getObject('decisions', 'G' + id);
              title = decision.get('share_title');
              message = decision.get('share_message');
            } else if (table === 'belts') {
              belt = getObject('belts', 'G' + id);
              title = belt.get('title');
              message = '';
            }
          }
          _this.udpateEntries();
          _this.data = {
            entries: _this.entries,
            status: _this.clientValue(),
            title: title,
            message: message
          };
          _this.observeObject(_this.agora.db.tables.shared_objects.records, function() {
            return _this.udpateEntries();
          });
          return done();
        };
      })(this);
      if (args && args !== 'ShoppingBar') {
        return this.resolveObject(args, (function(_this) {
          return function(obj) {
            var userId;
            userId = null;
            _this.object = obj.isA('Decision') ? "decisions." + (obj.record.globalId().substr(1)) : obj.isA('Belt') ? "belts." + (obj.record.globalId().substr(1)) : obj.isA('ObjectReference') ? obj.get('object') : void 0;
            return init();
          };
        })(this));
      } else {
        this.object = this.agora.View.views.ShoppingBar["null"].currentState().shareObject();
        return init();
      }
    };

    ShareView.prototype.methods = {
      update: function(view, title, message) {
        var params;
        params = {
          object: this.object,
          title: title,
          message: message
        };
        return this.agora.updater.transport.messageStream.sendMessage('message', this.agora.user.saneId(), 'share/update', JSON.stringify(params));
      },
      add: function(view, title, message, email) {
        var params;
        tracking.event('Collaboration', 'add');
        params = {
          "with": email,
          object: this.object,
          title: title,
          message: message
        };
        return this.agora.updater.transport.messageStream.sendMessage('message', this.agora.user.saneId(), 'share/create', JSON.stringify(params));
      },
      "delete": function(view, id) {
        var params;
        tracking.event('Collaboration', 'remove');
        params = {
          id: id.substr(1)
        };
        return this.agora.updater.transport.messageStream.sendMessage('message', this.agora.user.saneId(), 'share/delete', JSON.stringify(params));
      }
    };

    return ShareView;

  })(View);
});

//# sourceMappingURL=ShareView.js.map
