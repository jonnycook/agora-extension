// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util', 'underscore', './Item', 'taxonomy'], function(View, Site, Formatter, util, _, Item, taxonomy) {
  var DecisionItem;
  return DecisionItem = (function(_super) {
    __extends(DecisionItem, _super);

    function DecisionItem() {
      this.dropped = __bind(this.dropped, this);
      return DecisionItem.__super__.constructor.apply(this, arguments);
    }

    DecisionItem.prototype.selectionObj = function(obj) {
      return obj;
    };

    DecisionItem.prototype.init = function(done) {
      var descriptor, listSize, selection, selectionSize, updateListSize, updateSelectionSize;
      listSize = this.itemView.clientValueNamed('listSize');
      updateListSize = (function(_this) {
        return function() {
          return listSize.set(_this.obj.get('list').get('contents').length());
        };
      })(this);
      this.observe(this.obj.get('list').get('contents'), updateListSize);
      updateListSize();
      selectionSize = this.itemView.clientValueNamed('selectionSize');
      updateSelectionSize = (function(_this) {
        return function() {
          return selectionSize.set(_this.obj.get('selection').length());
        };
      })(this);
      this.observe(this.obj.get('selection'), updateSelectionSize);
      updateSelectionSize();
      selection = this.itemView.clientArrayNamed("" + this.obj.modelName + ".selection");
      util.syncArrays(this.ctx, this.obj.get('selection'), selection, (function(_this) {
        return function(element, onRemove, i) {
          return _this.selectionObj({
            elementType: element.modelName,
            elementId: element.get('id')
          });
        };
      })(this));
      descriptor = this.obj.get('list').field('descriptor');
      return this.data = {
        type: 'Decision',
        barItemData: {
          listSize: listSize,
          selectionSize: selectionSize,
          selection: selection,
          preview: util.listPreview(this.ctx.context(), this.obj.get('list').get('elements')),
          descriptor: this.itemView.clientValue(descriptor),
          icon: this.itemView.clientValue(descriptor, function() {
            var _ref, _ref1;
            return taxonomy.icon((_ref = descriptor.get()) != null ? (_ref1 = _ref.product) != null ? _ref1.type : void 0 : void 0);
          }),
          shared: this.ctx.clientValue(this.obj.field('shared'))
        }
      };
    };

    DecisionItem.prototype.dropped = function(element, dropAction) {
      var obj;
      obj = util.resolveObject(element);
      this.obj.get('list').get('contents').add(obj);
      _activity('add', this.obj, obj);
      return null;
    };

    DecisionItem.prototype.methods = {
      click: function() {
        return this.onClick();
      }
    };

    return DecisionItem;

  })(Item);
});

//# sourceMappingURL=DecisionItem.map
