// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['View', 'Formatter', 'util'], function(View, Formatter, util) {
  var ProductOverlayView;
  return ProductOverlayView = (function(superClass) {
    extend(ProductOverlayView, superClass);

    function ProductOverlayView() {
      return ProductOverlayView.__super__.constructor.apply(this, arguments);
    }

    ProductOverlayView.id = function(args) {
      return JSON.stringify(args);
    };

    ProductOverlayView.prototype.init = function(args) {
      var inShoppingBar, lastArgument, lastFeeling, status;
      inShoppingBar = this.clientValue();
      lastFeeling = this.clientValue();
      lastArgument = this.clientValue();
      status = this.clientValue();
      this.data = {
        bagged: inShoppingBar,
        lastFeeling: lastFeeling,
        lastArgument: lastArgument,
        status: status
      };
      return this.agora.product(args, ((function(_this) {
        return function(product) {
          var updateInShoppingBar;
          if (product) {
            updateInShoppingBar = function() {
              var obj;
              obj = product.get('inShoppingBar');
              if (obj) {
                if (_this.agora.user && obj[_this.agora.user.get('id')]) {
                  return inShoppingBar.set(true);
                } else {
                  return inShoppingBar.set(false);
                }
              } else {
                return inShoppingBar.set(false);
              }
            };
            _this.observeObject(product.field('inShoppingBar'), updateInShoppingBar);
            updateInShoppingBar();
            _this.ctx.bind(status, product.field('status'));
            util.lastFeeling(_this.ctx, product, lastFeeling);
            return util.lastArgument(_this.ctx, product, lastArgument);
          }
        };
      })(this)), false);
    };

    return ProductOverlayView;

  })(View);
});

//# sourceMappingURL=ProductOverlayView.js.map
