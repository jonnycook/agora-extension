// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util', 'underscore', 'taxonomy', 'views/ItemView'], function(View, Site, Formatter, util, _, taxonomy, ItemView) {
  var TileItemView;
  return TileItemView = (function(_super) {
    __extends(TileItemView, _super);

    function TileItemView() {
      return TileItemView.__super__.constructor.apply(this, arguments);
    }

    TileItemView.nextId = 1;

    TileItemView.id = function(args) {
      return this.nextId++;
    };

    TileItemView.prototype.itemClass = function(type) {
      return "views/compare/" + type + "TileItem";
    };

    TileItemView.prototype.initAsync = function(args, done) {
      this.compareView = this.agora.View.views['compare/Compare'][args.compareViewId];
      this["public"] = this.compareView;
      return TileItemView.__super__.initAsync.apply(this, arguments);
    };

    TileItemView.prototype.methods = {
      "delete": function() {
        return this["delete"]();
      },
      click: function(view) {
        var _ref, _ref1, _ref2;
        return (_ref = this.item) != null ? (_ref1 = _ref.methods) != null ? (_ref2 = _ref1.click) != null ? _ref2.call(this.item, view) : void 0 : void 0 : void 0;
      },
      reorder: function(view, fromIndex, toIndex) {
        return util.reorder(this.obj.get('contents'), fromIndex, toIndex);
      },
      add: function(view, type) {
        var composite;
        composite = this.agora.modelManager.getModel('Composite').createWithType(type);
        return this.obj.get('contents').add(composite);
      },
      setSelected: function(view, selected) {
        if (this.decision) {
          if (selected) {
            this.decision.get('selection').add(this.element);
            return _activity('decision.select', this.decision, this.element.get('element'));
          } else {
            this.decision.get('selection').remove(this.element);
            return _activity('decision.deselect', this.decision, this.element.get('element'));
          }
        }
      },
      dismiss: function() {
        if (this.decision) {
          return util.dismissDecisionElement(this.decision, this.element);
        }
      },
      deleteFeeling: function(view, id) {
        return this.agora.modelManager.getInstance('Feeling', id)["delete"]();
      },
      deleteArgument: function(view, id) {
        return this.agora.modelManager.getInstance('Argument', id)["delete"]();
      }
    };

    return TileItemView;

  })(ItemView);
});

//# sourceMappingURL=TileItemView.map
