// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util', 'underscore', 'taxonomy', 'model/ObservableValue'], function(View, Site, Formatter, util, _, taxonomy, ObservableValue) {
  var CompareView;
  return CompareView = (function(_super) {
    __extends(CompareView, _super);

    function CompareView() {
      return CompareView.__super__.constructor.apply(this, arguments);
    }

    CompareView.nextId = 1;

    CompareView.id = function(args) {
      return this.nextId++;
    };

    CompareView.prototype.currentDecision = function() {
      var i, _i, _ref;
      for (i = _i = _ref = this.path.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
        if (this.path[i].state === 'Decision') {
          return this.path[i].obj;
        }
      }
    };

    CompareView.prototype.initAsync = function(args, done) {
      var init;
      this.path = [];
      this.ctx = this.context();
      this.data = this.clientValue();
      this["public"] = args["public"];
      init = (function(_this) {
        return function() {
          _this.pushState({
            state: 'Decision',
            dropped: function(element) {
              return _this.decision.get('list').get('contents').add(util.resolveObject(element));
            },
            ripped: function(view) {
              return view.element["delete"]();
            },
            contents: function() {
              if (_this["public"]) {
                return _this.decision.get('listElements');
              } else {
                return _this.decision.get('considering');
              }
            },
            contentMap: function(el) {
              return {
                elementType: 'ListElement',
                elementId: el.get('id'),
                decisionId: _this.decision.get('id')
              };
            },
            args: {
              decisionId: _this.decision.get('id')
            },
            breadcrumb: _this.decision,
            obj: _this.decision
          });
          return done();
        };
      })(this);
      if (args.decision.id) {
        this.decision = this.agora.modelManager.getInstance('Decision', args.decision.id);
        return init();
      } else {
        return this.resolveObject(args.decision, (function(_this) {
          return function(decision) {
            _this.decision = decision;
            return init();
          };
        })(this));
      }
    };

    CompareView.prototype.currentState = function() {
      return this.path[this.path.length - 1];
    };

    CompareView.prototype.initState = function(state) {
      var breadcrumb, breadcrumbs, clientContents, data, decision, updateDescriptor, updateIcon, updateProperties, _i, _len, _ref;
      if (this.stateCtx == null) {
        this.stateCtx = this.context();
      }
      this.stateCtx.clear();
      if (this["public"]) {
        this.displayOptions = new ObservableValue({
          displayComponents: ['title', 'price', 'rating']
        }, true);
      } else {
        this.displayOptions = this.currentState().obj.field('display_options');
      }
      breadcrumbs = [];
      _ref = this.path;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        breadcrumb = _ref[_i].breadcrumb;
        breadcrumbs.push(breadcrumb.modelName === 'Decision' ? util.listPreview(this.stateCtx.context(), breadcrumb.get('list').get('elements')) : breadcrumb.modelName === 'Product' ? this.stateCtx.clientValue(breadcrumb.field('image')) : void 0);
      }
      if (state.state === 'Decision') {
        clientContents = this.stateCtx.clientArray(state.contents(), (function(_this) {
          return function(el) {
            return _.merge(state.contentMap(el), {
              compareViewId: _this.id
            });
          };
        })(this));
        if (this.displaying) {
          util.unsync(this.displaying);
        }
        this.displaying = clientContents;
        data = {
          contents: clientContents,
          state: state.state,
          args: state.args,
          breadcrumbs: breadcrumbs
        };
        if (state.obj.modelName === 'Decision') {
          decision = state.obj;
          data.dismissalList = this.stateCtx.clientArray(decision.get('dismissed'), (function(_this) {
            return function(el, onRemove) {
              var ctx, obj;
              obj = el.get('element');
              if (obj.modelName === 'Product') {
                return obj.get('image');
              } else if (obj.modelName === 'Decision') {
                ctx = _this.stateCtx.context();
                onRemove(function() {
                  return ctx.destruct();
                });
                return util.listPreview(ctx, obj.get('selection'));
              } else if (obj.modelName === 'Bundle') {
                ctx = _this.stateCtx.context();
                onRemove(function() {
                  return ctx.destruct();
                });
                return util.listPreview(ctx, obj.get('elements'));
              }
            };
          })(this));
          data.properties = this.stateCtx.clientValue();
          updateProperties = (function(_this) {
            return function() {
              var Product, count, descriptorProduct, displayOptions, done, product, products, prop, properties, propertyCounts, propertyPaths, _j, _k, _len1, _len2, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _results;
              products = [];
              state.contents().each(function(el) {
                var product, _j, _len1, _ref1, _results;
                _ref1 = util.resolveProducts(el.get('element'));
                _results = [];
                for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                  product = _ref1[_j];
                  _results.push(products.push(product));
                }
                return _results;
              });
              _this.stateCtx.context('properties').destruct();
              properties = [];
              displayOptions = (_ref1 = _this.displayOptions.get()) != null ? _ref1 : {
                displayComponents: []
              };
              _ref2 = [
                {
                  label: 'Title',
                  path: 'title',
                  count: products.length
                }, {
                  label: 'Rating',
                  path: 'rating'
                }, {
                  label: 'Price',
                  path: 'price',
                  count: products.length
                }, {
                  label: 'Feelings',
                  path: 'feelings',
                  count: products.length
                }
              ];
              for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
                prop = _ref2[_j];
                properties.push({
                  path: prop.path,
                  label: prop.label,
                  count: prop.count,
                  selected: _this.stateCtx.context('properties').clientValue(displayOptions.displayComponents.indexOf(prop.path) !== -1)
                });
              }
              data.properties.set(properties);
              descriptorProduct = (_ref3 = (_ref4 = decision.get('list').get('descriptor')) != null ? (_ref5 = _ref4.product) != null ? _ref5.type : void 0 : void 0) != null ? _ref3 : (_ref6 = decision.get('list').get('descriptor')) != null ? _ref6.product : void 0;
              done = function() {
                return setTimeout((function() {
                  var propertyPath, _k, _len2, _ref7;
                  properties[1].count = propertyCounts.rating;
                  for (_k = 0, _len2 = propertyPaths.length; _k < _len2; _k++) {
                    propertyPath = propertyPaths[_k];
                    properties.push({
                      path: propertyPath,
                      label: propertyPath.split('.')[1],
                      selected: _this.stateCtx.context('properties').clientValue(displayOptions.displayComponents.indexOf(propertyPath) !== -1),
                      count: (_ref7 = propertyCounts[propertyPath]) != null ? _ref7 : 0
                    });
                  }
                  return data.properties.set(properties);
                }), 1000);
              };
              propertyPaths = descriptorProduct ? taxonomy.properties(descriptorProduct) : [];
              propertyCounts = {
                rating: 0
              };
              count = products.length;
              Product = _this.agora.modelManager.getModel('Product');
              _results = [];
              for (_k = 0, _len2 = products.length; _k < _len2; _k++) {
                product = products[_k];
                _results.push(Product.siteProduct(product, function(siteProduct) {
                  if (siteProduct) {
                    if (siteProduct.site.hasFeature('rating')) {
                      propertyCounts.rating++;
                    }
                    if (descriptorProduct) {
                      return siteProduct.usedProperties(descriptorProduct, function(usedProperties) {
                        var property, _l, _len3;
                        for (_l = 0, _len3 = usedProperties.length; _l < _len3; _l++) {
                          property = usedProperties[_l];
                          if (propertyCounts[property] == null) {
                            propertyCounts[property] = 0;
                          }
                          ++propertyCounts[property];
                        }
                        if (!--count) {
                          return done();
                        }
                      });
                    } else {
                      if (!--count) {
                        return done();
                      }
                    }
                  } else {
                    if (!--count) {
                      return done();
                    }
                  }
                }));
              }
              return _results;
            };
          })(this);
          updateProperties();
          util.observeContents(this.stateCtx, decision.get('considering'), updateProperties);
          data.descriptor = this.stateCtx.clientValue();
          updateDescriptor = (function(_this) {
            return function() {
              var descriptor, _ref1;
              descriptor = (_ref1 = decision.get('list').get('descriptor')) != null ? _ref1.descriptor : void 0;
              return data.descriptor.set(descriptor != null ? descriptor : '');
            };
          })(this);
          updateDescriptor();
          data.icon = this.stateCtx.clientValue();
          updateIcon = (function(_this) {
            return function() {
              var _ref1, _ref2;
              return data.icon.set(taxonomy.icon((_ref1 = decision.get('list').get('descriptor')) != null ? (_ref2 = _ref1.product) != null ? _ref2.type : void 0 : void 0));
            };
          })(this);
          updateIcon();
          this.stateCtx.observe(decision.get('list').field('descriptor'), function() {
            updateDescriptor();
            updateProperties();
            return updateIcon();
          });
        }
        return this.data.set(data);
      } else if (state.state === 'Product') {
        return this.data.set({
          state: state.state,
          breadcrumbs: breadcrumbs,
          productId: state.obj.get('id')
        });
      }
    };

    CompareView.prototype.pushState = function(state) {
      if (!state.state && this.state) {
        state.state = this.state;
      }
      this.path.push(state);
      return this.initState(state);
    };

    CompareView.prototype.popState = function() {
      this.path.pop();
      return this.initState(this.currentState());
    };

    CompareView.prototype.ripped = function(data) {
      return this.currentState().ripped(data);
    };

    CompareView.prototype.dropped = function(data) {
      return this.currentState().dropped(data);
    };

    CompareView.prototype.methods = {
      up: function(view) {
        return this.popState();
      },
      move: function(view, elementData, toData, dropAction) {
        var elementView, toView;
        toView = this.agora.View.clientViews[toData.view].view;
        elementView = this.agora.View.clientViews[elementData.view].view;
        elementView["delete"]();
        return toView.dropped(elementView, dropAction);
      },
      drop: function(view, elementData, onData, dropAction) {
        return this.resolveElements(elementData, onData, function(element, onView) {
          return onView.dropped(element, dropAction);
        });
      },
      reorder: function(view, fromIndex, toIndex) {
        return util.reorder(this.currentState().contents(), fromIndex, toIndex);
      },
      remove: function(view, elementData, fromData) {
        var elementView, fromView;
        fromView = this.agora.View.clientViews[fromData.view].view;
        elementView = this.agora.View.clientViews[elementData.view].view;
        return fromView.ripped(elementView);
      },
      split: function(view, selection) {
        var cont, decision, element, obj, rootEl, viewId, _i, _len;
        cont = this.agora.modelManager.getModel('List').create();
        decision = this.agora.modelManager.getModel('Decision').create({
          list_id: cont.get('id')
        });
        for (_i = 0, _len = selection.length; _i < _len; _i++) {
          viewId = selection[_i];
          view = this.agora.View.clientViews[viewId].view;
          cont.get('contents').add(view.obj);
          element = view.element;
          view.element["delete"]();
        }
        if (this.path.length === 1) {
          obj = decision;
          return rootEl = this.agora.modelManager.getModel('RootElement').create({
            element_type: obj.modelName,
            element_id: obj.get('id')
          });
        } else {
          return this.path[this.path.length - 2].dropped(decision);
        }
      },
      extract: function(view, selection) {
        var parent, viewId, _i, _len, _results;
        parent = this.path.length === 1 ? shoppingBarView : this.path[this.path.length - 2];
        _results = [];
        for (_i = 0, _len = selection.length; _i < _len; _i++) {
          viewId = selection[_i];
          view = this.agora.View.clientViews[viewId].view;
          parent.dropped(view.obj);
          _results.push(view.element["delete"]());
        }
        return _results;
      },
      wrap: function(view, type, selection) {
        var cont, element, obj, parent, viewId, _i, _len;
        cont = obj = null;
        if (type === 'decision') {
          cont = this.agora.modelManager.getModel('List').create();
          obj = this.agora.modelManager.getModel('Decision').create({
            list_id: cont.get('id')
          });
        } else {
          obj = cont = (function() {
            switch (type) {
              case 'bundle':
                return this.agora.modelManager.getModel('Bundle').create();
              case 'session':
                return this.agora.modelManager.getModel('Session').create({
                  title: 'New Session'
                });
            }
          }).call(this);
        }
        parent = type === 'session' ? null : false;
        for (_i = 0, _len = selection.length; _i < _len; _i++) {
          viewId = selection[_i];
          view = this.agora.View.clientViews[viewId].view;
          cont.get('contents').add(view.obj);
          element = view.element;
          if (parent === false || parent !== null) {
            if (element.modelName === 'RootElement') {
              parent = null;
            } else {
              if (parent) {
                if (!element.get('parent').equals(parent)) {
                  parent = null;
                }
              } else {
                parent = element.get('parent');
              }
            }
          }
          view.element["delete"]();
        }
        if (parent === null) {
          return this.dropped(obj);
        } else {
          return parent.get('contents').add(obj);
        }
      },
      "delete": function(view, selection) {
        var viewId, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = selection.length; _i < _len; _i++) {
          viewId = selection[_i];
          _results.push(this.agora.View.clientViews[viewId].view.element["delete"]());
        }
        return _results;
      },
      gotoRoot: function() {
        this.path = [this.path[0]];
        return this.initState(this.path[0]);
      },
      gotoPath: function(view, index) {
        this.path = this.path.slice(0, index + 1);
        return this.initState(this.path[index]);
      },
      restore: function(view, index) {
        var decision;
        decision = this.currentState().obj;
        return decision.get('considering').add(decision.get('dismissed').get(index));
      },
      removeDismissed: function(view, index) {
        var decision;
        decision = this.currentState().obj;
        return decision.get('dismissed').get(index)["delete"]();
      },
      clearDismissalList: function() {
        return this.currentState().breadcrumb.get('dismissalList').get('contents').removeAll();
      },
      openProduct: function(view, productData) {
        return this.resolveObject(productData, (function(_this) {
          return function(product) {
            return _this.pushState({
              state: 'Product',
              breadcrumb: product,
              obj: product
            });
          };
        })(this));
      },
      setProperty: function(view, name, selected) {
        var displayOptions, _ref;
        displayOptions = (_ref = this.displayOptions.get()) != null ? _ref : {
          displayComponents: []
        };
        if (selected) {
          if (displayOptions.displayComponents.indexOf(name) === -1) {
            displayOptions.displayComponents.push(name);
          }
        } else {
          _.pull(displayOptions.displayComponents, name);
        }
        return this.displayOptions.set(displayOptions);
      }
    };

    return CompareView;

  })(View);
});

//# sourceMappingURL=CompareView.map
