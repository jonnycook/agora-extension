// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util', 'underscore', './TileItem'], function(View, Site, Formatter, util, _, TileItem) {
  var ProductTileItem;
  return ProductTileItem = (function(_super) {
    __extends(ProductTileItem, _super);

    function ProductTileItem() {
      return ProductTileItem.__super__.constructor.apply(this, arguments);
    }

    ProductTileItem.prototype.init = function() {
      var decision, product, updateProperties;
      product = this.obj;
      this.properties = this.ctx.clientArray();
      this.propertiesCtx = this.ctx.context();
      decision = this.view.compareView.currentState().obj;
      updateProperties = (function(_this) {
        return function() {
          var Product;
          Product = _this.view.agora.modelManager.getModel('Product');
          return Product.siteProduct(product, function(siteProduct) {
            var cv, displayOptions, properties, property, _i, _len, _ref, _ref1;
            properties = [];
            _this.propertiesCtx.clear();
            displayOptions = (_ref = _this.view.compareView.displayOptions.get()) != null ? _ref : {
              displayComponents: []
            };
            _ref1 = displayOptions.displayComponents;
            for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
              property = _ref1[_i];
              properties.push({
                property: property,
                value: (function() {
                  switch (property) {
                    case 'price':
                      return product.get('id');
                    case 'rating':
                      if (siteProduct.site.hasFeature('rating')) {
                        return {
                          rating: this.propertiesCtx.clientValue(product.field('rating'), product.displayValue('rating')),
                          ratingCount: this.propertiesCtx.clientValue(product.field('ratingCount'), product.displayValue('ratingCount'))
                        };
                      }
                      break;
                    case 'title':
                      return this.propertiesCtx.clientValue(product.field('title'), product.displayValue('title'));
                    case 'feelings':
                      return util.feelings(this.propertiesCtx, product);
                    case 'arguments':
                      return util["arguments"](this.propertiesCtx, product);
                    default:
                      if (siteProduct) {
                        cv = this.propertiesCtx.clientValue();
                        siteProduct.property(property, function(value) {
                          return cv.set(value);
                        });
                        return cv;
                      }
                  }
                }).call(_this)
              });
            }
            return _this.properties.setArray(properties);
          });
        };
      })(this);
      updateProperties();
      this.ctx.observe(this.view.compareView.displayOptions, updateProperties);
      return this.data = {
        type: 'Product',
        barItemData: {
          id: product.get('id'),
          url: product.get('url'),
          sid: product.get('productSid'),
          site: {
            name: product.get('siteName'),
            url: product.get('siteUrl')
          },
          lastFeeling: util.lastFeeling(this.ctx, product),
          lastArgument: util.lastArgument(this.ctx, product),
          image: this.view.clientValueNamed('ProductBarItem.image', product.field('image'), product.displayValue('image')),
          properties: this.properties
        }
      };
    };

    ProductTileItem.prototype.dropped = function(obj, dropAction) {
      var decision, list;
      tracking.event('Compare', 'createDecision');
      obj = util.resolveObject(obj);
      list = this.view.agora.modelManager.getModel('List').create();
      list.get('contents').add(this.obj);
      list.get('contents').add(obj);
      if (this.view.descriptor) {
        list.set('descriptor', this.view.descriptor.get('descriptor'));
      }
      decision = this.view.agora.modelManager.getModel('Decision').create({
        list_id: list.get('id')
      });
      _activity('convert', this.view.element, this.obj, obj, decision);
      return decision;
    };

    ProductTileItem.prototype.methods = {
      click: function() {
        return this.view.compareView.pushState({
          state: 'Product',
          breadcrumb: this.obj,
          obj: this.obj
        });
      }
    };

    return ProductTileItem;

  })(TileItem);
});

//# sourceMappingURL=ProductTileItem.map
