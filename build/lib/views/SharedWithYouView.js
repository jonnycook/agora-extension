// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['View', 'Site', 'Formatter', 'util', 'underscore'], function(View, Site, Formatter, util, _) {
  var SharedWithYouView;
  return SharedWithYouView = (function(superClass) {
    extend(SharedWithYouView, superClass);

    function SharedWithYouView() {
      return SharedWithYouView.__super__.constructor.apply(this, arguments);
    }

    SharedWithYouView.nextId = 0;

    SharedWithYouView.id = function(args) {
      return ++this.nextId;
    };

    SharedWithYouView.prototype.udpateEntries = function() {
      var entries;
      entries = [];
      this.agora.db.tables.shared_objects.records.each((function(_this) {
        return function(record) {
          if (record.get('with_user_id') === _this.agora.user.get('id')) {
            return entries.push(_.extend(_.clone(record._values), {
              id: record.get('id')
            }));
          }
        };
      })(this));
      return this.entries.set(entries);
    };

    SharedWithYouView.prototype.isInBelt = function(value, sharedObject) {
      var ObjectReference, i, len, objectReference, objectReferences, rootElements;
      ObjectReference = this.agora.modelManager.getModel('ObjectReference');
      objectReferences = ObjectReference.findAll({
        object_user_id: parseInt(sharedObject.get('user_id').substr(1)),
        object: sharedObject.get('object')
      });
      for (i = 0, len = objectReferences.length; i < len; i++) {
        objectReference = objectReferences[i];
        rootElements = this.agora.user.get('belts').get(0).get('elements').findAll({
          element_type: 'ObjectReference',
          element_id: objectReference.get('id')
        });
        if (rootElements.length) {
          value.set(true);
          return;
        }
      }
      return value.set(false);
    };

    SharedWithYouView.prototype.init = function(args) {
      this.object = this.agora.View.views.ShoppingBar["null"].currentState().shareObject();
      this.entries = this.clientValue();
      this.udpateEntries();
      this.data = {
        entries: this.clientArray(this.ctx, this.agora.user.get('sharedWithMe'), (function(_this) {
          return function(obj, onRemove, ctx) {
            var inBelt, ref, table, type;
            inBelt = _this.clientValue(false);
            _this.isInBelt(inBelt, obj);
            type = obj.get('object') === '/' ? 'Belt' : ((ref = obj.get('object').split('.'), table = ref[0], ref), table === 'decisions' ? 'Decision' : table === 'belts' ? 'Belt' : void 0);
            return {
              title: obj.get('object') === '/' ? ctx().clientValue('Belt') : ctx().clientValue(obj.field('title')),
              userName: obj.get('user_name'),
              seen: ctx().clientValue(obj.field('seen')),
              inBelt: inBelt,
              id: obj.get('id'),
              type: type
            };
          };
        })(this)),
        status: this.clientValue()
      };
      return this.observeObject(this.agora.db.tables.shared_objects.records, (function(_this) {
        return function() {
          return _this.udpateEntries();
        };
      })(this));
    };

    SharedWithYouView.prototype.methods = {
      seen: function() {
        return this.agora.user.get('sharedWithMe').each((function(_this) {
          return function(instance) {
            return instance.set('seen', true);
          };
        })(this));
      },
      inBelt: function(view, id, inBelt) {
        var ObjectReference, i, len, objectReference, objectReferences, results, rootElement, rootElements, sharedObject;
        sharedObject = this.agora.db.tables.shared_objects.byId(id);
        if (inBelt) {
          objectReference = this.agora.modelManager.getModel('ObjectReference').create({
            object_user_id: sharedObject.get('user_id').substr(1),
            object: sharedObject.get('object')
          });
          return this.agora.modelManager.getModel('BeltElement').create({
            belt_id: this.agora.user.get('belts').get(0).get('id'),
            element_type: 'ObjectReference',
            element_id: objectReference.get('id')
          });
        } else {
          ObjectReference = this.agora.modelManager.getModel('ObjectReference');
          objectReferences = ObjectReference.findAll({
            object_user_id: parseInt(sharedObject.get('user_id').substr(1)),
            object: sharedObject.get('object')
          });
          results = [];
          for (i = 0, len = objectReferences.length; i < len; i++) {
            objectReference = objectReferences[i];
            rootElements = this.agora.user.get('belts').get(0).get('elements').findAll({
              element_type: 'ObjectReference',
              element_id: objectReference.get('id')
            });
            results.push((function() {
              var j, len1, results1;
              results1 = [];
              for (j = 0, len1 = rootElements.length; j < len1; j++) {
                rootElement = rootElements[j];
                results1.push(rootElement["delete"]());
              }
              return results1;
            })());
          }
          return results;
        }
      },
      click: function(view, id) {
        var object, sharedObject, storeId;
        sharedObject = this.agora.db.tables.shared_objects.byId(id);
        object = sharedObject.get('object');
        storeId = sharedObject.get('user_id').substr(1);
        return this.agora.updater.subscribe(storeId, '@', (function(_this) {
          return function() {
            return _this.agora.updater.subscribe(storeId, object, function() {
              var decision, parts, user;
              if (object === '/') {
                user = agora.modelManager.getInstance('User', sharedObject.get('user_id'));
                return util.shoppingBar.pushRootState(user);
              } else {
                parts = object.split('.');
                if (parts[0] === 'decisions') {
                  decision = _this.agora.modelManager.getInstance('Decision', 'G' + parts[1]);
                  return util.shoppingBar.pushDecisionState(decision);
                } else if (parts[0] === 'belts') {
                  decision = _this.agora.modelManager.getInstance('Belt', 'G' + parts[1]);
                  return util.shoppingBar.pushBeltState(decision);
                }
              }
            });
          };
        })(this));
      }
    };

    return SharedWithYouView;

  })(View);
});

//# sourceMappingURL=SharedWithYouView.js.map
