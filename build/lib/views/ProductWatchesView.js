// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['View', 'Site', 'Formatter', 'util', 'model/ObservableArray', 'underscore'], function(View, Site, Formatter, util, ObservableArray, _) {
  var ProductWatchesView, minPrice;
  minPrice = function(prices) {
    var m, price, _i, _len;
    m = null;
    for (_i = 0, _len = prices.length; _i < _len; _i++) {
      price = prices[_i];
      if (price) {
        if (m === null || price < m) {
          m = price;
        }
      }
    }
    return m != null ? m : 0;
  };
  return ProductWatchesView = (function(_super) {
    __extends(ProductWatchesView, _super);

    function ProductWatchesView() {
      return ProductWatchesView.__super__.constructor.apply(this, arguments);
    }

    ProductWatchesView.nextId = 0;

    ProductWatchesView.id = function(args) {
      return ++this.nextId;
    };

    ProductWatchesView.prototype.init = function() {
      var ctx, productWatches;
      ctx = this.context();
      productWatches = new ObservableArray;
      util.filteredArray(ctx, this.agora.modelManager.getModel('ProductWatch').all(), productWatches, (function(_this) {
        return function(record) {
          return record.get('enabled');
        };
      })(this), false, function(ctx, record, test) {
        return ctx.observe(record.field('enabled'), test);
      });
      return this.data = {
        productWatches: this.clientArray(ctx, productWatches, (function(_this) {
          return function(productWatch, onRemove, ctx) {
            var currentPriceCv, initialPriceCv, product, targetPriceCv, update, updateTargetPrice;
            initialPriceCv = ctx().clientValue();
            currentPriceCv = ctx().clientValue();
            targetPriceCv = ctx().clientValue();
            console.log(productWatch.get('product_id'));
            product = productWatch.get('product');
            update = function() {
              var currentPrice, currentPrices, initialPrice, initialPrices;
              currentPrices = [productWatch.get('listing'), productWatch.get('new'), productWatch.get('refurbished'), productWatch.get('used')];
              initialPrices = [productWatch.get('initial_listing'), productWatch.get('initial_new'), productWatch.get('initial_refurbished'), productWatch.get('initial_used')];
              currentPrice = minPrice(currentPrices.slice(0, productWatch.get('watch_condition') + 1));
              initialPrice = minPrice(initialPrices.slice(0, productWatch.get('watch_condition') + 1));
              currentPriceCv.set(currentPrice / 100);
              return initialPriceCv.set(initialPrice / 100);
            };
            ctx().observe(productWatch.field('watch_condition'), update);
            ctx().observe(productWatch.field('initial_listing'), update);
            ctx().observe(productWatch.field('initial_new'), update);
            ctx().observe(productWatch.field('initial_refurbished'), update);
            ctx().observe(productWatch.field('initial_used'), update);
            ctx().observe(productWatch.field('listing'), update);
            ctx().observe(productWatch.field('new'), update);
            ctx().observe(productWatch.field('refurbished'), update);
            ctx().observe(productWatch.field('used'), update);
            update();
            updateTargetPrice = function() {
              if (productWatch.get('watch_threshold') && productWatch.get('enable_threshold')) {
                return targetPriceCv.set(productWatch.get('watch_threshold') / 100);
              } else {
                return targetPriceCv.set(null);
              }
            };
            ctx().observe(productWatch.field('watch_threshold'), updateTargetPrice);
            ctx().observe(productWatch.field('enable_threshold'), updateTargetPrice);
            updateTargetPrice();
            return {
              id: productWatch.get('id'),
              title: ctx().clientValue(product.field('title'), product.displayValue('title')),
              image: ctx().clientValue(product.field('image'), product.displayValue('image')),
              targetPrice: targetPriceCv,
              initialPrice: initialPriceCv,
              currentPrice: currentPriceCv,
              url: product.get('url'),
              state: ctx().clientValue(productWatch.field('state'))
            };
          };
        })(this))
      };
    };

    return ProductWatchesView;

  })(View);
});

//# sourceMappingURL=ProductWatchesView.map
