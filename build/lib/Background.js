// Generated by CoffeeScript 1.10.0
define(['client/ContentScript'], function(ContentScript) {
  var Background;
  return Background = (function() {
    Background.prototype.apiVersion = '0.0.1';

    Background.prototype.contentScriptListen = function(eventName, tabId) {
      var l;
      if (l = this.contentScriptListeners[eventName]) {
        if (l.indexOf(tabId) === -1) {
          return l.push(tabId);
        }
      } else {
        return this.contentScriptListeners[eventName] = [tabId];
      }
    };

    Background.prototype.setDomain = function(domain) {
      this.domain = domain;
      return this.apiRoot = "http://" + this.domain + "/ext/";
    };

    function Background(opts) {
      if (opts == null) {
        opts = {};
      }
      if (opts.client == null) {
        opts.client = true;
      }
      if (typeof env !== 'undefined') {
        if (this.domain == null) {
          this.domain = env.domain;
        }
      }
      this.apiRoot = "http://" + this.domain + "/ext/";
      if (opts.client) {
        this.listeners = {};
        this.contentScriptListeners = {};
        this.onRequest((function(_this) {
          return function(request, sender, sendResponse) {
            var eventSource, i, l, listener;
            if ((request.version != null) && request.version !== _this.version) {
              sendResponse('oldVersion');
              return true;
            } else {
              switch (request.request) {
                case 'injectUtilScripts':
                  _this.injectUtilScripts(sender, sendResponse);
                  return true;
                case 'listen':
                  if (l = _this.contentScriptListeners[request.eventName]) {
                    if (l.indexOf(sender.id) === -1) {
                      return l.push(sender.id);
                    }
                  } else {
                    return _this.contentScriptListeners[request.eventName] = [sender.id];
                  }
                  break;
                case 'stopListening':
                  if (l = _this.contentScriptListeners[request.eventName]) {
                    i = l.indexOf(sender.id);
                    l.splice(i, 1);
                    if (!l.length) {
                      return delete _this.contentScriptListeners[request.eventName];
                    }
                  }
                  break;
                case 'BackgroundMessage':
                  if (listener = _this.listeners[request.messageName]) {
                    eventSource = {
                      url: sender.url,
                      tabId: sender.id
                    };
                    listener(eventSource, request.args, sendResponse);
                  } else {
                    console.log("No listener for " + request.event);
                  }
                  return true;
              }
            }
          };
        })(this));
      }
      String.prototype.safeMatch = function(pattern) {
        var matches;
        if (this.match) {
          matches = this.match(pattern);
          if (matches) {
            return matches;
          } else {
            throw new Error(pattern + " not found in " + this);
          }
        }
      };
    }

    Background.prototype.triggerContentScriptEvent = function(eventName, args, debug) {
      var j, l, len, ref, results, tabID;
      if (debug == null) {
        debug = false;
      }
      l = this.contentScriptListeners[eventName];
      if (debug) {
        console.debug('triggerContentScriptEvent', eventName, args, (ref = this.contentScriptListeners[eventName]) != null ? ref.length : void 0);
      }
      if (l) {
        results = [];
        for (j = 0, len = l.length; j < len; j++) {
          tabID = l[j];
          results.push(this.sendRequest(tabID, {
            eventName: eventName,
            args: args
          }));
        }
        return results;
      }
    };

    Background.prototype.listen = function(request, cb) {
      return this.listeners[request] = cb;
    };

    Background.prototype.logError = function(type, message, file, line, column, stack, info, args) {
      if (!env.dontSubmitErrors) {
        return this.httpRequest(this.apiRoot + "logErrors.php", {
          method: 'post',
          data: {
            type: type,
            args: args,
            error: {
              message: message,
              file: file,
              line: line,
              column: column,
              info: info,
              stack: stack
            },
            userId: this.userId,
            extVersion: this.version,
            apiVersion: this.apiVersion,
            clientId: this.clientId
          }
        });
      }
    };

    Background.prototype.error = function() {
      var arg, args, error, i, j, len, realError, ref;
      args = [];
      error = {};
      realError = null;
      ref = Array.prototype.slice.call(arguments, 1);
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        arg = ref[i];
        if (arg instanceof Error) {
          realError = arg;
          error = {
            message: arg.message,
            stack: arg.stack,
            info: arg.info,
            line: arg.line
          };
        } else {
          args.push(arg);
        }
      }
      this.logError(arguments[0], error.message, error.file, error.line, error.column, error.stack, error.info, args);
      if (realError && !env.gracefulFailure) {
        throw realError;
      }
    };

    Background.prototype.log = function() {
      var arg, args, error, i, j, len, realError;
      console.debug.apply(console, arguments);
      args = [];
      error = {};
      realError = null;
      for (i = j = 0, len = arguments.length; j < len; i = ++j) {
        arg = arguments[i];
        args.push(arg);
      }
      return setTimeout(((function(_this) {
        return function() {
          return _this.httpRequest(_this.apiRoot + "log.php", {
            method: 'post',
            data: {
              args: JSON.stringify(args),
              timestamp: new Date().getTime(),
              userId: _this.userId,
              extVersion: _this.version,
              instanceId: _this.instanceId,
              clientId: _this.clientId
            }
          });
        };
      })(this)), 0);
    };

    Background.prototype.contentScript = function() {};

    Background.prototype.httpGet = function(opts) {};

    Background.prototype.require = function(modules, cb) {};

    Background.prototype.unregisterTab = function(tabId) {
      var event, i, ref, results, tabIds;
      console.log('unregistering tab', tabId);
      ref = this.contentScriptListeners;
      results = [];
      for (event in ref) {
        tabIds = ref[event];
        i = tabIds.indexOf(tabId);
        if (i !== -1) {
          tabIds.splice(i, 1);
          if (!tabIds.length) {
            results.push(delete this.contentScriptListeners[event]);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    Background.prototype.reset = function() {
      return this.contentScriptListeners = {};
    };

    Background.prototype.ping = function() {
      return this.httpRequest(this.apiRoot + "ping.php", {
        data: {
          id: this.instanceId,
          version: this.version,
          state: this.state
        },
        cb: (function(_this) {
          return function(response) {
            var command, j, len, ref, results;
            if (response) {
              response = JSON.parse(response);
              if (response.commands) {
                ref = response.commands;
                results = [];
                for (j = 0, len = ref.length; j < len; j++) {
                  command = ref[j];
                  results.push((function(command) {
                    return agora.updater.commandExecuter.executeCommand(JSON.parse(command.command), function(result) {
                      return _this.httpRequest(_this.apiRoot + "returnCommand.php", {
                        method: 'post',
                        data: {
                          commandId: command.id,
                          result: JSON.stringify(result)
                        }
                      });
                    });
                  })(command));
                }
                return results;
              }
            }
          };
        })(this)
      });
    };

    return Background;

  })();
});

//# sourceMappingURL=Background.js.map
