// Generated by CoffeeScript 1.10.0
define(['underscore'], function(_) {
  var BlockRunner;
  return BlockRunner = (function() {
    function BlockRunner(code1) {
      this.code = code1;
      this.ref = 0;
    }

    BlockRunner.prototype.onDone = function(cb) {
      if (this._onDone == null) {
        this._onDone = [];
      }
      return this._onDone.unshift(cb);
    };

    BlockRunner.prototype.done = function(result1) {
      this.result = result1;
      return this.release();
    };

    BlockRunner.prototype.retain = function() {
      return ++this.ref;
    };

    BlockRunner.prototype.release = function() {
      var cb, j, len, ref;
      if (this.ref === 0) {
        throw new Error('ref is already 0');
      } else {
        --this.ref;
        if (this.ref === 0) {
          if (this._onDone) {
            ref = this._onDone;
            for (j = 0, len = ref.length; j < len; j++) {
              cb = ref[j];
              cb(this.result);
            }
          }
          return this.calledDone = true;
        }
      }
    };

    BlockRunner.prototype["try"] = function(blockMap) {
      var blocks, i, names, nextBlock;
      names = _.keys(blockMap);
      blocks = _.values(blockMap);
      i = 0;
      this.retain();
      nextBlock = (function(_this) {
        return function() {
          var b, block;
          block = blocks[i];
          if (block) {
            ++i;
            b = _this.spawnBlock(block, names[i - 1]);
            b.resultMap = function(result) {
              if (result === true) {
                return true;
              } else if (result === null) {
                return null;
              } else {
                return false;
              }
            };
            b.onDone(function(result) {
              if (result === false) {
                return nextBlock();
              } else {
                return _this.release();
              }
            });
            return b.exec();
          } else {
            return _this.release();
          }
        };
      })(this);
      return nextBlock();
    };

    BlockRunner.prototype.eachSerially = function(blockMap) {
      var blocks, i, names, nextBlock;
      names = _.keys(blockMap);
      blocks = _.values(blockMap);
      i = 0;
      this.retain();
      nextBlock = (function(_this) {
        return function() {
          var b, block;
          block = blocks[i];
          if (block) {
            ++i;
            b = _this.spawnBlock(block, names[i - 1]);
            b.onDone(function() {
              return nextBlock();
            });
            return b.exec();
          } else {
            return _this.release();
          }
        };
      })(this);
      return nextBlock();
    };

    BlockRunner.prototype.spawnBlock = function(code, name) {
      var b, block;
      if (name == null) {
        name = '';
      }
      this.retain();
      this.children = true;
      b = function() {};
      b.prototype = this;
      if (this.root) {
        b.prototype = this.root;
      } else {
        b.prototype = this;
      }
      block = new b(code);
      block.parent = this;
      block.name = name;
      block.code = code;
      block.root = b.prototype;
      block.children = 0;
      block.ref = 0;
      block._onDone = [];
      block.result = null;
      if (this.path) {
        block.path = this.path.concat([name]);
      } else {
        block.path = [name];
      }
      block.onDone((function(_this) {
        return function() {
          return _this.release();
        };
      })(this));
      return block;
    };

    BlockRunner.prototype.execBlock = function(code) {
      var block;
      block = this.spawnBlock(code);
      return block.exec();
    };

    BlockRunner.prototype.exec = function(_done) {
      if (_done) {
        this.onDone(_done);
      }
      this.retain();
      this.result = this.code();
      if (this.resultMap) {
        this.result = this.resultMap(this.result);
      }
      if (this.result !== null || this.children) {
        return this.release();
      }
    };

    return BlockRunner;

  })();
});

//# sourceMappingURL=BlockRunner.js.map
