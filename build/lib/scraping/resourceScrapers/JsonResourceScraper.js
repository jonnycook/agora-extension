// Generated by CoffeeScript 1.10.0
var extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

define(['../ResourceScraper', 'underscore'], function(ResourceScraper, _) {
  var JsonResourceScraper;
  return JsonResourceScraper = (function(superClass) {
    extend(JsonResourceScraper, superClass);

    function JsonResourceScraper(map) {
      this.map = map;
      if (this === window) {
        return ResourceScraper(arguments);
      }
    }

    JsonResourceScraper.prototype.scrape = function(cb) {
      var obj;
      obj = {
        matchAll: function(string, pattern, group) {
          var i, j, len, len1, match, matches, results, results1;
          if (group == null) {
            group = false;
          }
          matches = string.match(new RegExp((_.isString(pattern) ? pattern : pattern.source), 'g'));
          if (matches) {
            if (group === false) {
              results = [];
              for (i = 0, len = matches.length; i < len; i++) {
                match = matches[i];
                results.push(match.match(pattern));
              }
              return results;
            } else {
              results1 = [];
              for (j = 0, len1 = matches.length; j < len1; j++) {
                match = matches[j];
                results1.push(match.match(pattern)[group]);
              }
              return results1;
            }
          } else {
            return [];
          }
        }
      };
      return cb(this.map.call(obj, JSON.parse(this.resource)));
    };

    return JsonResourceScraper;

  })(ResourceScraper);
});

//# sourceMappingURL=JsonResourceScraper.js.map
