// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['../ResourceScraper', 'underscore'], function(ResourceScraper, _) {
  var JsonResourceScraper;
  return JsonResourceScraper = (function(_super) {
    __extends(JsonResourceScraper, _super);

    function JsonResourceScraper(map) {
      this.map = map;
      if (this === window) {
        return ResourceScraper(arguments);
      }
    }

    JsonResourceScraper.prototype.scrape = function(cb) {
      var obj;
      obj = {
        matchAll: function(string, pattern, group) {
          var match, matches, _i, _j, _len, _len1, _results, _results1;
          if (group == null) {
            group = false;
          }
          matches = string.match(new RegExp((_.isString(pattern) ? pattern : pattern.source), 'g'));
          if (matches) {
            if (group === false) {
              _results = [];
              for (_i = 0, _len = matches.length; _i < _len; _i++) {
                match = matches[_i];
                _results.push(match.match(pattern));
              }
              return _results;
            } else {
              _results1 = [];
              for (_j = 0, _len1 = matches.length; _j < _len1; _j++) {
                match = matches[_j];
                _results1.push(match.match(pattern)[group]);
              }
              return _results1;
            }
          } else {
            return [];
          }
        }
      };
      return cb(this.map.call(obj, JSON.parse(this.resource)));
    };

    return JsonResourceScraper;

  })(ResourceScraper);
});

//# sourceMappingURL=JsonResourceScraper.map
