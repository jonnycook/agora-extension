// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['underscore', '../ResourceScraper', '../DeclarativeScraper'], function(_, ResourceScraper, DeclarativeScraper) {
  var DeclarativeResourceScraper;
  return DeclarativeResourceScraper = (function(_super) {
    __extends(DeclarativeResourceScraper, _super);

    function DeclarativeResourceScraper(name, property, map) {
      this.name = name;
      this.property = property;
      this.map = map;
      if (this === window) {
        return ResourceScraper(arguments);
      }
    }

    DeclarativeResourceScraper.prototype.scrape = function(cb) {
      var e, result, scraper, scrapers, _i, _len, _ref;
      scrapers = this.propertyScraper.productScraper.background.declarativeScrapers;
      for (_i = 0, _len = scrapers.length; _i < _len; _i++) {
        scraper = scrapers[_i];
        if (scraper.site === this.site.name && scraper.name === this.name) {
          if (scraper.properties[this.property]) {
            scraper = new DeclarativeScraper(scraper.properties[this.property]);
            try {
              result = (_ref = scraper.scrape(this.resource)[0]) != null ? _ref.value : void 0;
              cb(this.map ? this.map(result) : result);
              return;
            } catch (_error) {
              e = _error;
              e.info = {
                path: scraper.getPath()
              };
              throw e;
            }
          } else {
            cb();
            return;
          }
        }
      }
      throw new Error("failed to find scraper for " + this.site.name + " " + this.name);
    };

    return DeclarativeResourceScraper;

  })(ResourceScraper);
});

//# sourceMappingURL=DeclarativeResourceScraper.map
