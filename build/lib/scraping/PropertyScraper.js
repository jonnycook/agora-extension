// Generated by CoffeeScript 1.10.0
define(['underscore'], function(_) {
  var PropertyScraper;
  return PropertyScraper = (function() {
    function PropertyScraper(productSid, site, args) {
      var j, len, scraper, scraperConst;
      this.productSid = productSid;
      this.site = site;
      if (_.isArray(args)) {
        this.scrapers = [];
        for (j = 0, len = args.length; j < len; j++) {
          scraperConst = args[j];
          scraper = (function(func, args, ctor) {
            ctor.prototype = func.prototype;
            var child = new ctor, result = func.apply(child, args);
            return Object(result) === result ? result : child;
          })(scraperConst["const"], scraperConst.args, function(){});
          if (scraperConst.config) {
            scraper.config(scraperConst.config);
          }
          scraper.scraper.propertyScraper = this;
          scraper.productSid = this.productSid;
          scraper.site = this.site;
          this.scrapers.push(scraper);
        }
      } else {
        this.resource = args.resource, scraperConst = args.scraper, this.formatter = args.formatter;
        this.scraper = (function(func, args, ctor) {
          ctor.prototype = func.prototype;
          var child = new ctor, result = func.apply(child, args);
          return Object(result) === result ? result : child;
        })(scraperConst["const"], scraperConst.args, function(){});
        if (scraperConst.config) {
          this.scraper.config(scraperConst.config);
        }
        this.scraper.propertyScraper = this;
        this.scraper.productSid = this.productSid;
        this.scraper.site = this.site;
      }
    }

    PropertyScraper.prototype.scrape = function(cb) {
      var doScrape, resourceFetcher;
      if (this.scrapers) {
        doScrape = (function(_this) {
          return function(i) {
            var resourceFetcher, scraper;
            scraper = _this.scrapers[i];
            resourceFetcher = _this.productScraper.resource(scraper.resource);
            return resourceFetcher.fetch(function(resource) {
              var e, error;
              scraper.scraper.pushResource(resource);
              try {
                return scraper.scraper.scrape(function(value1) {
                  var value;
                  _this.value = value1;
                  if (scraper.formatter) {
                    value = scraper.formatter();
                  }
                  return cb(value);
                });
              } catch (error) {
                e = error;
                if (i === _this.scrapers.length - 1) {
                  e.message += " (" + _this.site.name + " " + _this.productSid + " " + _this.propertyName + ")";
                  _this.background.error('ScrapeError', _this.site.name, _this.productSid.toString(), _this.propertyName, e);
                  return cb(null, true);
                } else {
                  return doScrape(i + 1);
                }
              }
            });
          };
        })(this);
        return doScrape(0);
      } else {
        resourceFetcher = this.productScraper.resource(this.resource);
        return resourceFetcher.fetch((function(_this) {
          return function(resource) {
            var e, error;
            _this.scraper.pushResource(resource);
            try {
              return _this.scraper.scrape(function(value1) {
                var value;
                _this.value = value1;
                if (_this.formatter) {
                  value = _this.formatter();
                }
                return cb(value);
              });
            } catch (error) {
              e = error;
              e.message += " (" + _this.site.name + " " + _this.productSid + " " + _this.propertyName + ")";
              _this.background.error('ScrapeError', _this.site.name, _this.productSid.toString(), _this.propertyName, e);
              return cb(null, true);
            }
          };
        })(this));
      }
    };

    return PropertyScraper;

  })();
});

//# sourceMappingURL=PropertyScraper.js.map
