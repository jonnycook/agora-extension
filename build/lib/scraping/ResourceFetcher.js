// Generated by CoffeeScript 1.10.0
define(['underscore', './Resource'], function(_, Resource) {
  var ResourceFetcher;
  return ResourceFetcher = (function() {
    ResourceFetcher.id = 0;

    function ResourceFetcher(productSid, args) {
      this.productSid = productSid;
      this.id = ResourceFetcher.id++;
      this.url = args.url, this.requires = args.requires;
    }

    ResourceFetcher.prototype.resetDeleteTimeout = function() {
      clearTimeout(this.deleteTimeoutId);
      return this.deleteTimeoutId = setTimeout(((function(_this) {
        return function() {
          return delete _this.cache;
        };
      })(this)), 1000 * 30);
    };

    ResourceFetcher.prototype.fetch = function(cb) {
      var doFetch;
      if (this.cache) {
        this.resetDeleteTimeout();
        return cb(this.cache);
      } else if (this.fetching) {
        return this.cbs.push(cb);
      } else if (this.url != null) {
        this.cbs = [cb];
        this.fetching = true;
        doFetch = (function(_this) {
          return function(url) {
            console.debug("fetching url " + url);
            return _this.background.httpRequest(url, {
              method: 'get',
              dataType: 'text',
              cb: function(responseText, response) {
                var i, len, ref, resource;
                console.debug("fetched url " + url);
                _this.fetching = false;
                if (response.status === 200 || response.status === 'success') {
                  _this.cache = resource = new Resource(responseText, url);
                  ref = _this.cbs;
                  for (i = 0, len = ref.length; i < len; i++) {
                    cb = ref[i];
                    cb(resource);
                  }
                  delete _this.cbs;
                  return _this.resetDeleteTimeout();
                } else {
                  delete _this.cbs;
                  _this.fetching = false;
                  throw new Error(url + ": http status " + response.status);
                }
              },
              error: function() {
                var i, len, ref;
                console.debug("failed fetched url " + url);
                _this.fetching = false;
                ref = _this.cbs;
                for (i = 0, len = ref.length; i < len; i++) {
                  cb = ref[i];
                  cb(null);
                }
                return delete _this.cbs;
              }
            });
          };
        })(this);
        if (this.requires) {
          return this.scraper.resource(this.requires).fetch((function(_this) {
            return function(resource) {
              return doFetch(_this.url(resource));
            };
          })(this));
        } else {
          return doFetch(this.url());
        }
      } else {
        throw new Error('ResourceFetcher must have URL constructor');
      }
    };

    return ResourceFetcher;

  })();
});

//# sourceMappingURL=ResourceFetcher.js.map
