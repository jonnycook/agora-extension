// Generated by CoffeeScript 1.7.1
define(['underscore', './IArray'], function(_, IArray) {
  var ClientObject;
  return ClientObject = (function() {
    ClientObject._nextId = 1;

    ClientObject._registry = {};

    ClientObject.nextId = function() {
      return this._nextId++;
    };

    ClientObject.serialize = function(obj) {
      var key, newArray, newObject, value;
      if (_.isArray(obj)) {
        newArray = [];
        _.each(obj, (function(_this) {
          return function(el) {
            return newArray.push(_this.serialize(el));
          };
        })(this));
        return newArray;
      } else if (_.isObject(obj)) {
        if (obj instanceof ClientObject) {
          return obj.serialize();
        } else if (obj instanceof IArray) {
          return this.serialize(obj._array);
        } else {
          newObject = {};
          for (key in obj) {
            value = obj[key];
            newObject[key] = this.serialize(value);
          }
          return newObject;
        }
      } else {
        return obj;
      }
    };

    function ClientObject(agora, _owner) {
      this.agora = agora;
      this._owner = _owner;
      this._id = ClientObject.nextId();
      ClientObject._registry[this._id] = this;
    }

    ClientObject.prototype.radioSilence = function(block) {
      this._radioSilence = true;
      block();
      return this._radioSilence = false;
    };

    ClientObject.prototype._triggerEvent = function(event, args) {
      if (!this._radioSilence) {
        return this.agora.background.triggerContentScriptEvent("ClientObjectEvent:" + this._id, _.extend({
          event: event
        }, (this._name ? _.extend({
          name: this._name
        }, args) : args)), this.debug);
      }
    };

    ClientObject.prototype._triggerMutationEvent = function(type, args) {
      return this._triggerEvent('mutation', _.extend({
        type: type
      }, args));
    };

    ClientObject.prototype.disconnectClient = function() {
      return this._triggerEvent('disconnection');
    };

    ClientObject.prototype.serialize = function() {
      var obj;
      obj = {
        _id: this._id
      };
      if (this._name) {
        obj._name = this._name;
      }
      return obj;
    };

    ClientObject.prototype.destruct = function() {
      ClientObject._registry[this._id] = false;
      return this.disconnectClient();
    };

    return ClientObject;

  })();
});

//# sourceMappingURL=ClientObject.map
