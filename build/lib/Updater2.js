// Generated by CoffeeScript 1.10.0
var slice = [].slice,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['underscore', 'model/ModelInstance', 'CommandExecuter', 'model/ObservableValue', 'model/Event'], function(_, ModelInstance, CommandExecuter, ObservableValue, Event) {
  var MessageStream, Updater, UpdaterTransport, WebSocketTransport, leftPad, parse;
  parse = (function(_this) {
    return function(json, cb) {
      var e, error, error1, obj;
      if (cb == null) {
        cb = null;
      }
      if (cb) {
        obj = null;
        try {
          obj = JSON.parse(json);
        } catch (error) {
          e = error;
          background.error('JsonError', e);
        }
        return cb(obj !== null, obj != null ? obj : json);
      } else {
        try {
          return JSON.parse(json);
        } catch (error1) {
          e = error1;
        }
      }
    };
  })(this);
  leftPad = function(str, length, char) {
    str += '';
    while (str.length < length) {
      str = char + str;
    }
    return str;
  };
  UpdaterTransport = (function() {
    function UpdaterTransport(updater) {
      this.updater = updater;
    }

    return UpdaterTransport;

  })();
  MessageStream = (function() {
    function MessageStream() {
      this.queue = [];
      this.number = 0;
    }

    MessageStream.prototype.clearMessageQueue = function() {
      return this.queue = [];
    };

    MessageStream.prototype._sendMessage = function(type, params) {
      var code, currentNumber;
      if (_.isFunction(params[params.length - 1])) {
        this.cb = params[params.length - 1];
        params = params.slice(0, -1);
      }
      this.working = true;
      this.type = type;
      code = this.messageTypes[type].code;
      currentNumber = this.currentNumber = this.number++;
      this.ws.send("" + code + this.currentNumber + "\t" + (params.join('\t')));
      background.log("sending message " + this.type + ", " + currentNumber + "...");
      return this.timerId = setTimeout(((function(_this) {
        return function() {
          console.log('timeout', type);
          background.error('MessageStreamError', 'timeout', type, currentNumber);
          return _this.interupted('timeout');
        };
      })(this)), 15 * 1000);
    };

    MessageStream.prototype.sendMessage = function() {
      var params, type;
      type = arguments[0], params = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this.working) {
        return this.queue.push({
          type: type,
          params: params
        });
      } else {
        return this._sendMessage(type, params);
      }
    };

    MessageStream.prototype.interupted = function(reason) {
      var base, cb, done, next;
      if (this.type) {
        background.log("message interupted " + this.type + ", " + this.currentNumber + ", " + reason);
        cb = this.cb;
        delete this.cb;
        done = (function(_this) {
          return function(r) {
            if (cb) {
              return cb(r);
            }
          };
        })(this);
        if (typeof (base = this.messageTypes[this.type]).interupted === "function") {
          base.interupted(done, reason);
        }
        delete this.type;
        delete this.currentNumber;
        this.working = false;
        if (this.queue.length) {
          next = this.queue.shift();
          return this._sendMessage(next.type, next.params);
        }
      }
    };

    MessageStream.prototype.sendNextMessage = function() {
      var next;
      if (this.queue.length) {
        next = this.queue.shift();
        return this._sendMessage(next.type, next.params);
      }
    };

    MessageStream.prototype.receivedResponse = function(response) {
      var cb, done, number, ref, responseParams;
      clearTimeout(this.timerId);
      responseParams = response.split('\t');
      number = responseParams[0];
      responseParams = responseParams.slice(1);
      if (number == this.currentNumber) {
        background.log("message response " + this.type + ", " + this.currentNumber);
        cb = this.cb;
        delete this.cb;
        done = (function(_this) {
          return function(r) {
            if (cb) {
              return cb(r, response);
            }
          };
        })(this);
        (ref = this.messageTypes[this.type]).responseHandler.apply(ref, [done].concat(slice.call(responseParams)));
        this.working = false;
        delete this.type;
        return this.sendNextMessage();
      }
    };

    return MessageStream;

  })();
  WebSocketTransport = (function(superClass) {
    extend(WebSocketTransport, superClass);

    WebSocketTransport.prototype.polling = false;

    function WebSocketTransport() {
      WebSocketTransport.__super__.constructor.apply(this, arguments);
      this.workQueue = [];
      this.subscriptions = {};
      this.messageStream = new MessageStream;
      this.messageStream.messageTypes = {
        init: {
          code: 'i',
          responseHandler: (function(_this) {
            return function(done, gatewayServerId, changes) {
              _this.updater.setGatewayForStore(gatewayServerId, _this.userId);
              return parse(changes, function(success, changes) {
                if (success) {
                  return _this.sync(changes, _this.userId, '*', function() {
                    return done(true);
                  });
                } else {
                  console.log(changes);
                  return done(false);
                }
              });
            };
          })(this),
          interupted: function(done, reason) {
            background.state = 3;
            return done(false);
          }
        },
        update: {
          code: 'u',
          responseHandler: (function(_this) {
            return function(done, response) {
              if (!(response === 'error' || response === 'not allowed')) {
                _this.changesConfirmed();
                return parse(response, function(success, response) {
                  if (success) {
                    if (response.mapping != null) {
                      _this.updater.db.addMapping(response.mapping);
                    }
                    _this.updateToken = response.updateToken;
                    if (response.changes != null) {
                      return _this.executeChanges(response.changes, _this.user, function() {
                        return done(true);
                      });
                    } else {
                      return done(true);
                    }
                  } else {
                    return done(false, response);
                  }
                });
              } else {
                return done(false, response);
              }
            };
          })(this),
          interupted: function(done) {
            return done(false);
          }
        },
        subscribe: {
          code: 's',
          responseHandler: (function(_this) {
            return function(done, gatewayServerId, storeId, object, changes) {
              if (changes === 'not allowed') {
                return done(false);
              } else {
                _this.updater.setGatewayForStore(gatewayServerId, storeId);
                return parse(changes, function(success, changes) {
                  if (success) {
                    return _this.sync(changes, storeId, object, function() {
                      var base, base1;
                      if ((base = _this.subscriptions)[storeId] == null) {
                        base[storeId] = {};
                      }
                      if ((base1 = _this.subscriptions[storeId])[object] == null) {
                        base1[object] = {};
                      }
                      _this.subscriptions[storeId][object].retrieved = true;
                      return done(true);
                    });
                  } else {
                    return done(false);
                  }
                });
              }
            };
          })(this)
        },
        retrieve: {
          code: 'r',
          responseHandler: (function(_this) {
            return function() {
              var changes, done, i, j, parts, ref;
              done = arguments[0], parts = 2 <= arguments.length ? slice.call(arguments, 1) : [];
              changes = {};
              for (i = j = 0, ref = parts.length / 2; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
                _.merge(changes, parse(parts[i * 2 + 1]));
              }
              return done(changes);
            };
          })(this)
        },
        message: {
          code: 'm',
          responseHandler: function(done) {
            return done();
          }
        }
      };
      this.updater.db.tables.shared_objects.observe((function(_this) {
        return function(mutation) {
          var j, len, obj, ref, results, storeId;
          if (mutation.type === 'deletion') {
            storeId = mutation.record.get('user_id').substr(1);
            _this.unsubscribe(storeId, mutation.record.get('object'));
            if (!_this.updater.db.tables.shared_objects.selectFirst({
              user_id: mutation.record.get('user_id')
            })) {
              _this.unsubscribe(storeId, '@');
            }
          }
          if (_this._whenObjects) {
            ref = _this._whenObjects;
            results = [];
            for (j = 0, len = ref.length; j < len; j++) {
              obj = ref[j];
              results.push(_this.testWhenObject(obj));
            }
            return results;
          }
        };
      })(this));
    }

    WebSocketTransport.prototype.changesSent = function(changes) {
      return this.sentChanges = changes;
    };

    WebSocketTransport.prototype.changesConfirmed = function() {
      return delete this.sentChanges;
    };

    WebSocketTransport.prototype.testWhenObject = function(obj) {
      var count, j, len, object, ref, start;
      ref = obj.objects;
      for (j = 0, len = ref.length; j < len; j++) {
        object = ref[j];
        if (!this.isPermitted(obj.storeId, object)) {
          background.log('not permitted', obj.storeId, object);
          if (obj.state) {
            if (obj.state === 2) {
              obj.unavailable();
            }
            obj.state = 0;
          } else if (!obj.initial) {
            obj.initial = true;
            obj.unavailable();
          }
          return;
        }
      }
      if (!obj.state) {
        obj.state = 1;
        count = 0;
        start = (function(_this) {
          return function(succeeded) {
            if (succeeded) {
              if (count === obj.objects.length) {
                obj.available();
                return obj.state = 2;
              } else {
                return _this.subscribe(obj.storeId, obj.objects[count++], start);
              }
            } else {
              obj.state = 0;
              return obj.unavailable();
            }
          };
        })(this);
        return start(true);
      }
    };

    WebSocketTransport.prototype.reset = function() {
      this._whenObjects = [];
      delete this.sentChanges;
      return this.working = false;
    };

    WebSocketTransport.prototype.whenObject = function(storeId, objects, available, unavailable) {
      var obj;
      if (this._whenObjects == null) {
        this._whenObjects = [];
      }
      obj = {
        storeId: storeId,
        objects: objects,
        available: available,
        unavailable: unavailable
      };
      this._whenObjects.push(obj);
      this.testWhenObject(obj);
      return obj;
    };

    WebSocketTransport.prototype.unregisterWhenObject = function(obj) {
      if (this._whenObjects) {
        return _.pull(this._whenObjects, obj);
      }
    };

    WebSocketTransport.prototype.isPermitted = function(storeId, object) {
      var collaborator;
      if (storeId == this.userId) {
        return true;
      }
      if (object === '@') {
        if (this.updater.db.tables.shared_objects.selectFirst({
          user_id: 'G' + storeId
        }) || this.updater.db.tables.shared_objects.selectFirst({
          with_user_id: 'G' + storeId
        })) {
          return true;
        }
        if (collaborator = this.updater.db.tables.collaborators.selectFirst({
          user_id: storeId
        })) {
          return (collaborator.get('object_user_id')) + " " + (collaborator.get('object'));
        }
        return false;
      } else {
        if (!this.updater.db.tables.shared_objects.selectFirst({
          user_id: 'G' + storeId,
          object: object
        })) {
          return false;
        }
      }
      return true;
    };

    WebSocketTransport.prototype.subscribed = function(storeId, object) {
      var ref;
      return (ref = this.subscriptions[storeId]) != null ? ref[object] : void 0;
    };

    WebSocketTransport.prototype._getContents = function(record) {
      var child, contents, j, len, ref;
      contents = [];
      ref = record.contained(false);
      for (j = 0, len = ref.length; j < len; j++) {
        child = ref[j];
        if (!this.subscriptions[child.storeId][child.table.name + "." + (child.saneId())]) {
          contents.push(child);
          contents = contents.concat(this._getContents(child));
        }
      }
      return contents;
    };

    WebSocketTransport.prototype.unsubscribe = function(storeId, object) {
      var contents, j, k, len, len1, onUnsubscribeCb, onUnsubscribeCbs, r, record, ref;
      if ((ref = this.subscriptions[storeId]) != null ? ref[object] : void 0) {
        onUnsubscribeCbs = this.subscriptions[storeId][object].onUnsubscribe;
        if (onUnsubscribeCbs) {
          for (j = 0, len = onUnsubscribeCbs.length; j < len; j++) {
            onUnsubscribeCb = onUnsubscribeCbs[j];
            onUnsubscribeCb();
          }
        }
        delete this.subscriptions[storeId][object];
        record = agora.getObject(storeId, object);
        if (record) {
          this.updater.disabled = true;
          contents = [];
          if (object === '/') {
            contents = this._getContents(record);
          } else if (object === '@') {
            record["delete"]();
          } else {
            if (!record.owner()) {
              contents = this._getContents(record);
              record["delete"]();
            }
          }
          for (k = 0, len1 = contents.length; k < len1; k++) {
            r = contents[k];
            r["delete"]();
          }
        }
        return this.updater.disabled = false;
      }
    };

    WebSocketTransport.prototype.renewSubscriptions = function(storeId) {
      var __, ___, key, object, ref, ref1, results, results1;
      if (storeId == null) {
        storeId = null;
      }
      if (storeId) {
        ref = this.subscriptions[storeId];
        results = [];
        for (object in ref) {
          __ = ref[object];
          key = this.isPermitted(storeId, object);
          if (key) {
            results.push((function(_this) {
              return function(object) {
                return _this.work('subscribe', function() {
                  var params, ref1;
                  params = !_.isBoolean(key) ? [storeId, object, key] : [storeId, object];
                  return (ref1 = _this.messageStream).sendMessage.apply(ref1, ['subscribe'].concat(slice.call(params), [function() {
                    return _this.doneWorking();
                  }]));
                });
              };
            })(this)(object));
          } else {
            results.push(void 0);
          }
        }
        return results;
      } else {
        ref1 = this.subscriptions;
        results1 = [];
        for (storeId in ref1) {
          ___ = ref1[storeId];
          results1.push(this.renewSubscriptions(storeId));
        }
        return results1;
      }
    };

    WebSocketTransport.prototype.subscribe = function(storeId, object, cb, onUnsubscribe) {
      var base, key, s;
      if (onUnsubscribe == null) {
        onUnsubscribe = null;
      }
      key = null;
      if (storeId == this.userId) {
        cb(true);
        return;
      }
      if (!(key = this.isPermitted(storeId, object))) {
        return;
      }
      if ((base = this.subscriptions)[storeId] == null) {
        base[storeId] = {};
      }
      if (!this.subscriptions[storeId][object]) {
        this.subscriptions[storeId][object] = {
          retrieved: false,
          cbs: [cb],
          onUnsubscribe: onUnsubscribe ? [onUnsubscribe] : []
        };
        return this.work('subscribe', (function(_this) {
          return function() {
            var params, ref;
            params = !_.isBoolean(key) ? [storeId, object, key] : [storeId, object];
            return (ref = _this.messageStream).sendMessage.apply(ref, ['subscribe'].concat(slice.call(params), [function(r) {
              var j, k, len, len1, ref, ref1;
              _this.doneWorking();
              if (!r) {
                if (_this.subscriptions[storeId][object].cbs) {
                  ref = _this.subscriptions[storeId][object].cbs;
                  for (j = 0, len = ref.length; j < len; j++) {
                    cb = ref[j];
                    cb(false);
                  }
                  return delete _this.subscriptions[storeId][object].cbs;
                }
              } else {
                if (_this.subscriptions[storeId][object].cbs) {
                  ref1 = _this.subscriptions[storeId][object].cbs;
                  for (k = 0, len1 = ref1.length; k < len1; k++) {
                    cb = ref1[k];
                    cb(true);
                  }
                  return delete _this.subscriptions[storeId][object].cbs;
                }
              }
            }]));
          };
        })(this));
      } else {
        s = this.subscriptions[storeId][object];
        if (onUnsubscribe) {
          s.onUnsubscribe.push(onUnsubscribe);
        }
        if (s.retrieved) {
          return cb(true);
        } else {
          if (s.cbs == null) {
            s.cbs = [];
          }
          return s.cbs.push(cb);
        }
      }
    };

    WebSocketTransport.prototype.checkToRetrieve = function(changes, externalStoreId) {
      var base, base1, id, j, k, len, len1, map, needsToRetrieve, record, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, storeId, t, table, toRetrieve;
      toRetrieve = {};
      needsToRetrieve = false;
      map = {
        Product: 'products',
        ProductVariant: 'product_variants',
        Decision: 'decisions',
        Bundle: 'bundles'
      };
      ref = ['root_elements', 'list_elements', 'bundle_elements', 'belt_elements'];
      for (j = 0, len = ref.length; j < len; j++) {
        table = ref[j];
        if (changes[table]) {
          ref1 = changes[table];
          for (id in ref1) {
            record = ref1[id];
            if (t = map[record.element_type]) {
              if (changes != null ? (ref2 = changes[t]) != null ? ref2[record.element_id] : void 0 : void 0) {
                continue;
              }
              id = (ref3 = (ref4 = this.updater.db.globalToLocalMapping) != null ? (ref5 = ref4[t]) != null ? ref5[record.element_id] : void 0 : void 0) != null ? ref3 : record.element_id;
              if (!this.updater.db.table(t).byId(id)) {
                storeId = null;
                if (this.updater.db.table(t).canBeExternal) {
                  storeId = externalStoreId;
                } else {
                  storeId = this.updater.db.storeId;
                }
                if (toRetrieve[storeId] == null) {
                  toRetrieve[storeId] = {};
                }
                if ((base = toRetrieve[storeId])[t] == null) {
                  base[t] = [];
                }
                toRetrieve[storeId][t].push(record.element_id);
                needsToRetrieve = true;
              }
            }
          }
        }
      }
      ref6 = ['product_variants'];
      for (k = 0, len1 = ref6.length; k < len1; k++) {
        table = ref6[k];
        if (changes[table]) {
          ref7 = changes[table];
          for (id in ref7) {
            record = ref7[id];
            t = 'products';
            if (changes != null ? (ref8 = changes[t]) != null ? ref8[record.product_id] : void 0 : void 0) {
              continue;
            }
            id = (ref9 = (ref10 = this.updater.db.globalToLocalMapping) != null ? (ref11 = ref10[t]) != null ? ref11[record.product_id] : void 0 : void 0) != null ? ref9 : record.product_id;
            if (!this.updater.db.table(t).byId(id)) {
              storeId = null;
              if (this.updater.db.table(t).canBeExternal) {
                storeId = externalStoreId;
              } else {
                storeId = this.updater.db.storeId;
              }
              if (toRetrieve[storeId] == null) {
                toRetrieve[storeId] = {};
              }
              if ((base1 = toRetrieve[storeId])[t] == null) {
                base1[t] = [];
              }
              toRetrieve[storeId][t].push(record.product_id);
              needsToRetrieve = true;
            }
          }
        }
      }
      if (needsToRetrieve) {
        return toRetrieve;
      }
    };

    WebSocketTransport.prototype.executeChanges = function(changes, storeId, cb) {
      var allChanges, checkChanges, doExecuteChanges;
      if (cb == null) {
        cb = null;
      }
      doExecuteChanges = (function(_this) {
        return function() {
          _this.updater.disabled = true;
          _this.updater.db.externalStoreId = storeId;
          _this.updater.db.executeChanges(allChanges);
          _this.updater.disabled = false;
          delete _this.updater.db.externalStoreId;
          return typeof cb === "function" ? cb() : void 0;
        };
      })(this);
      allChanges = {};
      checkChanges = (function(_this) {
        return function(changes) {
          var parts, ref, stuffToRetrieve, theStoreId, toRetrieve;
          _.merge(allChanges, changes);
          toRetrieve = _this.checkToRetrieve(changes, storeId);
          if (toRetrieve) {
            parts = [];
            for (theStoreId in toRetrieve) {
              stuffToRetrieve = toRetrieve[theStoreId];
              parts.push(theStoreId);
              parts.push(JSON.stringify(stuffToRetrieve));
            }
            return (ref = _this.messageStream).sendMessage.apply(ref, ['retrieve'].concat(slice.call(parts), [checkChanges]));
          } else {
            return doExecuteChanges();
          }
        };
      })(this);
      return checkChanges(changes);
    };

    WebSocketTransport.prototype.sync = function(data, storeId, object, cb) {
      var contained, containedRecord, id, j, k, len, len1, name, record, ref, ref1, ref2, table, toDelete;
      if (cb == null) {
        cb = null;
      }
      this.updater.disabled = true;
      if (object === '*') {
        ref = this.updater.db.tables;
        for (name in ref) {
          table = ref[name];
          if (name === 'products' || name === 'product_variants') {
            continue;
          }
          toDelete = [];
          table.records.each((function(_this) {
            return function(record) {
              if (data[name]) {
                if (storeId == record.storeId && !data[name][record.globalId()]) {
                  return toDelete.push(record.globalId());
                }
              }
            };
          })(this));
          for (j = 0, len = toDelete.length; j < len; j++) {
            id = toDelete[j];
            table.byGlobalId(id)["delete"]();
          }
        }
      } else if (object === '@') {

      } else {
        ref1 = object.split('.'), table = ref1[0], id = ref1[1];
        record = this.updater.db.table(table).bySaneId(id);
        if (record) {
          contained = record.contained();
          for (k = 0, len1 = contained.length; k < len1; k++) {
            containedRecord = contained[k];
            if (!(data != null ? (ref2 = data[containedRecord.table.name]) != null ? ref2[containedRecord.globalId()] : void 0 : void 0)) {
              containedRecord["delete"]();
            }
          }
        }
      }
      this.updater.disabled = false;
      return this.executeChanges(data, storeId, cb);
    };

    WebSocketTransport.prototype.userChanged = function() {
      background.log('user changed');
      this.clientId = this.updater.clientId = null;
      if (this.ws) {
        this.ws.close();
        delete this.ws;
      }
      return this.registerClient((function(_this) {
        return function(response) {
          if (response) {
            return _this.createWebSocket();
          }
        };
      })(this));
    };

    WebSocketTransport.prototype.doInit = function(cb) {
      var init;
      init = (function(_this) {
        return function() {
          _this.sendNextChanges();
          return _this.work('init', function() {
            return _this.messageStream.sendMessage('init', _this.clientId, _this.userId, function(success) {
              _this.doneWorking();
              if (success) {
                if (typeof cb === "function") {
                  cb(true);
                }
                _this.renewSubscriptions();
                return _this.sendNextChanges();
              } else {
                return typeof cb === "function" ? cb(false) : void 0;
              }
            });
          });
        };
      })(this);
      if (this.workingChanges) {
        return this.work('sendPreviousChanges', (function(_this) {
          return function() {
            return _this.sendChanges(_this.workingChanges, function() {
              _this.doneWorking();
              return init();
            });
          };
        })(this));
      } else {
        return init();
      }
    };

    WebSocketTransport.prototype.createWebSocket = function(onInit) {
      background.log('creating websocket...');
      this.ws = new WebSocket("ws://" + this.server);
      this.messageStream.ws = this.ws;
      this.ws.onerror = (function(_this) {
        return function() {
          return console.log('error', arguments);
        };
      })(this);
      this.ws.onclose = (function(_this) {
        return function(event) {
          background.log('socket close', event.reason, event.code);
          _this.open = false;
          _this.working = false;
          _this.clearWorkQueue();
          _this.messageStream.clearMessageQueue();
          if (!_this.started && !_this.inited) {
            _this.inited = true;
            _this.updater.status.set('down');
            _this.updater.message.set('Agora is down for the moment. Please be patient! Thank you. :)');
            if (typeof onInit === "function") {
              onInit(false);
            }
            agora.onInit(false);
          }
          if (_this.clientId) {
            return setTimeout((function() {
              return _this.createWebSocket(onInit);
            }), 1000);
          }
        };
      })(this);
      this.ws.onmessage = (function(_this) {
        return function(message) {
          var changes, command, commandId, ref, ref1, storeId, type;
          message = message.data;
          console.debug('message:', message);
          type = message[0];
          message = message.substr(1);
          switch (type) {
            case '$':
              ref = message.split('\t'), commandId = ref[0], command = ref[1];
              return _this.updater.commandExecuter.executeCommand(JSON.parse(command), function(response, encode) {
                if (encode == null) {
                  encode = true;
                }
                return _this.ws.send("$" + commandId + "\t" + (encode ? JSON.stringify(response) : response));
              });
            case '.':
              if (_this.started) {
                if (parseInt(message) === _this.updater.gatewayForStore(_this.userId)) {
                  return _this.doInit();
                } else {
                  _this.renewSubscriptions(message);
                  return _this.sendNextChanges();
                }
              } else {
                return _this.updater.reset();
              }
              break;
            case ',':
              return _this.messageStream.interupted('server');
            case '<':
              return _this.messageStream.receivedResponse(message);
            case 'u':
              ref1 = message.split('\t'), storeId = ref1[0], changes = ref1[1];
              return parse(changes, function(success, changes) {
                if (success) {
                  return _this.work('update', function() {
                    return _this.executeChanges(changes, storeId, function() {
                      return _this.doneWorking();
                    });
                  });
                } else {
                  return background.error('UpdaterError', 'invalidUpdateMessage', changes);
                }
              });
            case 'p':
              return _this.ws.send("P" + message);
          }
        };
      })(this);
      this.ws.onopen = (function(_this) {
        return function() {
          _this.updater.status.set('online');
          _this.updater.message.set('');
          _this.open = true;
          return _this.doInit(function(success) {
            if (success) {
              if (!_this.started) {
                _this.started = true;
                if (!_this.inited) {
                  _this.inited = true;
                  if (typeof onInit === "function") {
                    onInit(true);
                  }
                  return background.state = 2;
                }
              } else {
                return agora.onInit(true);
              }
            } else {
              _this.updater.status.set('down');
              _this.updater.message.set('Agora is down for the moment. Please be patient! Thank you. :)');
              if (!_this.inited) {
                _this.inited = true;
                if (typeof onInit === "function") {
                  onInit(false);
                }
                return agora.onInit(false);
              }
            }
          });
        };
      })(this);
      return this.ws;
    };

    WebSocketTransport.prototype.registerClient = function(cb) {
      background.log('registering client');
      return this.updater.background.httpRequest(this.updater.background.apiRoot + 'ws/registerClient.php', {
        data: {
          extVersion: this.updater.background.version,
          instanceId: this.updater.background.instanceId
        },
        dataType: 'json',
        cb: (function(_this) {
          return function(response) {
            if (response === 'not signed in') {
              background.clientId = _this.server = _this.updater.clientId = _this.clientId = null;
              _this.updater.setUser(0);
              _this.userId = 0;
              tracking.enabled = false;
              return cb(null);
            } else if (response.status === 'success') {
              _this.updateToken = response.updateToken;
              background.clientId = _this.updater.clientId = _this.clientId = response.clientId;
              _this.userId = parseInt(response.userId);
              _this.server = response.updaterServer;
              _this.updater.setUser(_this.userId);
              if (response.track != null) {
                tracking.enabled = !!parseInt(response.track);
              } else {
                tracking.enabled = false;
              }
              if (response.convert) {
                agora.convert = response.convert;
              }
              return typeof cb === "function" ? cb(response) : void 0;
            }
          };
        })(this)
      });
    };

    WebSocketTransport.prototype.init = function(onInit) {
      return this.registerClient((function(_this) {
        return function(response) {
          if (response === null) {
            _this.started = true;
            return typeof onInit === "function" ? onInit() : void 0;
          } else {
            return _this.createWebSocket(onInit);
          }
        };
      })(this));
    };

    WebSocketTransport.prototype.clearWorkQueue = function() {
      return this.workQueue = [];
    };

    WebSocketTransport.prototype.work = function() {
      var args, cb;
      args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      if (this.working || !this.open) {
        return this.workQueue.push(args);
      } else {
        cb = _.isString(args[0]) ? (this.name = args[0], args[1]) : args[0];
        this.working = true;
        background.log('working', this.name);
        return cb();
      }
    };

    WebSocketTransport.prototype.doneWorking = function() {
      var args, cb;
      background.log('done working', this.name);
      delete this.name;
      this.working = false;
      if (this.workQueue.length) {
        args = this.workQueue.shift();
        cb = _.isString(args[0]) ? (this.name = args[0], args[1]) : args[0];
        return cb();
      } else if (this.changes) {
        this.changes = false;
        return this.sendNextChanges();
      }
    };

    WebSocketTransport.prototype.sendNextChanges = function() {
      var changes, f;
      changes = this.updater.nextChanges();
      if (changes) {
        f = (function(_this) {
          return function(currentChanges) {
            return _this.sendChanges(currentChanges, function(success) {
              var nextChanges;
              if (success) {
                nextChanges = _this.updater.nextChanges();
                if (nextChanges) {
                  return f(nextChanges);
                } else {
                  return _this.doneWorking();
                }
              } else {
                return _this.doneWorking();
              }
            });
          };
        })(this);
        return this.work('sendChanges', function() {
          return f(changes);
        });
      }
    };

    WebSocketTransport.prototype.sendChanges = function(changes, cb) {
      var storeId, theseChanges;
      console.log(changes);
      this.workingChanges = changes;
      storeId = _.keys(changes)[0];
      theseChanges = this.updater.convertIds(changes[storeId]);
      return this.messageStream.sendMessage('update', this.updateToken, storeId, JSON.stringify(theseChanges), (function(_this) {
        return function(success, message) {
          if (success) {
            delete _this.workingChanges;
            return cb(true);
          } else {
            return cb(false, message);
          }
        };
      })(this));
    };

    WebSocketTransport.prototype.hasChanges = function() {
      if (this.open) {
        if (this.working) {
          return this.changes = true;
        } else {
          clearTimeout(this.updaterTimerId);
          return this.updaterTimerId = setTimeout(((function(_this) {
            return function() {
              return _this.sendNextChanges();
            };
          })(this)), 200);
        }
      } else {
        return this.changes = true;
      }
    };

    return WebSocketTransport;

  })(UpdaterTransport);
  return Updater = (function() {
    Updater.prototype.test = function(data) {
      var fieldName, globalId, id, localId, localRecord, record, records, ref, ref1, ref2, ref3, ref4, remoteValue, results, table, tableName, value, values;
      for (tableName in data) {
        records = data[tableName];
        for (id in records) {
          record = records[id];
          localId = (ref = (ref1 = this.db.globalToLocalMapping) != null ? (ref2 = ref1[tableName]) != null ? ref2[id] : void 0 : void 0) != null ? ref : id;
          values = this.db.tables[tableName]._recordsByRid[localId]._values;
          if (values) {
            localRecord = this.prepare(tableName, values);
            for (fieldName in localRecord) {
              value = localRecord[fieldName];
              if (fieldName === 'more' || fieldName === 'offers' || fieldName === 'timestamp') {
                continue;
              }
              if (indexOf.call((ref3 = this.db.tables[tableName].schema.local) != null ? ref3 : [], fieldName) >= 0) {
                continue;
              }
              if (value != record[fieldName]) {
                console.debug(tableName + " " + localId + "|" + id + " " + fieldName + " `" + value + "` `" + record[fieldName] + "`");
              }
            }
          } else {
            console.debug(tableName + " " + localId + "|" + id + " " + fieldName);
          }
        }
      }
      ref4 = this.db.tables;
      results = [];
      for (tableName in ref4) {
        table = ref4[tableName];
        results.push((function() {
          var ref5, results1;
          ref5 = table._recordsByRid;
          results1 = [];
          for (id in ref5) {
            record = ref5[id]._values;
            globalId = this.convertId(tableName, id);
            localRecord = this.prepare(tableName, record);
            results1.push((function() {
              var results2;
              results2 = [];
              for (fieldName in localRecord) {
                value = localRecord[fieldName];
                if (!data[tableName][globalId]) {

                } else {
                  remoteValue = response.allData[tableName][globalId][fieldName];
                  if (remoteValue != value) {
                    results2.push(console.debug(tableName + " " + globalId + "|" + id + " " + fieldName + " " + value + " " + remoteValue));
                  } else {
                    results2.push(void 0);
                  }
                }
              }
              return results2;
            })());
          }
          return results1;
        }).call(this));
      }
      return results;
    };

    function Updater(background1, db, userIdValue, errorState) {
      var ref;
      this.background = background1;
      this.db = db;
      this.userIdValue = userIdValue;
      this.errorState = errorState;
      this.tables = {};
      this.deleted = [];
      this.userId = (ref = this.userIdValue.get()) != null ? ref : 0;
      this.updateInterval = 2000;
      this.autoUpdate = true;
      this.history = {};
      this.changes = false;
      this.userIdCookieValue = null;
      this.status = new ObservableValue;
      this.message = new ObservableValue;
      this.transport = new WebSocketTransport(this);
      this.gateways = {};
      this.gatewayByStore = {};
      this.commandExecuter = new CommandExecuter(this.background);
    }

    Updater.prototype.isStoreAvailable = function(storeId) {
      return true;
    };

    Updater.prototype.gatewayForStore = function(storeId) {
      return this.gatewayByStore[storeId];
    };

    Updater.prototype.setGatewayForStore = function(gatewayServerId, storeId) {
      var base;
      if ((base = this.gateways)[gatewayServerId] == null) {
        base[gatewayServerId] = {
          available: true,
          stores: []
        };
      }
      this.gateways[gatewayServerId].stores.push(parseInt(storeId));
      return this.gatewayByStore[storeId] = parseInt(gatewayServerId);
    };

    Updater.prototype.setGatewayAvailable = function(gatewayServerId, available) {
      var base;
      if ((base = this.gateways)[gatewayServerId] == null) {
        base[gatewayServerId] = {
          available: true,
          stores: []
        };
      }
      return this.gateways[gatewayServerId].available = available;
    };

    Updater.prototype.cookiePolling = function() {
      var cookieUrl;
      cookieUrl = env.cookieDomain ? "http://" + env.cookieDomain : this.background.apiRoot;
      return this.background.getCookie(cookieUrl, 'userId', (function(_this) {
        return function(cookie) {
          _this.userIdCookieValue = cookie != null ? cookie.value : void 0;
          return _this.background.setInterval((function() {
            return _this.background.getCookie(cookieUrl, 'userId', function(cookie) {
              if ((cookie != null ? cookie.value : void 0) !== _this.userIdCookieValue) {
                _this.userIdCookieValue = cookie != null ? cookie.value : void 0;
                return _this.transport.userChanged();
              }
            });
          }), 1000);
        };
      })(this));
    };

    Updater.prototype.init = function(cb) {
      return this.transport.init((function(_this) {
        return function() {
          var args;
          args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
          _this.cookiePolling();
          return cb.apply(null, args);
        };
      })(this));
    };

    Updater.prototype.isDisabled = function() {
      return this.disabled || !this.userId;
    };

    Updater.prototype.setUser = function(userId) {
      userId = parseInt(userId);
      if (userId !== this.userId) {
        background.log('new user', this.userId, userId);
        this.db.localToGlobalMapping = {};
        this.db.globalToLocalMapping = {};
        this.db.storeId = userId;
        this.disabled = true;
        this.db.clear();
        this.disabled = false;
        this.background.userId = this.userId = userId;
        return this.userIdValue.set(this.userId);
      }
    };

    Updater.prototype.isLocalId = function(id) {
      return (id + '')[0] !== 'G';
    };

    Updater.prototype.hasGlobalId = function(table, id) {
      var ref, ref1;
      if (this.isLocalId(id)) {
        return ((ref = this.db.localToGlobalMapping) != null ? (ref1 = ref[table]) != null ? ref1[id] : void 0 : void 0) != null;
      } else {
        return true;
      }
    };

    Updater.prototype.convertId = function(table, id) {
      var ref, ref1, ref2;
      if (this.isLocalId(id)) {
        return (ref = (ref1 = this.db.localToGlobalMapping) != null ? (ref2 = ref1[table]) != null ? ref2[id] : void 0 : void 0) != null ? ref : id;
      } else {
        return id;
      }
    };

    Updater.prototype.prepare = function(table, record) {
      var field, ref, ref1, referentTable, value, values;
      values = {};
      for (field in record) {
        value = record[field];
        if (referentTable = (ref = this.db.tables[table].schema) != null ? (ref1 = ref.referents) != null ? ref1[field] : void 0 : void 0) {
          if (_.isFunction(referentTable)) {
            referentTable = referentTable(record);
          }
          value = this.convertId(referentTable, value);
        }
        if (value instanceof Date) {
          value = value.getUTCFullYear() + '-' + leftPad(value.getUTCMonth(), 2, '0') + '-' + leftPad(value.getUTCDate(), 2, '0') + ' ' + leftPad(value.getUTCHours(), 2, '0') + ':' + leftPad(value.getUTCMinutes(), 2, '0') + ':' + leftPad(value.getUTCSeconds(), 2, '0');
        } else if (_.isPlainObject(value) || _.isArray(value)) {
          value = JSON.stringify(value);
        }
        values[field] = value;
      }
      return values;
    };

    Updater.prototype.forceUpdate = function() {
      this.background.clearTimeout(this.timerId);
      return this.update();
    };

    Updater.prototype.nextChanges = function() {
      var base, base1, changes, data, i, id, info, j, k, l, len, len1, len2, name1, name2, record, records, ref, ref1, ref2, ref3, selectedStoreId, storeId, storeIds, table, tables, toDelete, values;
      data = {};
      toDelete = [];
      ref = this.tables;
      for (table in ref) {
        records = ref[table];
        for (id in records) {
          record = records[id];
          storeId = (ref1 = this.db.table(table).byId(id)) != null ? ref1.storeId : void 0;
          if (!storeId || !this.isStoreAvailable(storeId)) {
            continue;
          }
          if (data[storeId] == null) {
            data[storeId] = {};
          }
          if ((base = data[storeId])[table] == null) {
            base[table] = {};
          }
          values = this.prepare(table, record);
          if (table === 'products' && !(values.siteName || values.productSid) && !this.hasGlobalId(table, id)) {
            throw new Error("BAD");
          }
          data[storeId][table][id] = values;
        }
      }
      ref2 = this.deleted;
      for (i = j = 0, len = ref2.length; j < len; i = ++j) {
        info = ref2[i];
        if (!this.isStoreAvailable(info.storeId)) {
          continue;
        }
        if (data[name1 = info.storeId] == null) {
          data[name1] = {};
        }
        if ((base1 = data[info.storeId])[name2 = info.table] == null) {
          base1[name2] = {};
        }
        data[info.storeId][info.table][info.id] = 'deleted';
      }
      if (!_.isEmpty(data)) {
        selectedStoreId = null;
        storeIds = _.keys(data);
        if (data[this.userId]) {
          selectedStoreId = this.userId;
        } else {
          selectedStoreId = storeIds[0];
        }
        for (k = 0, len1 = storeIds.length; k < len1; k++) {
          storeId = storeIds[k];
          if (storeId != selectedStoreId) {
            delete data[storeId];
          }
        }
        for (storeId in data) {
          tables = data[storeId];
          for (table in tables) {
            records = tables[table];
            for (id in records) {
              changes = records[id];
              if (changes === 'deleted') {
                ref3 = this.deleted;
                for (i = l = 0, len2 = ref3.length; l < len2; i = ++l) {
                  info = ref3[i];
                  if (info.table === table && info.id == id) {
                    this.deleted.splice(i, 1);
                    break;
                  }
                }
              } else {
                delete this.tables[table][id];
                if (_.isEmpty(this.tables[table])) {
                  delete this.tables[table];
                }
              }
            }
          }
        }
        return data;
      }
    };

    Updater.prototype.convertIds = function(changes) {
      var id, newChanges, record, records, table;
      newChanges = {};
      for (table in changes) {
        records = changes[table];
        newChanges[table] = {};
        for (id in records) {
          record = records[id];
          newChanges[table][this.convertId(table, id)] = record;
        }
      }
      return newChanges;
    };

    Updater.prototype.clearChanges = function(changes) {
      this.prevTables = this.tables;
      this.tables = {};
      this.deleted = [];
      return this.changes = false;
    };

    Updater.prototype.clearStorage = function() {
      return this.background.removeStorage(['updaterChanges', 'localToGlobalMapping', 'globalToLocalMapping']);
    };

    Updater.prototype.addUpdate = function(record, field) {
      var base, base1, name1, name2;
      if (this.isDisabled() || record.table.schema.local && indexOf.call(record.table.schema.local, field) >= 0) {
        return;
      }
      if ((base = this.tables)[name1 = record.table.name] == null) {
        base[name1] = {};
      }
      if ((base1 = this.tables[record.table.name])[name2 = record.id] == null) {
        base1[name2] = {};
      }
      this.tables[record.table.name][record.id][field] = record.get(field);
      this.changes = true;
      return this.transport.hasChanges();
    };

    Updater.prototype.addInsertion = function(record) {
      var base, name, name1, ref, value, values;
      values = null;
      if (record.table.schema.local) {
        values = {};
        ref = record._values;
        for (name in ref) {
          value = ref[name];
          if (indexOf.call(record.table.schema.local, name) < 0) {
            values[name] = value;
          }
        }
      } else {
        values = _.clone(record._values);
      }
      if (this.isDisabled()) {
        return;
      }
      if ((base = this.tables)[name1 = record.table.name] == null) {
        base[name1] = {};
      }
      this.tables[record.table.name][record.id] = values;
      this.changes = true;
      return this.transport.hasChanges();
    };

    Updater.prototype.addDeletion = function(record) {
      if (this.isDisabled()) {
        return;
      }
      if (record.hasGlobal()) {
        this.deleted.push({
          table: record.table.name,
          id: record.id,
          storeId: record.storeId
        });
      } else {
        if (this.tables[record.table.name]) {
          delete this.tables[record.table.name][record.id];
        }
      }
      this.changes = true;
      return this.transport.hasChanges();
    };

    Updater.prototype.reset = function() {
      agora.signalReload();
      chrome.runtime.reload();
      return;
      agora.reset();
      this.disabled = true;
      this.db.clear();
      this.disabled = false;
      this.transport.reset();
      this.changes = false;
      return this.tables = {};
    };

    Updater.prototype.subscribe = function(storeId, object, cb, onUnsubscribe) {
      if (onUnsubscribe == null) {
        onUnsubscribe = null;
      }
      return this.transport.subscribe(storeId, object, cb, onUnsubscribe);
    };

    return Updater;

  })();
});

//# sourceMappingURL=Updater2.js.map
