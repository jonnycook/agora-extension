// Generated by CoffeeScript 1.10.0
var images, installed, lastProduct, props, scrapeProduct, scrapeTestProducts, showConnect, testScraper, uploadTestProduct,
  slice = [].slice;

if (typeof ga !== "undefined" && ga !== null) {
  ga('create', env.trackingId, 'auto');
  ga('set', 'forceSSL', true);
  ga('set', 'checkProtocolTask', function() {});
}

installed = null;

showConnect = function() {
  if (typeof agora !== 'undefined' && installed !== null) {
    if (installed) {
      return agora.background.getCookie(agora.background.apiRoot, 'userId', (function(_this) {
        return function(cookie) {
          if (!cookie) {
            return chrome.tabs.create({
              url: 'http://agora.sh/connect.html'
            });
          }
        };
      })(this));
    }
  }
};

require(['Agora', 'ChromeBackground', '../../libs/md5'], function(Agora, ChromeBackground, md5) {
  var background;
  console.debug('ok');
  window.background = background = new ChromeBackground;
  window.onerror = function(message, file, line, column, error) {
    if (message !== 'Script error.') {
      return background.logError('Error', message, file, line, column, error != null ? error.stack : void 0, error != null ? error.info : void 0);
    }
  };
  return background.getStorage('instanceId', function(data) {
    var agora;
    if (data.instanceId) {
      background.instanceId = data.instanceId;
    } else {
      background.instanceId = md5((new Date().getTime()) + " " + (Math.random()));
      background.setStorage({
        instanceId: background.instanceId
      });
    }
    background.log('started');
    window.agora = agora = new Agora(background, {
      localTest: false,
      autoUpdate: env.autoUpdate,
      initDb: function(agora) {}
    });
    background.ping();
    setInterval((function() {
      return background.ping();
    }), 60 * 1000);
    return showConnect();
  });
});

chrome.runtime.onMessage.addListener((function(_this) {
  return function(message, sender, sendResponse) {
    var __, i, id, results;
    if (message.action === 'getScriptFor') {
      agora.enabledForUrl(message.url, function(enabled) {
        if (enabled) {
          agora.addTab(sender.tab.id);
          return agora.getContentScript(message.url, sendResponse);
        } else {
          return sendResponse();
        }
      });
      return true;
    } else if (message === 'getScript' && sender.tab) {
      __ = function() {
        return agora.enabledForUrl(sender.tab.url, function(enabled) {
          if (enabled) {
            agora.getContentScript(sender.tab.url, sendResponse);
            return agora.addTab(sender.tab.id);
          } else {
            return sendResponse();
          }
        });
      };
      if (typeof agora !== "undefined" && agora !== null) {
        __();
      } else {
        id = setInterval((function() {
          if (typeof agora !== "undefined" && agora !== null) {
            __();
            return clearInterval(id);
          }
        }), 10);
      }
      return true;
    } else if (message === "getStyles" && sender.tab) {
      agora.background.getStyles(function(styles) {
        return sendResponse(styles);
      });
      return true;
    } else if (message === 'init' && sender.tab) {
      agora.addTab(sender.tab.id);
      return agora.getContentScript(sender.tab.url, function(script) {
        return chrome.tabs.executeScript(sender.tab.id, {
          code: script,
          runAt: 'document_start'
        });
      });
    } else if (message === 'startTutorial') {
      return agora.tutorial('start');
    } else if (message === 'continueTutorial') {
      return agora.tutorial('continue');
    } else if (message === 'endTutorial') {
      return agora.tutorial('end');
    } else if (message.message === "code_get") {
      $.get(message.url, sendResponse);
      return true;
    } else if (message.action === "reloadModules") {
      i = 0;
      results = [];
      while (i < message.modules.length) {
        agora.codeManager.reload(message.modules[i]);
        results.push(++i);
      }
      return results;
    }
  };
})(this));

chrome.runtime.onMessageExternal.addListener((function(_this) {
  return function(message) {
    if (message === 'endTutorial') {
      return agora.endTutorial();
    } else if (message === 'startContentClipping') {
      return chrome.tabs.query({
        active: true,
        currentWindow: true
      }, function(tabs) {
        return chrome.tabs.sendMessage(tabs[0].id, 'startContentClipping');
      });
    } else if (message === 'facebookShare') {
      return tracking.event('SocialShare', 'Facebook');
    }
  };
})(this));

chrome.browserAction.onClicked.addListener(function(tab) {
  return chrome.tabs.query({
    active: true,
    currentWindow: true
  }, function(tabs) {
    return chrome.tabs.sendMessage(tabs[0].id, 'toggle');
  });
});

chrome.tabs.onRemoved.addListener(function(tabId) {
  agora.removeTab(tabId);
  return agora.background.unregisterTab(tabId);
});

chrome.runtime.onInstalled.addListener(function(details) {
  installed = details.reason === 'install';
  return showConnect();
});

props = ['title', 'price', 'image', 'rating', 'ratingCount', 'more', 'reviews'];

lastProduct = null;

scrapeProduct = function(site, sid, json) {
  if (json == null) {
    json = false;
  }
  lastProduct = {
    site: site,
    sid: sid
  };
  return agora.Site.site(site).productScraper(agora.background, sid, function(scraper) {
    return scraper.scrape(props, function(properties) {
      return console.debug(json ? JSON.stringify(properties) : properties);
    });
  });
};

images = function(siteName, id) {
  var product, site;
  site = agora.Site.site(siteName);
  product = agora.modelManager.getModel('Product').getBySid(siteName, id);
  return site.product(agora.background, product, function(siteProduct) {
    return siteProduct.images(function(images, currentStyle) {
      return console.debug(images, currentStyle);
    });
  });
};

scrapeTestProducts = function(siteName, json) {
  if (json == null) {
    json = false;
  }
  return $.get("http://ext.agora.sh/ext/getTestProducts.php?site=" + siteName, function(response) {
    var products, ref, site, testProducts;
    products = JSON.parse(response);
    console.debug(products);
    testProducts = (ref = products[siteName]) != null ? ref : {};
    site = agora.Site.site(siteName);
    return site.productScraperClass(agora.background, function(scraperClass) {
      var _, count, results, sid;
      count = 0;
      products = {};
      results = [];
      for (sid in testProducts) {
        _ = testProducts[sid];
        ++count;
        results.push((function(sid) {
          var scraper;
          scraper = new scraperClass(site, sid, agora.background);
          return scraper.scrape(props, function(properties) {
            --count;
            products[sid] = properties;
            if (!count) {
              return console.debug(json ? JSON.stringify(products) : products);
            }
          });
        })(sid));
      }
      return results;
    });
  });
};

testScraper = function(siteName) {
  return $.get("http://ext.agora.sh/ext/getTestProducts.php?site=" + siteName, function(response) {
    var products, ref, site, testProducts;
    products = JSON.parse(response);
    testProducts = (ref = products[siteName]) != null ? ref : {};
    site = agora.Site.site(siteName);
    return site.productScraperClass(agora.background, function(scraperClass) {
      var correctProperties, count, j, len, parts, prop, ref1, ref2, results, sid, skips;
      skips = {};
      if ((ref1 = scraperClass.testing) != null ? ref1.skipTest : void 0) {
        ref2 = scraperClass.testing.skipTest;
        for (j = 0, len = ref2.length; j < len; j++) {
          prop = ref2[j];
          parts = prop.split('.');
          skips[parts[0]] = parts.slice(1);
        }
      }
      count = 0;
      products = {};
      results = [];
      for (sid in testProducts) {
        correctProperties = testProducts[sid];
        ++count;
        results.push((function(sid, correctProperties) {
          var scraper;
          correctProperties = JSON.parse(correctProperties);
          scraper = new scraperClass(site, sid, agora.background);
          return scraper.scrape(props, function(properties) {
            var failed, name, s, value;
            failed = 0;
            for (name in correctProperties) {
              value = correctProperties[name];
              if (name === 'rating' || name === 'ratingCount' || name === 'reviews') {
                continue;
              }
              if (s = skips[name]) {
                if (!s.length) {
                  continue;
                }
                delete value[s[0]];
                delete properties[name][s[0]];
              }
              if (JSON.stringify(value) !== JSON.stringify(properties[name])) {
                ++failed;
                console.debug("mismatched " + sid + " " + name + " actual:" + (JSON.stringify(properties[name])) + " correct:" + (JSON.stringify(value)) + " ");
                console.debug(properties[name], value);
              }
            }
            if (!failed) {
              return console.debug("passed " + sid);
            }
          });
        })(sid, correctProperties));
      }
      return results;
    });
  });
};

uploadTestProduct = function(site, sid) {
  if (!site && !sid && lastProduct) {
    site = lastProduct.site, sid = lastProduct.sid;
  }
  return agora.Site.site(site).productScraper(agora.background, sid, function(scraper) {
    return scraper.scrape(props, function(properties) {
      return $.post('http://ext.agora.sh/ext/uploadTestProduct.php', {
        data: JSON.stringify(properties),
        site: site,
        sid: sid
      }, function() {
        return console.debug('done');
      });
    });
  });
};

window._activity = function() {
  var activity, arg, args, i, j, len, object, parent, storeId, type;
  type = arguments[0], object = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
  storeId = object.record.storeId;
  object = (function() {
    var ref;
    switch (object.modelName) {
      case 'RootElement':
        return parent = object.get('parent');
      case 'ListElement':
        parent = object.get('parent');
        return (ref = agora.modelManager.getModel('Decision').find({
          list_id: parent.record.globalId()
        })) != null ? ref : parent;
      case 'BundleElement':
        return object.get('parent');
      case 'BeltElement':
        return object.get('parent');
      default:
        return object;
    }
  })();
  if (object !== '/') {
    object = {
      model: object.modelName,
      id: object.record.globalId()
    };
  }
  for (i = j = 0, len = args.length; j < len; i = ++j) {
    arg = args[i];
    if (arg != null ? arg.modelName : void 0) {
      args[i] = {
        model: arg.modelName,
        id: arg.record.globalId()
      };
    }
  }
  activity = agora.db.tables.activity.insert({
    user_id: "G" + storeId,
    generator_id: agora.user.get('id'),
    type: type,
    object_type: object.model,
    object_id: object.id,
    args: args,
    timestamp: Math.floor(new Date().getTime() / 1000)
  });
  return activity.storeId = storeId;
};

window.getActivity = function() {
  var object;
  object = agora.modelManager.getInstance('User', 'G1');
  return agora.db.tables.activity.records.each(function(record) {
    var obj, parent;
    obj = agora.modelManager.getInstance(record.get('object_type'), record.get('object_id'), false);
    while (obj) {
      if (obj.isA(object.modelName) && obj.get('id') === object.get('id')) {
        console.debug(record.get('timestamp'), record.get('type'), record.get('object_type'), record.get('object_id'), record.get('args'));
        return;
      }
      parent = obj.record.owner();
      if (parent) {
        obj = agora.modelManager.instanceForRecord(parent);
      } else {
        break;
      }
    }
  });
};

//# sourceMappingURL=background.js.map
