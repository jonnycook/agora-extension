// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jQuery', 'Background', 'ChromeContentScript'], function($, Background, ChromeContentScript) {
  var ChromeBackground;
  return ChromeBackground = (function(_super) {
    __extends(ChromeBackground, _super);

    ChromeBackground.prototype.version = "chrome-" + (chrome.runtime.getManifest().version);

    ChromeBackground.prototype.getVersion = function() {
      return chrome.runtime.getManifest().version;
    };

    function ChromeBackground() {
      ChromeBackground.__super__.constructor.apply(this, arguments);
      this.portsForTab = {};
      chrome.runtime.onConnect.addListener((function(_this) {
        return function(port) {
          if (port.sender.tab) {
            _this.portsForTab[port.sender.tab.id] = port;
            port.onDisconnect.addListener(function() {
              delete _this.portsForTab[port.sender.tab.id];
              return _this.unregisterTab(port.sender.tab.id);
            });
            return port.onMessage.addListener(function(message) {
              var request, _i, _len, _ref, _results;
              if (message.requests) {
                _ref = message.requests;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  request = _ref[_i];
                  _results.push((function(request) {
                    return _this.handler(request.request, port.sender.tab, function(response) {
                      return port.postMessage({
                        type: 'response',
                        id: request.id,
                        response: response
                      });
                    });
                  })(request));
                }
                return _results;
              } else {
                return _this.handler(message.request, port.sender.tab, function(response) {
                  return port.postMessage({
                    type: 'response',
                    id: message.id,
                    response: response
                  });
                });
              }
            });
          }
        };
      })(this));
    }

    ChromeBackground.prototype.getStyles = function(cb) {
      return $.get(chrome.extension.getURL('resources/stylesheets/chrome.css'), cb);
    };

    ChromeBackground.prototype.clientLibsPath = function() {
      return chrome.extension.getURL('libs/client/merged.js');
    };

    ChromeBackground.prototype.injectUtilScripts = function(sender, done) {
      var cb, count, loadScripts, _loadScripts;
      _loadScripts = function(scripts, cb) {
        var count, script, tick, _i, _len, _results;
        count = scripts.length;
        tick = function() {
          if (--count === 0) {
            return cb();
          }
        };
        _results = [];
        for (_i = 0, _len = scripts.length; _i < _len; _i++) {
          script = scripts[_i];
          _results.push(chrome.tabs.executeScript(sender.id, {
            file: script
          }, tick));
        }
        return _results;
      };
      loadScripts = function(scripts, cb) {
        var doLoadScripts, i;
        i = 0;
        doLoadScripts = function() {
          var s;
          s = scripts[i++];
          if (s) {
            if (!_.isArray(s)) {
              s = [s];
            }
            return _loadScripts(s, doLoadScripts);
          } else {
            return cb();
          }
        };
        return doLoadScripts();
      };
      count = 2;
      cb = function(script) {
        if (--count === 0) {
          return done();
        }
      };
      loadScripts(this.libs, cb);
      return chrome.tabs.insertCSS(sender.id, {
        file: 'resources/stylesheets/chrome.css'
      }, cb);
    };

    ChromeBackground.prototype.onRequest = function(handler) {
      return this.handler = handler;
    };

    ChromeBackground.prototype.sendRequest = function(tabId, request, response) {
      if (this.portsForTab[tabId]) {
        return this.portsForTab[tabId].postMessage({
          type: 'request',
          request: request
        });
      } else {
        return console.log('no port for tab', tabId, request);
      }
    };

    ChromeBackground.prototype.contentScript = function() {
      return ChromeContentScript;
    };

    ChromeBackground.prototype.httpRequest = function(url, opts) {
      if (opts == null) {
        opts = {};
      }
      return $.ajax(url, {
        type: opts.method,
        data: opts.data,
        dataType: opts.dataType,
        success: function(response, status, xhr) {
          return opts != null ? typeof opts.cb === "function" ? opts.cb(response, {
            status: status,
            header: function(name) {
              return xhr.getResponseHeader(name);
            }
          }) : void 0 : void 0;
        },
        error: function() {
          return opts != null ? typeof opts.error === "function" ? opts.error() : void 0 : void 0;
        }
      });
    };

    ChromeBackground.prototype.require = function(modules, cb) {
      return require(modules, cb);
    };

    ChromeBackground.prototype.setInterval = function(cb, duration) {
      return setInterval(cb, duration);
    };

    ChromeBackground.prototype.clearInterval = function(id) {
      return clearInterval(id);
    };

    ChromeBackground.prototype.setTimeout = function(cb, duration) {
      return setTimeout(cb, duration);
    };

    ChromeBackground.prototype.clearTimeout = function(id) {
      return clearTimeout(id);
    };

    ChromeBackground.prototype.getCookie = function(url, name, cb) {
      return chrome.cookies.get({
        url: url,
        name: name
      }, function(cookie) {
        return cb(cookie ? {
          value: cookie.value
        } : null);
      });
    };

    ChromeBackground.prototype.getValue = function(name) {
      return window[name];
    };

    ChromeBackground.prototype.setValue = function(name, value) {
      return window[name] = value;
    };

    ChromeBackground.prototype.defaultValue = function(name, value) {
      return window[name] != null ? window[name] : window[name] = value;
    };

    ChromeBackground.prototype.getResourceUrl = function(resource) {
      return chrome.extension.getURL(resource);
    };

    ChromeBackground.prototype.openTab = function(url) {};

    ChromeBackground.prototype.getStorage = function(values, cb) {
      return chrome.storage.local.get(values, cb);
    };

    ChromeBackground.prototype.setStorage = function(values) {
      return chrome.storage.local.set(values);
    };

    ChromeBackground.prototype.removeStorage = function(fields) {
      return chrome.storage.local.remove(fields);
    };

    return ChromeBackground;

  })(Background);
});

//# sourceMappingURL=ChromeBackground.map
