// Generated by CoffeeScript 1.7.1
var images, props, scrapeProduct, scrapeTestProducts, testScraper, uploadTestProduct;

require(['Agora', 'ChromeBackground'], function(Agora, ChromeBackground) {
  var agora;
  window.agora = agora = new Agora(new ChromeBackground, {
    localTest: true,
    autoUpdate: false,
    client: false
  });
  return console.debug('go!');
});

props = ['title', 'price', 'image', 'rating', 'ratingCount', 'more', 'reviews'];

scrapeProduct = function(site, sid, json) {
  if (json == null) {
    json = false;
  }
  return agora.Site.site(site).productScraper(agora.background, sid, function(scraper) {
    return scraper.scrape(props, function(properties) {
      return console.debug(json ? JSON.stringify(properties) : properties);
    });
  });
};

images = function(siteName, id) {
  var product, site;
  site = agora.Site.site(siteName);
  product = agora.modelManager.getModel('Product').getBySid(siteName, id);
  return site.product(agora.background, product, function(siteProduct) {
    return siteProduct.images(function(images, currentStyle) {
      return console.debug(images, currentStyle);
    });
  });
};

scrapeTestProducts = function(siteName, json) {
  if (json == null) {
    json = false;
  }
  return $.get("http://ext.agora.sh/ext/getTestProducts.php?site=" + siteName, function(response) {
    var products, site, testProducts, _ref;
    products = JSON.parse(response);
    console.debug(products);
    testProducts = (_ref = products[siteName]) != null ? _ref : {};
    site = agora.Site.site(siteName);
    return site.productScraperClass(agora.background, function(scraperClass) {
      var count, sid, _, _results;
      count = 0;
      products = {};
      _results = [];
      for (sid in testProducts) {
        _ = testProducts[sid];
        ++count;
        _results.push((function(sid) {
          var scraper;
          scraper = new scraperClass(site, sid, agora.background);
          return scraper.scrape(props, function(properties) {
            --count;
            products[sid] = properties;
            if (!count) {
              return console.debug(json ? JSON.stringify(products) : products);
            }
          });
        })(sid));
      }
      return _results;
    });
  });
};

testScraper = function(siteName) {
  return $.get("http://ext.agora.sh/ext/getTestProducts.php?site=" + siteName, function(response) {
    var products, site, testProducts, _ref;
    products = JSON.parse(response);
    testProducts = (_ref = products[siteName]) != null ? _ref : {};
    site = agora.Site.site(siteName);
    return site.productScraperClass(agora.background, function(scraperClass) {
      var correctProperties, count, parts, prop, sid, skips, _i, _len, _ref1, _ref2, _results;
      skips = {};
      if ((_ref1 = scraperClass.testing) != null ? _ref1.skipTest : void 0) {
        _ref2 = scraperClass.testing.skipTest;
        for (_i = 0, _len = _ref2.length; _i < _len; _i++) {
          prop = _ref2[_i];
          parts = prop.split('.');
          skips[parts[0]] = parts.slice(1);
        }
      }
      count = 0;
      products = {};
      _results = [];
      for (sid in testProducts) {
        correctProperties = testProducts[sid];
        ++count;
        _results.push((function(sid, correctProperties) {
          var scraper;
          correctProperties = JSON.parse(correctProperties);
          scraper = new scraperClass(site, sid, agora.background);
          return scraper.scrape(props, function(properties) {
            var failed, name, s, value;
            failed = 0;
            for (name in correctProperties) {
              value = correctProperties[name];
              if (name === 'rating' || name === 'ratingCount' || name === 'reviews') {
                continue;
              }
              if (s = skips[name]) {
                if (!s.length) {
                  continue;
                }
                delete value[s[0]];
                delete properties[name][s[0]];
              }
              if (JSON.stringify(value) !== JSON.stringify(properties[name])) {
                ++failed;
                console.debug("mismatched " + sid + " " + name + " actual:" + (JSON.stringify(properties[name])) + " correct:" + (JSON.stringify(value)) + " ");
                console.debug(properties[name], value);
              }
            }
            if (!failed) {
              return console.debug("passed " + sid);
            }
          });
        })(sid, correctProperties));
      }
      return _results;
    });
  });
};

uploadTestProduct = function(site, sid) {
  return agora.Site.site(site).productScraper(agora.background, sid, function(scraper) {
    return scraper.scrape(props, function(properties) {
      return $.post('http://ext.agora.sh/ext/uploadTestProduct.php', {
        data: JSON.stringify(properties),
        site: site,
        sid: sid
      }, function() {
        return console.debug('done');
      });
    });
  });
};

$(function() {
  var siteName;
  $('<input type="text" name="site" value="Uniqlo" />').appendTo('body');
  siteName = function() {
    return $('[name=site]').val();
  };
  $('<button>Scrape Test Products</button>').appendTo('body').click(function() {
    return scrapeTestProducts(siteName(), true);
  });
  return $('<button>Test Scraper</button>').appendTo('body').click(function() {
    return testScraper(siteName());
  });
});

//# sourceMappingURL=script.map
