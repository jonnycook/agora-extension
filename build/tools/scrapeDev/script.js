// Generated by CoffeeScript 1.7.1
var CurrentScraper, Pages, scrapers, setCurrentScraper, version;

scrapers = [{}];

CurrentScraper = {};

setCurrentScraper = function(i) {
  CurrentScraper = scrapers[i];
  return resetInterface();
};

Pages = {};

version = 0;

define(['../../lib/scraping/DeclarativeScraper', './interface', './ListInterface'], function(DeclarativeScraper, iface, ListInterface) {
  var encodeHtml, save;
  chrome.storage.local.get('scrapeDev.scrapers', function(data) {
    var _ref;
    scrapers = (_ref = data['scrapeDev.scrapers']) != null ? _ref : [{}];
    return start();
  });
  save = function() {
    var data;
    data = {};
    data['scrapeDev.scrapers'] = iface.stripUIData(scrapers);
    return chrome.storage.local.set(data);
  };
  encodeHtml = function(html) {
    return html.replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };
  return window.start = (function() {
    var addMatchPreview;
    iface.setInputs({
      text: function(data, binding, element) {
        var el;
        el = $("<input type='text' placeholder='" + element.bind + "'>");
        el.val(binding.get());
        el.keyup(function() {
          return binding.set(el.val());
        });
        return el;
      },
      textarea: function(data, binding, element) {
        var el;
        el = $("<textarea placeholder='" + element.bind + "'></textarea>");
        el.val(binding.get());
        el.keyup(function() {
          return binding.set(el.val());
        });
        return el;
      },
      select: function(data, binding, element) {
        var el, optionEl, value, _i, _len, _ref, _ref1;
        el = $("<select><option value=''>" + ((_ref = data.emptyLabel) != null ? _ref : element.bind) + "</option></select>");
        _ref1 = data.values;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          value = _ref1[_i];
          optionEl = $("<option value='" + value + "'>" + value + "</option>");
          if (binding.get() === value) {
            optionEl.prop('selected', true);
          }
          el.append(optionEl);
        }
        el.change(function() {
          return binding.set(el.val());
        });
        return el;
      },
      checkbox: function(data, binding, element) {
        var el;
        el = $("<input type='checkbox'> <label>" + element.bind + "</label>");
        if (binding.get()) {
          el.prop('checked', true);
        } else {
          el.prop('checked', false);
        }
        el.change(function() {
          return binding.set(el.prop('checked'));
        });
        return el;
      }
    });
    addMatchPreview = function(el) {
      el.children('.pattern').before('<div class="matchPreview" />');
      return el.children('.pattern').find('input').keyup(function() {
        return update();
      });
    };
    iface.setInterfaces({
      root: {
        elements: [
          {
            bind: 'site',
            input: 'text'
          }, {
            bind: 'name',
            input: 'text'
          }, {
            bind: 'pages',
            "interface": 'pages'
          }, {
            bind: 'properties',
            "interface": 'properties'
          }
        ],
        init: function(el) {
          el.find('.site').keyup(function() {
            return updateScrapers();
          });
          return el.find('.name').keyup(function() {
            return updateScrapers();
          });
        }
      },
      properties: {
        type: 'dictionary',
        valueInterface: 'property'
      },
      property: {
        elements: [
          {
            bind: 'value',
            "interface": 'value'
          }, {
            bind: 'matches',
            "interface": 'matches'
          }
        ]
      },
      pages: {
        type: 'list',
        elementType: 'page'
      },
      page: {
        elements: [
          {
            bind: 'url',
            input: 'text'
          }
        ],
        init: function(el, data) {
          var page;
          page = data.get();
          setTimeout((function() {
            var currentVersion, index;
            index = el.parents('li:first').index();
            if (page != null ? page.url : void 0) {
              currentVersion = version;
              $.get(page != null ? page.url : void 0, function(response) {
                if (currentVersion !== version) {
                  return;
                }
                return Pages[index] = response;
              });
              el.addClass('downloaded');
            }
            return el.find('[type=text]').change(function() {
              currentVersion = version;
              el.removeClass('downloaded');
              return $.get(page != null ? page.url : void 0, function(response) {
                if (currentVersion !== version) {
                  return;
                }
                Pages[index] = response;
                return el.addClass('downloaded');
              });
            });
          }), 0);
          return el.append($("<input type='radio' name='page'>").change(function() {
            page = $('[name="page"]:checked').parents('.interface.page').parents('li:first').index();
            $('#pages .source').hide();
            $($('#pages li').get(page)).find('.source').show();
            return update();
          }));
        }
      },
      value: {
        elements: [
          {
            bind: 'type',
            input: {
              type: 'select',
              values: ['object', 'array']
            }
          }, {
            bind: 'name',
            input: 'text'
          }, {
            bind: 'capture',
            input: 'text'
          }, {
            bind: 'content',
            input: 'textarea'
          }
        ]
      },
      matches: {
        type: 'list',
        elementTypes: ['Match', 'MatchAll', 'Or', 'Switch', 'Count'],
        map: function(el) {
          return el.type;
        },
        initObj: function(obj, type) {
          return obj.type = type;
        }
      },
      captures: {
        type: 'dictionary',
        valueInterface: 'capture'
      },
      capture: {
        elements: [
          {
            bind: 'value',
            "interface": 'value'
          }, {
            bind: 'matches',
            "interface": 'matches'
          }
        ]
      },
      Match: {
        init: function(el) {
          return addMatchPreview(el);
        },
        elements: [
          {
            bind: 'disabled',
            input: 'checkbox'
          }, {
            bind: 'optional',
            input: 'checkbox'
          }, {
            bind: 'pattern',
            input: 'text'
          }, {
            bind: 'value',
            "interface": 'value'
          }, {
            bind: 'captures',
            "interface": 'captures'
          }
        ]
      },
      Or: {
        elements: [
          {
            bind: 'disabled',
            input: 'checkbox'
          }, {
            bind: 'optional',
            input: 'checkbox'
          }, {
            bind: 'value',
            "interface": 'value'
          }, {
            bind: 'matches',
            "interface": 'matches'
          }
        ]
      },
      Switch: {
        elements: [
          {
            bind: 'disabled',
            input: 'checkbox'
          }, {
            bind: 'optional',
            input: 'checkbox'
          }, {
            bind: 'value',
            "interface": 'value'
          }, {
            bind: 'cases',
            "interface": 'cases'
          }
        ]
      },
      cases: {
        type: 'list',
        elementType: 'case'
      },
      "case": {
        init: function(el) {
          return addMatchPreview(el);
        },
        elements: [
          {
            bind: 'disabled',
            input: 'checkbox'
          }, {
            bind: 'value',
            "interface": 'value'
          }, {
            bind: 'pattern',
            input: 'text'
          }, {
            bind: 'matches',
            "interface": 'matches'
          }
        ]
      },
      MatchAll: {
        init: function(el) {
          addMatchPreview(el);
          return el.children('.matchPreview').before($('<input type="text" class="match">').keyup(function() {
            return update();
          }));
        },
        elements: [
          {
            bind: 'disabled',
            input: 'checkbox'
          }, {
            bind: 'optional',
            input: 'checkbox'
          }, {
            bind: 'pattern',
            input: 'text'
          }, {
            bind: 'value',
            "interface": 'value'
          }, {
            bind: 'match.value',
            "interface": 'value'
          }, {
            bind: 'match.captures',
            "interface": 'captures'
          }
        ]
      },
      Count: {
        init: function(el) {
          return addMatchPreview(el);
        },
        elements: [
          {
            bind: 'disabled',
            input: 'checkbox'
          }, {
            bind: 'optional',
            input: 'checkbox'
          }, {
            bind: 'pattern',
            input: 'text'
          }
        ]
      }
    });
    iface.setOnModified(function() {
      return save();
    });
    return $(function() {
      var getPage, getSubject, noMatches, updateMatches;
      $('body').addClass('showValues');
      $('body').append('<textarea id="html" style="display:none"/>');
      $('body').append('<div id="topBar" />');
      (function() {
        var el;
        var el, setSelectedScraper;
        setSelectedScraper = function(i) {
          var data;
          ++version;
          CurrentScraper = scrapers[i];
          resetInterface();
          data = {};
          data['scrapeDev.selectedScraper'] = i;
          return chrome.storage.local.set(data);
        };
        el = $('<select />').appendTo('#topBar').change(function() {
          return setSelectedScraper(parseInt(el.val()));
        });
        chrome.storage.local.get('scrapeDev.selectedScraper', function(data) {
          el.prop('selectedIndex', data['scrapeDev.selectedScraper']);
          return setSelectedScraper(data['scrapeDev.selectedScraper']);
        });
        window.updateScrapers = function() {
          var i, optionEl, scraper, selectedIndex, _i, _len, _ref, _ref1;
          selectedIndex = el.prop('selectedIndex');
          el.html('');
          for (i = _i = 0, _len = scrapers.length; _i < _len; i = ++_i) {
            scraper = scrapers[i];
            optionEl = $("<option value='" + i + "'>" + ((_ref = scraper.site) != null ? _ref : '*') + " " + ((_ref1 = scraper.name) != null ? _ref1 : '*') + "</option>");
            el.append(optionEl);
          }
          if (selectedIndex >= 0) {
            return el.prop('selectedIndex', selectedIndex);
          }
        };
        $('<button>+</button>').appendTo('#topBar').click(function() {
          scrapers.push({});
          save();
          updateScrapers();
          setCurrentScraper(scrapers.length - 1);
          return el.prop('selectedIndex', scrapers.length - 1);
        });
        $('<button>-</button>').appendTo('#topBar').click(function() {
          var newScraper;
          scrapers.splice(el.val(), 1);
          newScraper = Math.max(0, el.prop('selectedIndex') - 1);
          save();
          el.prop('selectedIndex', newScraper);
          updateScrapers();
          return setCurrentScraper(newScraper);
        });
        return updateScrapers();
      })();
      $('<button>Reload CSS</button>').appendTo('#topBar').click(function() {
        $('link').remove();
        return $('<link rel="stylesheet" type="text/css" href="scrapeDev/styles.css?' + new Date().getTime() + '">').appendTo('head');
      });
      $('<button>Toggle Value</button>').appendTo('#topBar').click(function() {
        return $('body').toggleClass('showValues');
      });
      $('<button>Execute</button>').appendTo('#topBar').click(function() {
        return doExecuteMatch();
      });
      $('<button>Get Data</button>').appendTo('#topBar').click(function() {
        var el;
        el = $('<textarea />').html(JSON.stringify(iface.stripUIData(Data))).appendTo('body').select();
        document.execCommand('copy');
        return el.remove();
      });
      $('<button>Upload</button>').appendTo('#topBar').click(function() {
        var data;
        data = JSON.stringify(iface.stripUIData(CurrentScraper));
        return $.post('http://ext.agora.sh/uploadScraper.php', {
          data: data
        });
      });
      $('<button>Download All</button>').appendTo('#topBar').click(function() {
        return $.get('http://ext.agora.sh/getScrapers.php', (function(response) {
          scrapers = response.scrapers;
          save();
          updateScrapers();
          return setCurrentScraper(0);
        }), 'json');
      });
      $('<span id="noMatches" />').appendTo('#topBar');
      noMatches = 0;
      updateMatches = function(matchObjs, content, force) {
        var capture, caseObj, group, groupMatches, match, matchNum, matchPreviewEl, matches, regExp, _i, _len, _ref, _results;
        if (force == null) {
          force = false;
        }
        _results = [];
        for (_i = 0, _len = matchObjs.length; _i < _len; _i++) {
          match = matchObjs[_i];
          switch (match.type) {
            case 'Match':
              matchPreviewEl = match['.ui'].el.children('.matchPreview');
              if (match.pattern && match.pattern !== match['.ui'].lastPattern || force) {
                match['.ui'].lastPattern = match.pattern;
                regExp = new RegExp(match.pattern);
                matches = content.match(regExp);
                if (matches) {
                  matchPreviewEl.html(encodeHtml(matches[0]));
                  if (match.captures) {
                    _results.push((function() {
                      var _ref, _results1;
                      _ref = match.captures;
                      _results1 = [];
                      for (group in _ref) {
                        capture = _ref[group];
                        if (capture.matches) {
                          _results1.push(updateMatches(capture.matches, matches[parseInt(group)], true));
                        } else {
                          _results1.push(void 0);
                        }
                      }
                      return _results1;
                    })());
                  } else {
                    _results.push(void 0);
                  }
                } else {
                  matchPreviewEl.html('no match');
                  _results.push(++noMatches);
                }
              } else {
                _results.push(matchPreviewEl.html(''));
              }
              break;
            case 'MatchAll':
              matchPreviewEl = match['.ui'].el.children('.matchPreview');
              if (match.pattern && match.pattern !== match['.ui'].lastPattern || force) {
                match['.ui'].lastPattern = match.pattern;
                regExp = new RegExp(match.pattern);
                matches = content.match(new RegExp(match.pattern, 'g'));
                if (matches != null ? matches.length : void 0) {
                  matchNum = parseInt(match['.ui'].el.children('.match').val());
                  if (isNaN(matchNum)) {
                    matchNum = 0;
                  }
                  matchPreviewEl.html(matches.length + ': ' + encodeHtml(matches[matchNum]));
                  if ((_ref = match.match) != null ? _ref.captures : void 0) {
                    _results.push((function() {
                      var _ref1, _results1;
                      _ref1 = match.match.captures;
                      _results1 = [];
                      for (group in _ref1) {
                        capture = _ref1[group];
                        if (capture.matches) {
                          groupMatches = matches[matchNum].match(regExp);
                          if (groupMatches) {
                            if (parseInt(group) < groupMatches.length) {
                              _results1.push(updateMatches(capture.matches, groupMatches[parseInt(group)], true));
                            } else {
                              throw new Error("" + group + " > " + groupMatches.length);
                            }
                          } else {
                            throw new Error();
                          }
                        } else {
                          _results1.push(void 0);
                        }
                      }
                      return _results1;
                    })());
                  } else {
                    _results.push(void 0);
                  }
                } else {
                  matchPreviewEl.html('no match');
                  _results.push(++noMatches);
                }
              } else {
                _results.push(matchPreviewEl.html(''));
              }
              break;
            case 'Switch':
              if (match.cases) {
                _results.push((function() {
                  var _j, _len1, _ref1, _results1;
                  _ref1 = match.cases;
                  _results1 = [];
                  for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
                    caseObj = _ref1[_j];
                    matchPreviewEl = caseObj['.ui'].el.children('.matchPreview');
                    if (caseObj.pattern && caseObj.pattern !== caseObj['.ui'].lastPattern || force) {
                      caseObj['.ui'].lastPattern = caseObj.pattern;
                      regExp = new RegExp(caseObj.pattern);
                      matches = content.match(regExp);
                      if (matches) {
                        matchPreviewEl.html(encodeHtml(matches[0]));
                        if (caseObj.matches) {
                          _results1.push(updateMatches(caseObj.matches, content, true));
                        } else {
                          _results1.push(void 0);
                        }
                      } else {
                        matchPreviewEl.html('no match');
                        _results1.push(++noMatches);
                      }
                    } else {
                      _results1.push(matchPreviewEl.html(''));
                    }
                  }
                  return _results1;
                })());
              } else {
                _results.push(void 0);
              }
              break;
            case 'Or':
              if (match.matches) {
                _results.push(updateMatches(match.matches, content));
              } else {
                _results.push(void 0);
              }
              break;
            default:
              _results.push(void 0);
          }
        }
        return _results;
      };
      getPage = function() {
        var page;
        page = $('[name="page"]:checked').parents('.interface.page').parents('li:first').index();
        return Pages[page === -1 ? 0 : page];
      };
      getSubject = function() {
        return getPage();
      };
      window.update = function() {
        var name, property, _ref;
        noMatches = 0;
        if (getSubject()) {
          _ref = CurrentScraper.properties;
          for (name in _ref) {
            property = _ref[name];
            if (name === '.ui') {
              continue;
            }
            if (property.matches) {
              updateMatches(property.matches, getSubject(), true);
            }
          }
        }
        return $('#noMatches').html(noMatches);
      };
      window.doExecuteMatch = function() {
        var e, name, paths, properties, property, scraper, _ref, _ref1;
        if (getSubject()) {
          properties = {};
          paths = {};
          _ref = iface.stripUIData(CurrentScraper.properties);
          for (name in _ref) {
            property = _ref[name];
            scraper = new DeclarativeScraper(property);
            try {
              properties[name] = (_ref1 = scraper.scrape(getSubject())[0]) != null ? _ref1.value : void 0;
            } catch (_error) {
              e = _error;
              if (e.message === 'FailedRequirement') {
                console.debug("" + name + " failed", scraper.path);
              } else {
                console.debug(scraper.path);
                throw e;
              }
            }
            paths[name] = scraper.path;
          }
          return console.debug(properties, paths);
        }
      };
      console.debug('asdf');
      window.resetInterface = function() {
        Pages = {};
        $('body').children('.root').remove();
        $('body').append(iface.createInterface('root', new iface.DataInterface(CurrentScraper)));
        return update();
      };
      return setCurrentScraper(scrapers.length - 1);
    });
  });
});

//# sourceMappingURL=script.map
