// Generated by CoffeeScript 1.10.0
var add, matchAll, matchName, output, set,
  slice = [].slice;

output = null;

RegExp.prototype._exec = RegExp.prototype.exec;

RegExp.prototype.exec = function(subject) {
  var matches;
  matches = this._exec(subject);
  add({
    type: 'match',
    value: matches
  });
  return matches;
};

String.prototype._match = String.prototype.match;

String.prototype.match = function(pattern) {
  var matches;
  matches = this._match(pattern);
  add({
    type: 'match',
    value: matches
  });
  return matches;
};

matchName = null;

set = function(name) {
  return matchName = name;
};

add = function(opts) {
  if (matchName && !opts.name) {
    opts.name = matchName;
    matchName = null;
  }
  return output.push(opts);
};

matchAll = function(subject, pattern, group) {
  var globalMatch, globalMatches, i, len, matches, r, regExp;
  if (group == null) {
    group = false;
  }
  if (!pattern) {
    return [];
  }
  if (pattern instanceof RegExp) {
    pattern = pattern.source;
  }
  globalMatches = subject._match(new RegExp(pattern, 'g'));
  if (!globalMatches) {
    console.error("failed to match " + pattern);
    return [];
  }
  regExp = new RegExp(pattern);
  r = [];
  for (i = 0, len = globalMatches.length; i < len; i++) {
    globalMatch = globalMatches[i];
    matches = globalMatch._match(regExp);
    if (group === false) {
      r.push(matches);
    } else {
      r.push(matches[group]);
    }
  }
  add({
    type: (group === false ? 'matchAll' : 'match'),
    value: r
  });
  return r;
};

window.addEventListener('message', function(event) {
  var code;
  window.subject = event.data.subject;
  output = [];
  code = event.data.code;
  (function() {
    var __, i, len, match, matches, name, ref, results, variableName;
    eval(code);
    matches = code._match(/(\$\w*)\s*=/g);
    if (matches) {
      results = [];
      for (i = 0, len = matches.length; i < len; i++) {
        match = matches[i];
        ref = /(\$(\w*))\s*=/._exec(match), __ = ref[0], variableName = ref[1], name = ref[2];
        results.push(eval("add({type:'variable', name:'" + name + "', value:" + variableName + "});"));
      }
      return results;
    }
  }).apply({
    matchAll: matchAll,
    resource: {
      _match: function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return typeof subject !== "undefined" && subject !== null ? subject._match.apply(subject, args) : void 0;
      },
      toString: function() {
        return subject;
      },
      matchAll: function() {
        var args;
        args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
        return matchAll.apply(null, [subject].concat(slice.call(args)));
      },
      match: function(pattern) {
        return subject.match(pattern);
      }
    }
  });
  return event.source.postMessage(output, event.origin);
});

//# sourceMappingURL=eval.js.map
