// Generated by CoffeeScript 1.10.0
var load, save;

load = function(name, cb) {
  return chrome.storage.local.get('codeDev', function(data) {
    var ref;
    return cb((ref = data.codeDev) != null ? ref[name] : void 0);
  });
};

save = function(name, value) {
  return chrome.storage.local.get('codeDev', function(data) {
    if (data.codeDev == null) {
      data.codeDev = {};
    }
    data.codeDev[name] = value;
    return chrome.storage.local.set({
      codeDev: data.codeDev
    });
  });
};

$(function() {
  var Sites, compileTimer, createEntryEl, doRun, encodeHtml, evalEl, output, run, update, updateOutput, usingSite;
  evalEl = $('<iframe src="scrapeDev/eval.html" />').appendTo('body').hide();
  usingSite = 0;
  (function() {
    var el;
    el = $('<div id="sitesArea"> <input type="text" name="usingSite" value="0"> <textarea id="sites" /> </div>').appendTo('body');
    $('#sites').change(function() {
      Sites.updateSites($(this).val());
      return save('sites', $(this).val());
    });
    return $('[name=usingSite]').keyup(function() {
      usingSite = parseInt($(this).val());
      return update();
    });
  })();
  load('sites', function(sites) {
    $('#sites').val(sites);
    return Sites.updateSites(sites);
  });
  encodeHtml = function(html) {
    return html.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
  };
  update = function() {
    var ref;
    if ((ref = Sites.siteList[usingSite]) != null ? ref.content : void 0) {
      $('#html').html(encodeHtml(Sites.siteList[usingSite].content));
      return doRun();
    }
  };
  Sites = {
    sites: {},
    siteList: [],
    downloadSite: function(site) {
      console.debug("downloading site " + site);
      this.sites[site] = {
        index: this.siteList.length
      };
      this.siteList[this.sites[site].index] = this.sites[site];
      return $.get(site, ((function(_this) {
        return function(response) {
          _this.sites[site].content = response;
          return update();
        };
      })(this)), 'text');
    },
    updateSites: function(sitesString) {
      var i, len, results, site, sites;
      sites = sitesString.split(/\s+/g);
      results = [];
      for (i = 0, len = sites.length; i < len; i++) {
        site = sites[i];
        site = site.trim();
        if (site) {
          if (!this.sites[site]) {
            results.push(this.downloadSite(site));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };
  $('<div id="area"> <div id="html" /> <div id="editor" /> <div id="outputPanel"> <input type="text"> <div id="output" /> </div> </div>').appendTo('body');
  $('#outputPanel > input').keyup(function() {
    save('filter', $(this).val());
    return updateOutput();
  });
  load('filter', function(filter) {
    return $('#outputPanel > input').val(filter);
  });
  doRun = function() {
    var code;
    if (Sites.siteList[usingSite]) {
      code = CoffeeScript.compile(editor.getValue(), {
        bare: true
      });
      return run(code);
    }
  };
  run = function(code) {
    var subject;
    code = code.replace(/(.*?)\s*=\s*matchAll/g, function(match, variable) {
      return "set('" + variable + "'); " + match;
    });
    code = code.replace(/(.*?)\s*=\s*.*?\.match/g, function(match, variable) {
      return "set('" + variable + "'); " + match;
    });
    code = code.replace(/(.*?)\s*=\s*\/.*?\/\.exec/g, function(match, variable) {
      return "set('" + variable + "'); " + match;
    });
    subject = Sites.siteList[usingSite].content;
    return evalEl.get(0).contentWindow.postMessage({
      subject: subject,
      code: code
    }, '*');
  };
  compileTimer = null;
  setTimeout((function() {
    editor.doc.on('change', function() {
      save('code', editor.getValue());
      clearTimeout(compileTimer);
      return compileTimer = setTimeout((function() {
        return doRun();
      }), 200);
    });
    return chrome.storage.local.get('codeDev', function(data) {
      var ref;
      return editor.setValue((ref = data.codeDev) != null ? ref.code : void 0);
    });
  }), 0);
  createEntryEl = function(entry) {
    var el, i, j, k, len, len1, len2, match, matches, matchesEl, ref, ref1;
    el = $("<div class='entry' />");
    if (entry.type === 'match') {
      if (entry.name) {
        el.append("<div class='name'>" + entry.name + "</div>");
      }
      if (entry.value) {
        el.append('<ul />');
        ref = entry.value;
        for (i = 0, len = ref.length; i < len; i++) {
          match = ref[i];
          el.find('ul').append($('<li />').html(encodeHtml(match)));
        }
      } else {
        el.html('no match');
      }
      return el;
    } else if (entry.type === 'matchAll') {
      if (entry.name) {
        el.append("<div class='name'>" + entry.name + "</div>");
      }
      el.append('<ul />');
      ref1 = entry.value;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        matches = ref1[j];
        matchesEl = $('<li><ul /></ul>').appendTo(el.children('ul'));
        for (k = 0, len2 = matches.length; k < len2; k++) {
          match = matches[k];
          matchesEl.children('ul').append($('<li />').html(encodeHtml(match)));
        }
      }
      return el;
    } else if (entry.type === 'variable') {
      el.append("<div class='name'>" + entry.name + "</div>");
      el.append("<div class='json'>" + (JSON.stringify(entry.value, void 0, 2)) + "</div>");
      return el;
    }
  };
  output = null;
  updateOutput = function() {
    var entry, filter, i, j, k, l, len, len1, len2, len3, name, results, results1;
    $('#output').html('');
    if (output) {
      if ($('#outputPanel > input').val()) {
        filter = $('#outputPanel > input').val().split(/,\s*/);
        for (i = 0, len = filter.length; i < len; i++) {
          name = filter[i];
          for (j = 0, len1 = output.length; j < len1; j++) {
            entry = output[j];
            if (entry.name && entry.name === name) {
              $('#output').append(createEntryEl(entry));
            }
          }
        }
        results = [];
        for (k = 0, len2 = output.length; k < len2; k++) {
          entry = output[k];
          if (!entry.name) {
            results.push($('#output').append(createEntryEl(entry)));
          } else {
            results.push(void 0);
          }
        }
        return results;
      } else {
        results1 = [];
        for (l = 0, len3 = output.length; l < len3; l++) {
          entry = output[l];
          results1.push($('#output').append(createEntryEl(entry)));
        }
        return results1;
      }
    }
  };
  return window.addEventListener('message', function(event) {
    output = event.data;
    return updateOutput();
  });
});

//# sourceMappingURL=code.js.map
